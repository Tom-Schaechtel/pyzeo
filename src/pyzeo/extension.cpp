/* Generated by Cython 3.1.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/area_and_volume.h",
            "src/channel.h",
            "src/cluster.h",
            "src/cycle.h",
            "src/feature.h",
            "src/geometry.h",
            "src/graphstorage.h",
            "src/holograms.h",
            "src/network.h",
            "src/networkinfo.h",
            "src/networkio.h",
            "src/networkstorage.h",
            "src/psd.h",
            "src/sphere_approx.h",
            "src/string_additions.h",
            "src/voronoicell.h"
        ],
        "extra_compile_args": [
            "-Wall",
            "-ansi",
            "-pedantic",
            "-O3"
        ],
        "include_dirs": [
            "src/pyzeo"
        ],
        "language": "c++",
        "name": "pyzeo.extension",
        "sources": [
            "src/pyzeo/extension.pyx",
            "src/area_and_volume.cc",
            "src/channel.cc",
            "src/cluster.cc",
            "src/cycle.cc",
            "src/grid.cc",
            "src/geometry.cc",
            "src/graphstorage.cc",
            "src/voro++/src/voro++.cc",
            "src/net.cc",
            "src/networkaccessibility.cc",
            "src/networkanalysis.cc",
            "src/networkstorage.cc",
            "src/networkinfo.cc",
            "src/network.cc",
            "src/networkio.cc",
            "src/material.cc",
            "src/mindist.cc",
            "src/OMS.cc",
            "src/psd.cc",
            "src/sphere_approx.cc",
            "src/string_additions.cc",
            "src/symbcalc.cc",
            "src/symmetry.cc",
            "src/ray.cc",
            "src/rmsd.cc",
            "src/voronoicell.cc",
            "src/v_network.cc"
        ]
    },
    "module_name": "pyzeo.extension"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API)
  #if !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef _MSC_VER
  #pragma message ("Limited API usage is enabled with 'CYTHON_LIMITED_API' but 'Py_LIMITED_API' does not define a Python target version. Consider setting 'Py_LIMITED_API' instead.")
  #else
  #warning Limited API usage is enabled with 'CYTHON_LIMITED_API' but 'Py_LIMITED_API' does not define a Python target version. Consider setting 'Py_LIMITED_API' instead.
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_5"
#define CYTHON_HEX_VERSION 0x030105F0
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME
  #define CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME 100
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__pyzeo__extension
#define __PYX_HAVE_API__pyzeo__extension
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string_view>
#include <string>
#include <vector>
#include <set>
#include "../geometry.h"
#include "../networkinfo.h"
#include "../channel.h"
#include "../psd.h"
#include "../networkio.h"
#include "../networkstorage.h"
#include "../network.h"
#include "../area_and_volume.h"
#include "../graphstorage.h"
#include "../voronoicell.h"
#include "../cycle.h"
#include "../cluster.h"
#include "../sphere_approx.h"
#include "../feature.h"
#include "../holograms.h"
#include "../string_additions.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  static CYTHON_INLINE int __Pyx_PyLong_CompactAsLong(PyObject *x, long *return_value);
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "src/pyzeo/extension.pyx",
  "<stringsource>",
  "src/pyzeo/extension.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5pyzeo_9extension_Xyz;
struct __pyx_obj_5pyzeo_9extension_Point;
struct __pyx_obj_5pyzeo_9extension_Channel;
struct __pyx_obj_5pyzeo_9extension_Atom;
struct __pyx_obj_5pyzeo_9extension_AtomNetwork;
struct __pyx_obj_5pyzeo_9extension_VoronoiNode;
struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork;
struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork;
struct __pyx_obj_5pyzeo_9extension_VorFace;
struct __pyx_obj_5pyzeo_9extension_VorCell;
struct __pyx_obj_5pyzeo_9extension_BasicVCell;
struct __pyx_obj_5pyzeo_9extension_Cycle;
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr;

/* "pyzeo/extension.pxd":35
 * 
 * 
 * cdef class Xyz:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ XYZ class defined in geometry.h
*/
struct __pyx_obj_5pyzeo_9extension_Xyz {
  PyObject_HEAD
  XYZ *thisptr;
};


/* "pyzeo/extension.pxd":43
 * 
 * 
 * cdef class Point:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ Point class defined in geometry.h
*/
struct __pyx_obj_5pyzeo_9extension_Point {
  PyObject_HEAD
  Point *thisptr;
};


/* "pyzeo/extension.pxd":91
 *             vector[cpp_bool] *, vector[CHANNEL] *)
 * 
 * cdef class Channel:             # <<<<<<<<<<<<<<
 *     cdef CHANNEL* thisptr
 * 
*/
struct __pyx_obj_5pyzeo_9extension_Channel {
  PyObject_HEAD
  CHANNEL *thisptr;
};


/* "pyzeo/extension.pxd":212
 *             VORONOI_NETWORK* vornet, ATOM_NETWORK* atmnet)
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM class.
*/
struct __pyx_obj_5pyzeo_9extension_Atom {
  PyObject_HEAD
  ATOM *thisptr;
};


/* "pyzeo/extension.pxd":218
 *     cdef ATOM* thisptr
 * 
 * cdef class AtomNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM_NETWORK class.
*/
struct __pyx_obj_5pyzeo_9extension_AtomNetwork {
  PyObject_HEAD
  ATOM_NETWORK *thisptr;
  int rad_flag;
};


/* "pyzeo/extension.pxd":227
 *     cdef bint rad_flag
 * 
 * cdef class VoronoiNode:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VOR_NODE class.
*/
struct __pyx_obj_5pyzeo_9extension_VoronoiNode {
  PyObject_HEAD
  VOR_NODE *thisptr;
};


/* "pyzeo/extension.pxd":233
 *     cdef VOR_NODE* thisptr
 * 
 * cdef class VoronoiNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VORONOI_NETWORK class.
*/
struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork {
  PyObject_HEAD
  VORONOI_NETWORK *thisptr;
};


/* "pyzeo/extension.pxd":260
 * 
 * 
 * cdef class DijkstraNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ DIJKSTRA_NETWORK class.
*/
struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork {
  PyObject_HEAD
  DIJKSTRA_NETWORK *thisptr;
};


/* "pyzeo/extension.pxd":295
 * 
 * 
 * cdef class VorFace:             # <<<<<<<<<<<<<<
 *     cdef  VOR_FACE* thisptr
 * 
*/
struct __pyx_obj_5pyzeo_9extension_VorFace {
  PyObject_HEAD
  VOR_FACE *thisptr;
};


/* "pyzeo/extension.pxd":298
 *     cdef  VOR_FACE* thisptr
 * 
 * cdef class VorCell:             # <<<<<<<<<<<<<<
 *     cdef VOR_CELL* thisptr
 * 
*/
struct __pyx_obj_5pyzeo_9extension_VorCell {
  PyObject_HEAD
  VOR_CELL *thisptr;
};


/* "pyzeo/extension.pxd":301
 *     cdef VOR_CELL* thisptr
 * 
 * cdef class BasicVCell:             # <<<<<<<<<<<<<<
 *     cdef BASIC_VCELL* thisptr
 * 
*/
struct __pyx_obj_5pyzeo_9extension_BasicVCell {
  PyObject_HEAD
  BASIC_VCELL *thisptr;
};


/* "pyzeo/extension.pxd":319
 * 
 * 
 * cdef class Cycle:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ CYCLE class.
*/
struct __pyx_obj_5pyzeo_9extension_Cycle {
  PyObject_HEAD
  CYCLE *thisptr;
};


/* "pyzeo/extension.pyx":771
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
*/
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObject_Unicode.proto */
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseUnboundLocalError.proto */
static void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObjectDelAttr.proto */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
#define __Pyx_PyObject_DelAttr(o, n) PyObject_SetAttr(o, n, NULL)
#else
#define __Pyx_PyObject_DelAttr(o, n) PyObject_DelAttr(o, n)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   __Pyx_PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CommonTypesMetaclass.proto */
static int __pyx_CommonTypesMetaclass_init(PyObject *module);
#define __Pyx_CommonTypesMetaclass_USED

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
#include "descrobject.h"
#endif
CYTHON_UNUSED static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IterNextPlain.proto */
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator);
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* ReturnWithStopIteration.proto */
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    __Pyx_pyiter_sendfunc yieldfrom_am_send;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
#if CYTHON_USE_SYS_MONITORING && (CYTHON_PROFILE || CYTHON_TRACE)
    PyMonitoringState __pyx_pymonitoring_state[__Pyx_MonitoringEventTypes_CyGen_count];
    uint64_t __pyx_pymonitoring_version;
#endif
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static __Pyx_PySendResult __Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static __Pyx_PySendResult __Pyx_Coroutine_Close(PyObject *self, PyObject **retval);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen);
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen);
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen);
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure);
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send);
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);
static CYTHON_INLINE PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self);

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."


/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string_view" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "libcpp" */

/* Module declarations from "pyzeo" */

/* Module declarations from "pyzeo.extension" */
static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pyzeo.extension"
extern int __pyx_module_is_main_pyzeo__extension;
int __pyx_module_is_main_pyzeo__extension = 0;

/* Implementation of "pyzeo.extension" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "(";
static const char __pyx_k_1[] = "\200\001\360\010\000\005\034\2301";
static const char __pyx_k_A[] = "\200\001\360\010\000\005%\240A";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_Q[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k_a[] = "\200\001\330\004\t\210\021\210,\220a";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_HI[] = "HI";
static const char __pyx_k_S4[] = "S4";
static const char __pyx_k__2[] = ",";
static const char __pyx_k__3[] = ")";
static const char __pyx_k__4[] = "";
static const char __pyx_k__5[] = "?";
static const char __pyx_k__6[] = "\240\021";
static const char __pyx_k__7[] = "\200\001\360\010\000\005\033\230!";
static const char __pyx_k__8[] = "\200\001\330\004\013\210>\230\021\230!";
static const char __pyx_k__9[] = "\200\001\330\004\013\320\013!\240\021\240!";
static const char __pyx_k_aq[] = "\200\001\330\004\013\320\013\036\230a\230q";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_1_2[] = "\200\001\360\010\000\005$\2401";
static const char __pyx_k_ACC[] = "ACC";
static const char __pyx_k_AQC[] = "AQC";
static const char __pyx_k_DDH[] = "DDH";
static const char __pyx_k_DEF[] = "DEF";
static const char __pyx_k_FCC[] = "FCC";
static const char __pyx_k_ICC[] = "ICC";
static const char __pyx_k_ICH[] = "ICH";
static const char __pyx_k_LOW[] = "LOW";
static const char __pyx_k_MED[] = "MED";
static const char __pyx_k_OCC[] = "OCC";
static const char __pyx_k_Q_2[] = "\200\001\360\010\000\005\036\230Q";
static const char __pyx_k_RIH[] = "RIH";
static const char __pyx_k_S10[] = "S10";
static const char __pyx_k_S20[] = "S20";
static const char __pyx_k_S30[] = "S30";
static const char __pyx_k_S40[] = "S40";
static const char __pyx_k_S50[] = "S50";
static const char __pyx_k_TIH[] = "TIH";
static const char __pyx_k_Xyz[] = "Xyz";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_ecs[] = "ecs";
static const char __pyx_k_fcs[] = "fcs";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_iit[] = "iit";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Atom[] = "Atom";
static const char __pyx_k_S100[] = "S100";
static const char __pyx_k_S500[] = "S500";
static const char __pyx_k_aq_2[] = "\200\001\330\004\013\210;\220a\220q";
static const char __pyx_k_cntr[] = "cntr";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_objs[] = "objs";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Cycle[] = "Cycle";
static const char __pyx_k_Point[] = "Point";
static const char __pyx_k_Qiq_1[] = "\200\001\360\024\000\005\016\320\r\035\230Q\230i\240q\330\004\013\2101";
static const char __pyx_k_S1000[] = "S1000";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cname[] = "cname";
static const char __pyx_k_coord[] = "coord";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_prune[] = "prune";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_subNo[] = "subNo";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_A_AV4q[] = "\200A\360\010\000\t\025\220A\220V\2304\230q";
static const char __pyx_k_A_t8_q[] = "\200A\340\010\017\210t\2208\230<\240q";
static const char __pyx_k_S10000[] = "S10000";
static const char __pyx_k_atmnet[] = "atmnet";
static const char __pyx_k_bvcell[] = "bvcell";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_cycles[] = "cycles";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_id_set[] = "id_set";
static const char __pyx_k_minRad[] = "minRad";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_nG1_aq[] = "\200\001\360\010\000\005'\240n\260G\2701\330\004\026\220a\220q";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sa_str[] = "sa_str";
static const char __pyx_k_vcells[] = "vcells";
static const char __pyx_k_vedges[] = "vedges";
static const char __pyx_k_vfaces[] = "vfaces";
static const char __pyx_k_vnodes[] = "vnodes";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_vornet[] = "vornet";
static const char __pyx_k_A_t86_a[] = "\200A\330\010\017\210t\2208\2306\240\025\240a";
static const char __pyx_k_A_t8_Qa[] = "\200A\340\010\017\210t\2208\230:\240Q\240a";
static const char __pyx_k_Channel[] = "Channel";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_VorCell[] = "VorCell";
static const char __pyx_k_VorFace[] = "VorFace";
static const char __pyx_k_WARNING[] = "WARNING";
static const char __pyx_k_WA_q_aq[] = "\200\001\360\010\000\005(\240~\260W\270A\340\004\017\210q\220\016\230a\230q";
static const char __pyx_k_acc_set[] = "acc_set";
static const char __pyx_k_bvcells[] = "bvcells";
static const char __pyx_k_c_fname[] = "c_fname";
static const char __pyx_k_channel[] = "channel";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_e_vnode[] = "e_vnode";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_isMetal[] = "isMetal";
static const char __pyx_k_new_xyz[] = "new_xyz";
static const char __pyx_k_o_vnode[] = "o_vnode";
static const char __pyx_k_shift_x[] = "shift_x";
static const char __pyx_k_shift_y[] = "shift_y";
static const char __pyx_k_shift_z[] = "shift_z";
static const char __pyx_k_vol_str[] = "vol_str";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_Qj_4_q_D[] = "\320\004:\270!\360\026\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\340\010 \240\001\330\010\013\2104\320\017\037\230q\240\014\250D\260\001\330\020\021\330\014\022\220!";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_atom_ids[] = "atom_ids";
static const char __pyx_k_c_atmnet[] = "c_atmnet";
static const char __pyx_k_c_vornet[] = "c_vornet";
static const char __pyx_k_centroid[] = "centroid";
static const char __pyx_k_cnd_file[] = "cnd_file";
static const char __pyx_k_edge_end[] = "edge_end";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_loadMass[] = "loadMass";
static const char __pyx_k_node_ids[] = "node_ids";
static const char __pyx_k_probeRad[] = "probeRad";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rad_file[] = "rad_file";
static const char __pyx_k_rad_flag[] = "rad_flag";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_vis_flag[] = "vis_flag";
static const char __pyx_k_xyz_list[] = "xyz_list";
static const char __pyx_k_xyz_vect[] = "xyz_vect";
static const char __pyx_k_A_Qj_4_t1[] = "\200A\360\016\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2104\210{\230!\230<\240t\2501\330\014\022\220!";
static const char __pyx_k_A_Qj_4y_T[] = "\200A\360\016\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2104\210y\230\001\230\034\240T\250\021\330\014\022\220!";
static const char __pyx_k_A_Qj_4z_d[] = "\200A\360\016\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2104\210z\230\021\230,\240d\250!\330\014\022\220!";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_Xyz_scale[] = "Xyz.scale";
static const char __pyx_k_c_bvcells[] = "c_bvcells";
static const char __pyx_k_cpnt_file[] = "cpnt_file";
static const char __pyx_k_csph_file[] = "csph_file";
static const char __pyx_k_edge_orig[] = "edge_orig";
static const char __pyx_k_ha_atmnet[] = "ha_atmnet";
static const char __pyx_k_ha_vornet[] = "ha_vornet";
static const char __pyx_k_hist_file[] = "hist_file";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_newatmnet[] = "newatmnet";
static const char __pyx_k_newvornet[] = "newvornet";
static const char __pyx_k_node_size[] = "node_size";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_BasicVCell[] = "BasicVCell";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_basicvcell[] = "basicvcell";
static const char __pyx_k_bvcelllist[] = "bvcelllist";
static const char __pyx_k_c_channels[] = "c_channels";
static const char __pyx_k_c_filename[] = "c_filename";
static const char __pyx_k_c_rad_file[] = "c_rad_file";
static const char __pyx_k_chist_file[] = "chist_file";
static const char __pyx_k_cpoint_ptr[] = "cpoint_ptr";
static const char __pyx_k_lookupMass[] = "lookupMass";
static const char __pyx_k_newcvornet[] = "newcvornet";
static const char __pyx_k_radialFlag[] = "radialFlag";
static const char __pyx_k_radialflag[] = "radialflag";
static const char __pyx_k_readV1file[] = "readV1file";
static const char __pyx_k_red_vornet[] = "red_vornet";
static const char __pyx_k_tmp_atmnet[] = "tmp_atmnet";
static const char __pyx_k_vornet_ptr[] = "vornet_ptr";
static const char __pyx_k_A_Q_HF_87_q[] = "\200A\330\010\022\220#\220Q\330\010\014\210H\220F\230!\2308\2407\250!\330\010\017\210q";
static const char __pyx_k_A_Qj_4z_d_A[] = "\200A\360\030\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2104\210z\230\021\230,\240d\250*\260A\330\020\021\330\014\022\220!";
static const char __pyx_k_AtomNetwork[] = "AtomNetwork";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_VoronoiNode[] = "VoronoiNode";
static const char __pyx_k_access_info[] = "access_info";
static const char __pyx_k_accuracy_kw[] = "_accuracy_kw";
static const char __pyx_k_atmnet_copy[] = "atmnet_copy";
static const char __pyx_k_c_atmnetptr[] = "c_atmnetptr";
static const char __pyx_k_c_vornetptr[] = "c_vornetptr";
static const char __pyx_k_dijkstranet[] = "dijkstranet";
static const char __pyx_k_edge_center[] = "edge_center";
static const char __pyx_k_get_node_id[] = "get_node_id";
static const char __pyx_k_node_id_set[] = "node_id_set";
static const char __pyx_k_points_file[] = "points_file";
static const char __pyx_k_py_channels[] = "py_channels";
static const char __pyx_k_readArcfile[] = "readArcfile";
static const char __pyx_k_readCiffile[] = "readCiffile";
static const char __pyx_k_readCucfile[] = "readCucfile";
static const char __pyx_k_writeV1file[] = "writeV1file";
static const char __pyx_k_write_to_V1[] = "write_to_V1";
static const char __pyx_k_A_oQ_WA_AZ_q[] = "\200A\360\n\000\t\027\220o\240Q\330\010\024\320\024%\240W\250A\330\010\034\230A\230Z\240{\260!\330\010\017\210q";
static const char __pyx_k_c_atmnet_ptr[] = "c_atmnet_ptr";
static const char __pyx_k_c_vornet_ptr[] = "c_vornet_ptr";
static const char __pyx_k_edge_centers[] = "edge_centers";
static const char __pyx_k_face_centers[] = "face_centers";
static const char __pyx_k_ha_node_size[] = "ha_node_size";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_lookupRadius[] = "lookupRadius";
static const char __pyx_k_node_id_list[] = "node_id_list";
static const char __pyx_k_probe_radius[] = "probe_radius";
static const char __pyx_k_readCssrfile[] = "readCssrfile";
static const char __pyx_k_readRadTable[] = "readRadTable";
static const char __pyx_k_read_from_V1[] = "read_from_V1";
static const char __pyx_k_saveVorCells[] = "saveVorCells";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_surface_area[] = "surface_area";
static const char __pyx_k_writeCiffile[] = "writeCiffile";
static const char __pyx_k_writeNt2file[] = "writeNt2file";
static const char __pyx_k_writeVtkfile[] = "writeVtkfile";
static const char __pyx_k_writeXyzfile[] = "writeXyzfile";
static const char __pyx_k_write_to_CIF[] = "write_to_CIF";
static const char __pyx_k_write_to_VTK[] = "write_to_VTK";
static const char __pyx_k_write_to_XYZ[] = "write_to_XYZ";
static const char __pyx_k_A_Kq_HE_1_T_q[] = "\200A\360\010\000\t\025\220K\230q\330\010\014\210H\220E\230\021\230)\2401\330\010\021\220\034\230T\240\021\330\010\017\210q";
static const char __pyx_k_A_hfAQ_N_AQ_q[] = "\200A\360\022\000\t+\250$\250h\260f\270A\270Q\330\010\024\220N\240!\330\010\021\220\033\230A\230Q\330\010\017\210q";
static const char __pyx_k_centroid_list[] = "centroid_list";
static const char __pyx_k_cutoff_radius[] = "cutoff_radius";
static const char __pyx_k_face_node_ids[] = "face_node_ids";
static const char __pyx_k_find_channels[] = "find_channels";
static const char __pyx_k_get_num_nodes[] = "get_num_nodes";
static const char __pyx_k_high_accuracy[] = "high_accuracy";
static const char __pyx_k_pruned_vornet[] = "pruned_vornet";
static const char __pyx_k_readMassTable[] = "readMassTable";
static const char __pyx_k_read_from_ARC[] = "read_from_ARC";
static const char __pyx_k_read_from_CIF[] = "read_from_CIF";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_returnbvcells[] = "returnbvcells";
static const char __pyx_k_writeCssrfile[] = "writeCssrfile";
static const char __pyx_k_write_to_CSSR[] = "write_to_CSSR";
static const char __pyx_k_A_Qj_4_1L_Ja_1[] = "\200A\360\016\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\340\010 \240\001\330\010\013\2104\210|\2301\230L\250\004\250J\260a\330\r\023\2201";
static const char __pyx_k_VoronoiNetwork[] = "VoronoiNetwork";
static const char __pyx_k_c_atmnetcp_ptr[] = "c_atmnetcp_ptr";
static const char __pyx_k_c_ha_atmnetptr[] = "c_ha_atmnetptr";
static const char __pyx_k_channel_radius[] = "channel_radius";
static const char __pyx_k_get_node_coord[] = "get_node_coord";
static const char __pyx_k_low_dist_range[] = "low_dist_range";
static const char __pyx_k_mc_sampling_no[] = "mc_sampling_no";
static const char __pyx_k_py_access_info[] = "py_access_info";
static const char __pyx_k_read_from_CSSR[] = "read_from_CSSR";
static const char __pyx_k_substituteSeed[] = "substituteSeed";
static const char __pyx_k_substitutionNo[] = "substitutionNo";
static const char __pyx_k_supercell_flag[] = "supercell_flag";
static const char __pyx_k_writeMopacfile[] = "writeMopacfile";
static const char __pyx_k_write_to_MOPAC[] = "write_to_MOPAC";
static const char __pyx_k_z_A_IYgQa_A_AQ[] = "\200\001\360\010\000\005\010\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\024\220A\220Q";
static const char __pyx_k_z_A_IYgQa_A_Qa[] = "\200\001\360\010\000\005\010\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\025\220Q\220a";
static const char __pyx_k_DijkstraNetwork[] = "DijkstraNetwork";
static const char __pyx_k_c_ha_vornet_ptr[] = "c_ha_vornet_ptr";
static const char __pyx_k_exclude_pockets[] = "exclude_pockets";
static const char __pyx_k_extended_output[] = "extended_output";
static const char __pyx_k_high_dist_range[] = "high_dist_range";
static const char __pyx_k_lookupCovRadius[] = "lookupCovRadius";
static const char __pyx_k_node_radii_file[] = "node_radii_file";
static const char __pyx_k_pyzeo_extension[] = "pyzeo.extension";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AtomNetwork_copy[] = "AtomNetwork.copy";
static const char __pyx_k_No_high_accuracy[] = "No high accuracy";
static const char __pyx_k_accuracy_setting[] = "accuracy_setting";
static const char __pyx_k_c_org_atmnet_ptr[] = "c_org_atmnet_ptr";
static const char __pyx_k_sphere_dist_file[] = "sphere_dist_file";
static const char __pyx_k_substitute_atoms[] = "substitute_atoms";
static const char __pyx_k_Q_N_t_A_j_A_a_N_1[] = "\200\001\360,\000\005\023\220+\230Q\330\004\024\220N\240'\250\021\330\004\007\200t\320\013\034\230A\230^\250;\260j\300\001\330\014\034\230A\330\010\016\210a\330\004\014\210N\230!\2301\330\004\013\210=\230\001";
static const char __pyx_k_z_A_IYgQa_A_t9A_a[] = "\200\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004#\240>\260\027\270\001\330\004\007\200t\2109\220A\220\\\240\021\330\010\016\210a";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_initializeRadTable[] = "initializeRadTable";
static const char __pyx_k_lookupAtomicNumber[] = "lookupAtomicNumber";
static const char __pyx_k_overlap_check_flag[] = "overlap_check_flag";
static const char __pyx_k_z_A_IYgQa_A_t_Ql_a[] = "\200\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004#\240>\260\027\270\001\330\004\007\200t\210:\220Q\220l\240!\330\010\016\210a";
static const char __pyx_k_VoronoiNetwork_size[] = "VoronoiNetwork.size";
static const char __pyx_k_Xyz___reduce_cython[] = "Xyz.__reduce_cython__";
static const char __pyx_k_analyze_writeto_XYZ[] = "analyze_writeto_XYZ";
static const char __pyx_k_find_bounding_atoms[] = "find_bounding_atoms";
static const char __pyx_k_from_VoronoiNetwork[] = "from_VoronoiNetwork";
static const char __pyx_k_initializeMassTable[] = "initializeMassTable";
static const char __pyx_k_ret_high_acc_atmnet[] = "ret_high_acc_atmnet";
static const char __pyx_k_z_A_IYgQa_A_t_a_1_a[] = "\200\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004#\240>\260\027\270\001\330\004\007\200t\210;\220a\220|\2401\330\010\016\210a";
static const char __pyx_k_A_A_q_q_4_1F_Q_j_q_q[] = "\200A\330@A\360\030\000\t\022\220\036\230q\330\010*\250.\270\007\270q\360\010\000\t\014\2104\320\017#\2401\240F\250+\260Q\330\020\026\220j\240\001\240\030\250\036\260q\270\001\330\014\022\220!\360\036\000\t\020\210q";
static const char __pyx_k_A_Qj_oT1Oq_Q_wa_Ql_1[] = "\200A\360\020\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\340\010\020\220\016\230o\250T\3201O\310q\330\010\035\230Q\330\010\026\320\026'\240w\250a\330\010%\240Q\240l\260)\2701";
static const char __pyx_k_AtomNetwork_loadMass[] = "AtomNetwork.loadMass";
static const char __pyx_k_Atom___reduce_cython[] = "Atom.__reduce_cython__";
static const char __pyx_k_VoronoiNetwork_prune[] = "VoronoiNetwork.prune";
static const char __pyx_k_compute_face_centers[] = "compute_face_centers";
static const char __pyx_k_high_accuracy_atmnet[] = "high_accuracy_atmnet";
static const char __pyx_k_z_A_IYgQa_A_t_Ql_A_a[] = "\200\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004#\240>\260\027\270\001\330\004\007\200t\210:\220Q\220l\240*\250A\330\014\r\330\010\016\210a";
static const char __pyx_k_z_A_IYgQa_A_t_Ql_a_1[] = "\200\001\330\004\r\210[\230\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\007\200t\210:\220Q\220l\240&\250\n\260!\330\010\016\210a\330\004\013\2101";
static const char __pyx_k_z_A_IYgQa_A_t_q_Ja_a[] = "\200\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004#\240>\260\027\270\001\330\004\007\200t\210<\220q\230\014\240J\250a\330\010\016\210a";
static const char __pyx_k_A_D_Qa_uAU_q_E_at5_Qa[] = "\200A\340\010\034\230D\240\010\250\r\260Q\260a\330\010\017\210u\220A\220U\230%\230q\240\004\240E\250\025\250a\250t\2605\270\005\270Q\270a";
static const char __pyx_k_A_a_QfA_IU_q_1_q_j_4q[] = "\200A\330\030'\240\177\260a\360&\000\t\014\210:\220Q\220f\230A\330\014\024\220I\230U\240'\250\021\250!\340\010*\250.\270\007\270q\330\010\033\2301\330\010\017\210q\220\006\220j\240\t\250\031\260)\2704\270q\330\020\021";
static const char __pyx_k_Cq_j_nG1_z_A_I_6gQa_a[] = "\320\000\"\240!\360 \000\005\014\320\013\034\230C\230q\330\010\016\210j\230\001\230\021\330\004&\240n\260G\2701\330\004\007\200z\220\021\320\022$\240A\330\010\034\230I\320%6\260g\270Q\270a\330\004\032\230!\330\004 \240\001\240\035\250a";
static const char __pyx_k_Point___reduce_cython[] = "Point.__reduce_cython__";
static const char __pyx_k_Xyz___setstate_cython[] = "Xyz.__setstate_cython__";
static const char __pyx_k_high_accuracy_atomnet[] = "high_accuracy_atomnet";
static const char __pyx_k_initializeCovRadTable[] = "initializeCovRadTable";
static const char __pyx_k_Atom___setstate_cython[] = "Atom.__setstate_cython__";
static const char __pyx_k_BasicVCell_get_node_id[] = "BasicVCell.get_node_id";
static const char __pyx_k_AtomNetwork_write_to_V1[] = "AtomNetwork.write_to_V1";
static const char __pyx_k_Channel___reduce_cython[] = "Channel.__reduce_cython__";
static const char __pyx_k_Point___setstate_cython[] = "Point.__setstate_cython__";
static const char __pyx_k_VorCell___reduce_cython[] = "VorCell.__reduce_cython__";
static const char __pyx_k_src_pyzeo_extension_pyx[] = "src/pyzeo/extension.pyx";
static const char __pyx_k_z_A_IYgQa_A_t_a_6_1_a_1[] = "\200\001\330\004\r\210[\230\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\007\200t\210;\220a\220|\2406\250\032\2601\330\010\016\210a\330\004\013\2101";
static const char __pyx_k_z_A_IYgQa_A_t_q_F_A_a_1[] = "\200\001\330\004\r\210[\230\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\007\200t\210<\220q\230\014\240F\250*\260A\330\010\016\210a\330\004\013\2101";
static const char __pyx_k_z_A_IYgQa_A_uKq_F_A_a_1[] = "\200\001\330\004\r\210[\230\001\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004\007\200u\210K\220q\230\014\240F\250*\260A\330\010\016\210a\330\004\013\2101";
static const char __pyx_k_8_A_Q_N_nL_Q_A_1_A_q_Q_Z[] = "\200\001\330#8\270\001\330\010\030\320\030,\250A\330\010\030\230\001\360:\000\005\024\220>\240\027\250\005\250Q\330\004\024\220N\240'\250\021\330\004\026\220n\240L\260\001\330\004\035\230Q\330\004\034\230A\330\004\033\2301\330\004\034\230A\330\004\030\230\001\320\031)\250\036\260q\330\016\037\230~\320-=\270Q\330\016\032\230+\240Z\250{\270!\330\016\017";
static const char __pyx_k_AtomNetwork_read_from_V1[] = "AtomNetwork.read_from_V1";
static const char __pyx_k_AtomNetwork_write_to_CIF[] = "AtomNetwork.write_to_CIF";
static const char __pyx_k_AtomNetwork_write_to_VTK[] = "AtomNetwork.write_to_VTK";
static const char __pyx_k_AtomNetwork_write_to_XYZ[] = "AtomNetwork.write_to_XYZ";
static const char __pyx_k_BasicVCell_get_num_nodes[] = "BasicVCell.get_num_nodes";
static const char __pyx_k_compute_centroid_4cycles[] = "compute_centroid_4cycles";
static const char __pyx_k_AtomNetwork_read_from_ARC[] = "AtomNetwork.read_from_ARC";
static const char __pyx_k_AtomNetwork_read_from_CIF[] = "AtomNetwork.read_from_CIF";
static const char __pyx_k_AtomNetwork_write_to_CSSR[] = "AtomNetwork.write_to_CSSR";
static const char __pyx_k_BasicVCell_get_node_coord[] = "BasicVCell.get_node_coord";
static const char __pyx_k_Channel___setstate_cython[] = "Channel.__setstate_cython__";
static const char __pyx_k_VorCell___setstate_cython[] = "VorCell.__setstate_cython__";
static const char __pyx_k_0_e1_Q_4vY_A_nG1_z_q_Q_A_1[] = "\320\0000\260\001\360\n\000\005\021\220\006\220e\2301\330\004\031\230\021\230+\240Q\330\004\013\2104\210v\220Y\320\036<\270A\330\004&\240n\260G\2701\330\004)\250\036\260z\300\021\330\004)\320):\270'\300\021\330\004'\240q\250\r\260Q\330\014\034\230A\330\004\013\2101";
static const char __pyx_k_A_Ja_Zq_haq_H_avZ_q_D_U_85[] = "\200A\360&\000\t\r\210J\220a\330\014\025\220Z\230q\240\006\240h\250a\250q\360\014\000\t\r\210H\320\024&\240a\240v\250Z\260{\300!\360\006\000\t\020\210q\220\010\230\001\230\023\230D\240\005\240U\250!\2508\2605\270\001";
static const char __pyx_k_AtomNetwork_read_from_CSSR[] = "AtomNetwork.read_from_CSSR";
static const char __pyx_k_AtomNetwork_write_to_MOPAC[] = "AtomNetwork.write_to_MOPAC";
static const char __pyx_k_BasicVCell___reduce_cython[] = "BasicVCell.__reduce_cython__";
static const char __pyx_k_AtomNetwork___reduce_cython[] = "AtomNetwork.__reduce_cython__";
static const char __pyx_k_Channel_find_bounding_atoms[] = "Channel.find_bounding_atoms";
static const char __pyx_k_VoronoiNetwork_write_to_XYZ[] = "VoronoiNetwork.write_to_XYZ";
static const char __pyx_k_VoronoiNode___reduce_cython[] = "VoronoiNode.__reduce_cython__";
static const char __pyx_k_calc_pore_size_distribution[] = "calc_pore_size_distribution";
static const char __pyx_k_initializeAtomicNumberTable[] = "initializeAtomicNumberTable";
static const char __pyx_k_1_z_A_IYgQa_A_7_q_4z_nA_4z_a[] = "\320\000#\2401\330\004\007\200z\220\021\220*\230A\330\010\024\220I\230Y\240g\250Q\250a\330\004\034\230A\330\004*\320*;\2707\300!\330\004\007\200q\330\010\013\2104\210z\230\021\230,\240n\260A\330\014\022\220!\340\010\013\2104\210z\230\021\230,\240a\330\014\022\220!";
static const char __pyx_k_BasicVCell___setstate_cython[] = "BasicVCell.__setstate_cython__";
static const char __pyx_k_initializeAtomCharacterTable[] = "initializeAtomCharacterTable";
static const char __pyx_k_is_duplicate_perimeter_atoms[] = "is_duplicate_perimeter_atoms";
static const char __pyx_k_simplify_highaccuracy_vornet[] = "simplify_highaccuracy_vornet";
static const char __pyx_k_AtomNetwork___setstate_cython[] = "AtomNetwork.__setstate_cython__";
static const char __pyx_k_VoronoiNode___setstate_cython[] = "VoronoiNode.__setstate_cython__";
static const char __pyx_k_perform_voronoi_decomposition[] = "perform_voronoi_decomposition";
static const char __pyx_k_reduced_highaccuracy_vornodes[] = "reduced_highaccuracy_vornodes";
static const char __pyx_k_9_34_q_4_1D_4q_j_q_q_vXQ_vXQ_E[] = "\320\0049\270\021\33034\360\032\000\t\022\220\036\230q\360\010\000\t\014\2104\320\017#\2401\240D\250\013\2604\260q\330\020\026\220j\240\001\240\030\250\036\260q\270\001\330\014\022\220!\360\010\000\t\030\220q\330\010'\240v\250X\260Q\330\010'\240v\250X\260Q\330\010\014\210E\220\025\220a\220v\230U\240!\330\014\031\230\026\230q\240\002\240!\330\014\030\230\006\230a\230r\240\021\330\014\026\220f\230A\230Q\330\014\026\220f\230A\230Q\330\014\033\2307\240#\240R\240w\250a\330\033\"\240#\240R\240w\250a\330\033\"\240#\240R\240w\250a\330\014\032\230%\230r\240\021\330\014\017\210|\2307\240!\330\020\034\230G\2401\240A\360\n\000\t\030\220q\360\014\000\t\034\2301\330\010\014\210E\220\025\220a\220v\230U\240!\330\014\025\220V\2301\230B\230a\330\014\020\220\005\220U\230!\2306\240\025\240a\330\020\033\2306\240\021\240\"\240A\330\020\037\230q\330\020\024\220E\230\025\230a\230x\240u\250A\330\024 \240\007\240q\250\010\260\001\260\021\330\020\036\230i\240q\250\001\330\020\027\220|\2403\240a\330\024!\240\024\240Q\240a\330\024\037\230u\240A\330\024\"\240(\250)\2601\330\024\037\230v\240Q\240b\250\001\330\024\030\230\005\230U\240!\2408\2505\260\001\330\030 \240\005\240X\250S\260\002\260(\270!\2702\270U\300!\3001\330\030 \240\005\240X\250S\260\002\260(\270!\2702\270U\300!\3001\330\030 \240\005\240X\250S\260\002\260(\270!\2702\270U\300!\3001\330\024\034\230E\240\030\250\022\2501\250H\260E\270\021\330\024\034\230E\240\030\250\022\2501\250H\260E\270\021\330\024\034\230E\240\030\250\022\2501\250H\260E\270\021\330\024 \240\007\240q\250\001\360\006\000\t\017\210a\330\010\014\210J\220a\330\014\024\220F\230#\230V\2403\240f\250A\330\014\017\210w\220a\220q\360\036\000\t\014\2101\360\006\000\r\032\230\021\330\014\020\220\005\220U\230!\2307\240%\240q\330\020\035\230Z\240q\340\020\032\230(\240!\2405\250\007\250q\260\001\330\020\032\230'\240\021\240!\340\014\023\2208\230>\250\025\250a\360\010\000\r\024\2208\230>\250\021";
static const char __pyx_k_A_e1_Q_4vV_9_d_q_e1_9E_a_z_A_q[] = "\320\000,\250A\360\024\000\005\021\220\006\220e\2301\330\004\031\230\021\230+\240Q\330\004\013\2104\210v\220V\320\0339\270\021\330\004\016\210d\220&\230\t\320!?\270q\340\004\020\220\006\220e\2301\330\004\023\2209\230E\240\021\330\004\n\210!\210;\220a\330\004\007\200z\220\023\220A\330\010\017\210q\220\001\360\006\000\005(\240~\260W\270A\330\004-\320->\270j\310\001\330\004\021\220\036\230q\360\010\000\005\025\220A\320\025&\240n\260A\330\014\026\220a\330\004\n\210!\210:\220U\230!\330\004\024\220N\240!\330\004\030\230\001\230\032\240:\250Q\330\014\023\220=\240\001\330\004\n\210!\210=\230\005\230Q\330\004\013\2101";
static const char __pyx_k_A_e1_Q_4vV_9_d_q_e1_9E_z_A_q_1[] = "\320\000<\270A\360\030\000\005\021\220\006\220e\2301\330\004\031\230\021\230+\240Q\330\004\013\2104\210v\220V\320\0339\270\021\330\004\016\210d\220&\230\t\320!?\270q\330\004\020\220\006\220e\2301\330\004\023\2209\230E\240\021\330\004\007\200z\220\023\220A\330\010\017\210q\220\001\330\004\013\2101";
static const char __pyx_k_Q_1_T_Q_vU_Qa_a_a_D_A_q_1_V5_k[] = "\200\001\330\030-\250Q\330\010\036\320\0361\260\021\360:\000\005\010\200~\220T\230\024\230Q\330\010\037\230v\240U\250!\330\010\035\230Q\230a\330\010\036\230a\340\010\036\230a\340\004\007\320\007\034\230D\240\004\240A\330\010\030\230\001\340\004+\250>\270\027\300\001\340\004\007\200q\330\010\030\230\016\320&;\2701\340\010\025\220V\2305\240\001\330\010\030\230\016\240k\260\021\340\004\016\210f\220A\220^\320#5\260Q\330\014\034\230N\320*:\270!\330\014\034\230A\340\004\007\200q\330\010\017\210y\230\001\340\010\017\210q";
static const char __pyx_k_Q_a_T_Q_vU_Qa_a_a_D_A_q_1_V5_k[] = "\200\001\330\030-\250Q\330\010\036\230a\360<\000\005\010\200~\220T\230\024\230Q\330\010\037\230v\240U\250!\330\010\035\230Q\230a\330\010\036\230a\340\010\036\230a\340\004\007\320\007\034\230D\240\004\240A\330\010\030\230\001\340\004+\250>\270\027\300\001\340\004\007\200q\330\010\030\230\016\320&;\2701\340\010\025\220V\2305\240\001\330\010\030\230\016\240k\260\021\340\004\r\210W\220A\220^\320#5\260Q\330\014\034\230N\320*:\270!\330\014\r\330\004\007\200q\330\010\017\210x\220q\340\010\017\210q";
static const char __pyx_k_VoronoiNetwork___reduce_cython[] = "VoronoiNetwork.__reduce_cython__";
static const char __pyx_k_q_31HF_4vV_9_WA_7_j_q_a_8_Ja_1[] = "\320\000?\270q\360\034\000\005\021\320\0203\2601\260H\270F\300!\360\010\000\005\014\2104\210v\220V\320\0339\270\021\330\004'\240~\260W\270A\330\004*\320*;\2707\300!\330\004-\320->\270j\310\001\330\004\021\220\036\230q\360\010\000\005'\240a\320'8\270\001\330\014\032\230*\240J\250a\330\004\013\2101";
static const char __pyx_k_2_6_1M_Qk_T_e1KuA_U_U_xq_Zq_7_1[] = "\200\001\3602\000\005\033\230!\2306\240\032\320+;\2701\270M\310\021\310!\360\006\000\005\026\220Q\220k\240\021\240#\240T\250\025\250e\2601\260K\270u\300A\360\006\000\005\023\220!\330\004\010\210\005\210U\220!\220:\230U\240!\330\010\022\220'\230\021\340\010\017\210x\220q\230\005\230Z\240q\250\001\330\010\023\2207\230!\2301\340\004\013\210=\230\001";
static const char __pyx_k_7_t_a_A_V6_S_d_Q_6_wj_c_q_A_d_S[] = "\200\001\360\024\000\005+\320*;\2707\300!\360\010\000\005\010\200t\210>\230\021\230.\250\001\250\030\260\027\270\001\330\010\016\210a\340\004\024\220A\330\004%\240V\2506\260\021\340\004\n\210#\210S\220\006\220d\230!\330\010\022\220#\220Q\330\010\020\220\001\220\022\2206\230\026\230w\240j\260\001\260\021\330\010\016\210c\220\026\220q\340\010\024\220A\330\010\016\210d\220#\220S\230\004\230A\330\014\022\220$\220a\220v\230Q\330\014\017\210q\220\001\340\010\025\220W\230B\230f\240H\250I\260Q\330\010\013\2101\210A\340\004\013\2101";
static const char __pyx_k_A_Q_Qj_Qj_1_t1_6a_Q_0_A_4_vZq_l[] = "\200A\330.=\270Q\360$\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\330\010\013\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\340\010 \240\001\330\010\013\2101\330\014\017\210t\2201\330\0376\260a\340\020\035\230Q\330\0370\260\001\260\021\340\010\021\220\033\230A\330\010 \240\001\330\010\013\2104\210{\230!\230<\240v\250Z\260q\330\014\022\220!\330\010\016\210l\230!\330\010\017\210q";
static const char __pyx_k_A_a_Qj_Qj_Qj_1_2_q_Q_0_A_4_1L_j[] = "\200A\330/>\270a\360\"\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\330\010\013\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\010\000\t\016\210Q\210j\230\001\330\010\013\2101\340\0332\260!\330\014\017\210q\330\020\035\230Q\330\0370\260\001\260\021\340\010\021\220\033\230A\330\010 \240\001\330\010\013\2104\210|\2301\230L\250\006\250j\270\001\330\014\022\220!\330\010\016\210l\230!\330\010\017\210q";
static const char __pyx_k_Accuracy_setting_not_understood[] = "Accuracy setting not understood";
static const char __pyx_k_DijkstraNetwork___reduce_cython[] = "DijkstraNetwork.__reduce_cython__";
static const char __pyx_k_nG1_A_1_q_86_S_A_RvT_fD_V4q_q_1[] = "\200\001\360\010\000\005'\240n\260G\2701\340\004$\240A\240]\260!\2601\340\004\017\210q\340\004#\2408\2506\260\021\330\004\n\210#\210S\220\010\230\004\230A\330\010\022\220#\220R\220v\230T\240\025\240f\250D\260\005\260V\2704\270q\330\010\020\220\007\220q\230\001\330\010\013\2101\210A\340\004\013\2101";
static const char __pyx_k_A_A_Qj_Qj_1_t1_6a_0_A_4z_fJa_l_q[] = "\200A\330-<\270A\360\"\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\330\010\013\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2101\330\014\017\210t\2201\330\0376\260a\340\0370\260\001\260\021\340\010\021\220\033\230A\330\010 \240\001\330\010\013\2104\210z\230\021\230,\240f\250J\260a\330\014\022\220!\330\010\016\210l\230!\330\010\017\210q";
static const char __pyx_k_AtomNetwork_calculate_free_spher[] = "AtomNetwork.calculate_free_sphere_parameters";
static const char __pyx_k_AtomNetwork_perform_voronoi_deco[] = "AtomNetwork.perform_voronoi_decomposition";
static const char __pyx_k_DijkstraNetwork___setstate_cytho[] = "DijkstraNetwork.__setstate_cython__";
static const char __pyx_k_DijkstraNetwork_from_VoronoiNetw[] = "DijkstraNetwork.from_VoronoiNetwork";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_This_value_is_not_supposed_to_be[] = "This value is not supposed to be modified";
static const char __pyx_k_VoronoiNetwork___setstate_cython[] = "VoronoiNetwork.__setstate_cython__";
static const char __pyx_k_VoronoiNetwork_analyze_writeto_X[] = "VoronoiNetwork.analyze_writeto_XYZ";
static const char __pyx_k_VoronoiNetwork_perform_voronoi_d[] = "VoronoiNetwork.perform_voronoi_decomposition";
static const char __pyx_k_calculate_free_sphere_parameters[] = "calculate_free_sphere_parameters";
static const char __pyx_k_generate_simplified_highaccuracy[] = "generate_simplified_highaccuracy_voronoi_network";
static const char __pyx_k_get_nearest_largest_diameter_hig[] = "get_nearest_largest_diameter_highaccuracy_vornode";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_perform_voronoi_decomposition_lo[] = "perform_voronoi_decomposition.<locals>.genexpr";
static const char __pyx_k_prune_voronoi_network_close_node[] = "prune_voronoi_network_close_node";
static const char __pyx_k_pruned_highaccuracy_voronoi_netw[] = "pruned_highaccuracy_voronoi_network";
static const char __pyx_k_A_Q_Qj_Qj_1_t1_6a_Q_0_A_4_vZq_l_2[] = "\200A\330.=\270Q\360\"\000\t\014\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\330\010\013\210:\220Q\220j\240\001\330\014\030\230\t\240\031\250'\260\021\260!\360\006\000\t!\240\001\330\010\013\2101\330\014\017\210t\2201\330\0376\260a\340\020\035\230Q\330\0370\260\001\260\021\340\010\021\220\033\230A\330\010 \240\001\330\010\013\2104\210{\230!\230<\240v\250Z\260q\330\014\022\220!\330\010\016\210l\230!\330\010\017\210q";
/* #### Code section: decls ### */
static int __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z); /* proto */
static void __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_x_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_y_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_z_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_6scale(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point___cinit__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z); /* proto */
static void __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_6__repr__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1x___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_x_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1y___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_y_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1z___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_z_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_initializeRadTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_2initializeCovRadTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4initializeMassTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10readRadTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_12readMassTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14lookupRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_16lookupCovRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_18lookupMass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_22isMetal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static int __pyx_pf_5pyzeo_9extension_7Channel___cinit__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_4find_bounding_atoms(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet, PyObject *__pyx_v_bvcells); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_24find_channels(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet, double __pyx_v_channel_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_26calc_pore_size_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_hist_file, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_points_file, PyObject *__pyx_v_node_radii_file, PyObject *__pyx_v_sphere_dist_file, PyObject *__pyx_v_vis_flag, PyObject *__pyx_v_overlap_check_flag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_28readCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_30readArcfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_32readCucfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_34readCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_36readV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_38writeCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_40writeCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_42writeV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_44writeNt2file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet, PyObject *__pyx_v_minRad); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_46writeXyzfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_48writeVtkfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_50writeMopacfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom___cinit__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_28loadMass(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells, PyObject *__pyx_v_returnbvcells); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_52substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag); /* proto */
static int __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(PyTypeObject *__pyx_v_vornet); /* proto */
static void __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_6get_num_nodes(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_8get_node_coord(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_10get_node_id(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_9num_nodes___get__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_54compute_centroid_4cycles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vornet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_56compute_face_centers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_58warning(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_objs); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_60simplify_highaccuracy_vornet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_62reduced_highaccuracy_vornodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_64pruned_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_66get_nearest_largest_diameter_highaccuracy_vornode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_68generate_simplified_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, CYTHON_UNUSED PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_70prune_voronoi_network_close_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_72volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_low_dist_range, PyObject *__pyx_v_high_dist_range); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_74surface_area(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_extended_output); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_76high_accuracy_atomnet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_accuracy_setting); /* proto */
static PyObject *__pyx_tp_new_5pyzeo_9extension_Xyz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Point(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Channel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Atom(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_AtomNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_DijkstraNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VorFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VorCell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_BasicVCell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Cycle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyObject *__pyx_type_5pyzeo_9extension_Xyz;
  PyObject *__pyx_type_5pyzeo_9extension_Point;
  PyObject *__pyx_type_5pyzeo_9extension_Channel;
  PyObject *__pyx_type_5pyzeo_9extension_Atom;
  PyObject *__pyx_type_5pyzeo_9extension_AtomNetwork;
  PyObject *__pyx_type_5pyzeo_9extension_VoronoiNode;
  PyObject *__pyx_type_5pyzeo_9extension_VoronoiNetwork;
  PyObject *__pyx_type_5pyzeo_9extension_DijkstraNetwork;
  PyObject *__pyx_type_5pyzeo_9extension_VorFace;
  PyObject *__pyx_type_5pyzeo_9extension_VorCell;
  PyObject *__pyx_type_5pyzeo_9extension_BasicVCell;
  PyObject *__pyx_type_5pyzeo_9extension_Cycle;
  PyObject *__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_Xyz;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_Point;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_Channel;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_Atom;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_AtomNetwork;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_VoronoiNode;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_VoronoiNetwork;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_DijkstraNetwork;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_VorFace;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_VorCell;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_BasicVCell;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension_Cycle;
  PyTypeObject *__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  PyObject *__pyx_tuple[15];
  PyObject *__pyx_codeobj_tab[85];
  PyObject *__pyx_string_tab[329];
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_1;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_0_6;
  PyObject *__pyx_float_0_7;
  PyObject *__pyx_float_0_25;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_neg_1;
/* #### Code section: module_state_contents ### */

#if CYTHON_USE_FREELISTS
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *__pyx_freelist_5pyzeo_9extension___pyx_scope_struct__genexpr[8];
int __pyx_freecount_5pyzeo_9extension___pyx_scope_struct__genexpr;
#endif
/* CommonTypesMetaclass.module_state_decls */
PyTypeObject *__pyx_CommonTypesMetaclassType;

/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* IterNextPlain.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
PyObject *__Pyx_GetBuiltinNext_LimitedAPI_cache;
#endif

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_n_u_ACC __pyx_string_tab[1]
#define __pyx_n_u_AQC __pyx_string_tab[2]
#define __pyx_kp_u_Accuracy_setting_not_understood __pyx_string_tab[3]
#define __pyx_n_u_Atom __pyx_string_tab[4]
#define __pyx_n_u_AtomNetwork __pyx_string_tab[5]
#define __pyx_n_u_AtomNetwork___reduce_cython __pyx_string_tab[6]
#define __pyx_n_u_AtomNetwork___setstate_cython __pyx_string_tab[7]
#define __pyx_n_u_AtomNetwork_calculate_free_spher __pyx_string_tab[8]
#define __pyx_n_u_AtomNetwork_copy __pyx_string_tab[9]
#define __pyx_n_u_AtomNetwork_loadMass __pyx_string_tab[10]
#define __pyx_n_u_AtomNetwork_perform_voronoi_deco __pyx_string_tab[11]
#define __pyx_n_u_AtomNetwork_read_from_ARC __pyx_string_tab[12]
#define __pyx_n_u_AtomNetwork_read_from_CIF __pyx_string_tab[13]
#define __pyx_n_u_AtomNetwork_read_from_CSSR __pyx_string_tab[14]
#define __pyx_n_u_AtomNetwork_read_from_V1 __pyx_string_tab[15]
#define __pyx_n_u_AtomNetwork_write_to_CIF __pyx_string_tab[16]
#define __pyx_n_u_AtomNetwork_write_to_CSSR __pyx_string_tab[17]
#define __pyx_n_u_AtomNetwork_write_to_MOPAC __pyx_string_tab[18]
#define __pyx_n_u_AtomNetwork_write_to_V1 __pyx_string_tab[19]
#define __pyx_n_u_AtomNetwork_write_to_VTK __pyx_string_tab[20]
#define __pyx_n_u_AtomNetwork_write_to_XYZ __pyx_string_tab[21]
#define __pyx_n_u_Atom___reduce_cython __pyx_string_tab[22]
#define __pyx_n_u_Atom___setstate_cython __pyx_string_tab[23]
#define __pyx_n_u_BasicVCell __pyx_string_tab[24]
#define __pyx_n_u_BasicVCell___reduce_cython __pyx_string_tab[25]
#define __pyx_n_u_BasicVCell___setstate_cython __pyx_string_tab[26]
#define __pyx_n_u_BasicVCell_get_node_coord __pyx_string_tab[27]
#define __pyx_n_u_BasicVCell_get_node_id __pyx_string_tab[28]
#define __pyx_n_u_BasicVCell_get_num_nodes __pyx_string_tab[29]
#define __pyx_n_u_Channel __pyx_string_tab[30]
#define __pyx_n_u_Channel___reduce_cython __pyx_string_tab[31]
#define __pyx_n_u_Channel___setstate_cython __pyx_string_tab[32]
#define __pyx_n_u_Channel_find_bounding_atoms __pyx_string_tab[33]
#define __pyx_n_u_Cycle __pyx_string_tab[34]
#define __pyx_n_u_DDH __pyx_string_tab[35]
#define __pyx_n_u_DEF __pyx_string_tab[36]
#define __pyx_n_u_DijkstraNetwork __pyx_string_tab[37]
#define __pyx_n_u_DijkstraNetwork___reduce_cython __pyx_string_tab[38]
#define __pyx_n_u_DijkstraNetwork___setstate_cytho __pyx_string_tab[39]
#define __pyx_n_u_DijkstraNetwork_from_VoronoiNetw __pyx_string_tab[40]
#define __pyx_n_u_FCC __pyx_string_tab[41]
#define __pyx_n_u_HI __pyx_string_tab[42]
#define __pyx_n_u_ICC __pyx_string_tab[43]
#define __pyx_n_u_ICH __pyx_string_tab[44]
#define __pyx_n_u_IOError __pyx_string_tab[45]
#define __pyx_n_u_LOW __pyx_string_tab[46]
#define __pyx_n_u_MED __pyx_string_tab[47]
#define __pyx_n_u_MemoryError __pyx_string_tab[48]
#define __pyx_n_u_N __pyx_string_tab[49]
#define __pyx_kp_u_No_high_accuracy __pyx_string_tab[50]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[51]
#define __pyx_n_u_OCC __pyx_string_tab[52]
#define __pyx_n_u_Point __pyx_string_tab[53]
#define __pyx_n_u_Point___reduce_cython __pyx_string_tab[54]
#define __pyx_n_u_Point___setstate_cython __pyx_string_tab[55]
#define __pyx_n_u_RIH __pyx_string_tab[56]
#define __pyx_n_u_S10 __pyx_string_tab[57]
#define __pyx_n_u_S100 __pyx_string_tab[58]
#define __pyx_n_u_S1000 __pyx_string_tab[59]
#define __pyx_n_u_S10000 __pyx_string_tab[60]
#define __pyx_n_u_S20 __pyx_string_tab[61]
#define __pyx_n_u_S30 __pyx_string_tab[62]
#define __pyx_n_u_S4 __pyx_string_tab[63]
#define __pyx_n_u_S40 __pyx_string_tab[64]
#define __pyx_n_u_S50 __pyx_string_tab[65]
#define __pyx_n_u_S500 __pyx_string_tab[66]
#define __pyx_n_u_TIH __pyx_string_tab[67]
#define __pyx_kp_u_This_value_is_not_supposed_to_be __pyx_string_tab[68]
#define __pyx_n_u_TypeError __pyx_string_tab[69]
#define __pyx_n_u_ValueError __pyx_string_tab[70]
#define __pyx_n_u_VorCell __pyx_string_tab[71]
#define __pyx_n_u_VorCell___reduce_cython __pyx_string_tab[72]
#define __pyx_n_u_VorCell___setstate_cython __pyx_string_tab[73]
#define __pyx_n_u_VorFace __pyx_string_tab[74]
#define __pyx_n_u_VoronoiNetwork __pyx_string_tab[75]
#define __pyx_n_u_VoronoiNetwork___reduce_cython __pyx_string_tab[76]
#define __pyx_n_u_VoronoiNetwork___setstate_cython __pyx_string_tab[77]
#define __pyx_n_u_VoronoiNetwork_analyze_writeto_X __pyx_string_tab[78]
#define __pyx_n_u_VoronoiNetwork_perform_voronoi_d __pyx_string_tab[79]
#define __pyx_n_u_VoronoiNetwork_prune __pyx_string_tab[80]
#define __pyx_n_u_VoronoiNetwork_size __pyx_string_tab[81]
#define __pyx_n_u_VoronoiNetwork_write_to_XYZ __pyx_string_tab[82]
#define __pyx_n_u_VoronoiNode __pyx_string_tab[83]
#define __pyx_n_u_VoronoiNode___reduce_cython __pyx_string_tab[84]
#define __pyx_n_u_VoronoiNode___setstate_cython __pyx_string_tab[85]
#define __pyx_n_u_WARNING __pyx_string_tab[86]
#define __pyx_n_u_Xyz __pyx_string_tab[87]
#define __pyx_n_u_Xyz___reduce_cython __pyx_string_tab[88]
#define __pyx_n_u_Xyz___setstate_cython __pyx_string_tab[89]
#define __pyx_n_u_Xyz_scale __pyx_string_tab[90]
#define __pyx_kp_u__2 __pyx_string_tab[91]
#define __pyx_kp_u__3 __pyx_string_tab[92]
#define __pyx_kp_u__4 __pyx_string_tab[93]
#define __pyx_kp_u__5 __pyx_string_tab[94]
#define __pyx_n_u_acc_set __pyx_string_tab[95]
#define __pyx_n_u_access_info __pyx_string_tab[96]
#define __pyx_n_u_accuracy_kw __pyx_string_tab[97]
#define __pyx_n_u_accuracy_setting __pyx_string_tab[98]
#define __pyx_kp_u_add_note __pyx_string_tab[99]
#define __pyx_n_u_analyze_writeto_XYZ __pyx_string_tab[100]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[101]
#define __pyx_n_u_atmnet __pyx_string_tab[102]
#define __pyx_n_u_atmnet_copy __pyx_string_tab[103]
#define __pyx_n_u_atom_ids __pyx_string_tab[104]
#define __pyx_n_u_basicvcell __pyx_string_tab[105]
#define __pyx_n_u_bvcell __pyx_string_tab[106]
#define __pyx_n_u_bvcelllist __pyx_string_tab[107]
#define __pyx_n_u_bvcells __pyx_string_tab[108]
#define __pyx_n_u_c_atmnet __pyx_string_tab[109]
#define __pyx_n_u_c_atmnet_ptr __pyx_string_tab[110]
#define __pyx_n_u_c_atmnetcp_ptr __pyx_string_tab[111]
#define __pyx_n_u_c_atmnetptr __pyx_string_tab[112]
#define __pyx_n_u_c_bvcells __pyx_string_tab[113]
#define __pyx_n_u_c_channels __pyx_string_tab[114]
#define __pyx_n_u_c_filename __pyx_string_tab[115]
#define __pyx_n_u_c_fname __pyx_string_tab[116]
#define __pyx_n_u_c_ha_atmnetptr __pyx_string_tab[117]
#define __pyx_n_u_c_ha_vornet_ptr __pyx_string_tab[118]
#define __pyx_n_u_c_org_atmnet_ptr __pyx_string_tab[119]
#define __pyx_n_u_c_rad_file __pyx_string_tab[120]
#define __pyx_n_u_c_vornet __pyx_string_tab[121]
#define __pyx_n_u_c_vornet_ptr __pyx_string_tab[122]
#define __pyx_n_u_c_vornetptr __pyx_string_tab[123]
#define __pyx_n_u_calc_pore_size_distribution __pyx_string_tab[124]
#define __pyx_n_u_calculate_free_sphere_parameters __pyx_string_tab[125]
#define __pyx_n_u_center __pyx_string_tab[126]
#define __pyx_n_u_centroid __pyx_string_tab[127]
#define __pyx_n_u_centroid_list __pyx_string_tab[128]
#define __pyx_n_u_channel __pyx_string_tab[129]
#define __pyx_n_u_channel_radius __pyx_string_tab[130]
#define __pyx_n_u_chist_file __pyx_string_tab[131]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[132]
#define __pyx_n_u_close __pyx_string_tab[133]
#define __pyx_n_u_cls __pyx_string_tab[134]
#define __pyx_n_u_cname __pyx_string_tab[135]
#define __pyx_n_u_cnd_file __pyx_string_tab[136]
#define __pyx_n_u_cntr __pyx_string_tab[137]
#define __pyx_n_u_compute_centroid_4cycles __pyx_string_tab[138]
#define __pyx_n_u_compute_face_centers __pyx_string_tab[139]
#define __pyx_n_u_coord __pyx_string_tab[140]
#define __pyx_n_u_coords __pyx_string_tab[141]
#define __pyx_n_u_copy __pyx_string_tab[142]
#define __pyx_n_u_cpnt_file __pyx_string_tab[143]
#define __pyx_n_u_cpoint_ptr __pyx_string_tab[144]
#define __pyx_n_u_csph_file __pyx_string_tab[145]
#define __pyx_n_u_cutoff_radius __pyx_string_tab[146]
#define __pyx_n_u_cycles __pyx_string_tab[147]
#define __pyx_n_u_delta __pyx_string_tab[148]
#define __pyx_n_u_dict __pyx_string_tab[149]
#define __pyx_n_u_dijkstranet __pyx_string_tab[150]
#define __pyx_kp_u_disable __pyx_string_tab[151]
#define __pyx_n_u_e_vnode __pyx_string_tab[152]
#define __pyx_n_u_ecs __pyx_string_tab[153]
#define __pyx_n_u_edge_center __pyx_string_tab[154]
#define __pyx_n_u_edge_centers __pyx_string_tab[155]
#define __pyx_n_u_edge_end __pyx_string_tab[156]
#define __pyx_n_u_edge_orig __pyx_string_tab[157]
#define __pyx_n_u_element __pyx_string_tab[158]
#define __pyx_kp_u_enable __pyx_string_tab[159]
#define __pyx_n_u_exclude_pockets __pyx_string_tab[160]
#define __pyx_n_u_extended_output __pyx_string_tab[161]
#define __pyx_n_u_face_centers __pyx_string_tab[162]
#define __pyx_n_u_face_node_ids __pyx_string_tab[163]
#define __pyx_n_u_factor __pyx_string_tab[164]
#define __pyx_n_u_fcs __pyx_string_tab[165]
#define __pyx_n_u_filename __pyx_string_tab[166]
#define __pyx_n_u_find_bounding_atoms __pyx_string_tab[167]
#define __pyx_n_u_find_channels __pyx_string_tab[168]
#define __pyx_n_u_from_VoronoiNetwork __pyx_string_tab[169]
#define __pyx_n_u_func __pyx_string_tab[170]
#define __pyx_kp_u_gc __pyx_string_tab[171]
#define __pyx_n_u_generate_simplified_highaccuracy __pyx_string_tab[172]
#define __pyx_n_u_genexpr __pyx_string_tab[173]
#define __pyx_n_u_get_nearest_largest_diameter_hig __pyx_string_tab[174]
#define __pyx_n_u_get_node_coord __pyx_string_tab[175]
#define __pyx_n_u_get_node_id __pyx_string_tab[176]
#define __pyx_n_u_get_num_nodes __pyx_string_tab[177]
#define __pyx_n_u_getstate __pyx_string_tab[178]
#define __pyx_n_u_ha_atmnet __pyx_string_tab[179]
#define __pyx_n_u_ha_node_size __pyx_string_tab[180]
#define __pyx_n_u_ha_vornet __pyx_string_tab[181]
#define __pyx_n_u_high_accuracy __pyx_string_tab[182]
#define __pyx_n_u_high_accuracy_atmnet __pyx_string_tab[183]
#define __pyx_n_u_high_accuracy_atomnet __pyx_string_tab[184]
#define __pyx_n_u_high_dist_range __pyx_string_tab[185]
#define __pyx_n_u_hist_file __pyx_string_tab[186]
#define __pyx_n_u_i __pyx_string_tab[187]
#define __pyx_n_u_id_set __pyx_string_tab[188]
#define __pyx_n_u_ids __pyx_string_tab[189]
#define __pyx_n_u_iit __pyx_string_tab[190]
#define __pyx_n_u_index __pyx_string_tab[191]
#define __pyx_n_u_initializeAtomCharacterTable __pyx_string_tab[192]
#define __pyx_n_u_initializeAtomicNumberTable __pyx_string_tab[193]
#define __pyx_n_u_initializeCovRadTable __pyx_string_tab[194]
#define __pyx_n_u_initializeMassTable __pyx_string_tab[195]
#define __pyx_n_u_initializeRadTable __pyx_string_tab[196]
#define __pyx_n_u_initializing __pyx_string_tab[197]
#define __pyx_n_u_isMetal __pyx_string_tab[198]
#define __pyx_n_u_is_coroutine __pyx_string_tab[199]
#define __pyx_n_u_is_duplicate_perimeter_atoms __pyx_string_tab[200]
#define __pyx_kp_u_isenabled __pyx_string_tab[201]
#define __pyx_n_u_it __pyx_string_tab[202]
#define __pyx_n_u_j __pyx_string_tab[203]
#define __pyx_n_u_k __pyx_string_tab[204]
#define __pyx_n_u_loadMass __pyx_string_tab[205]
#define __pyx_n_u_lookupAtomicNumber __pyx_string_tab[206]
#define __pyx_n_u_lookupCovRadius __pyx_string_tab[207]
#define __pyx_n_u_lookupMass __pyx_string_tab[208]
#define __pyx_n_u_lookupRadius __pyx_string_tab[209]
#define __pyx_n_u_low_dist_range __pyx_string_tab[210]
#define __pyx_n_u_main __pyx_string_tab[211]
#define __pyx_n_u_mc_sampling_no __pyx_string_tab[212]
#define __pyx_n_u_minRad __pyx_string_tab[213]
#define __pyx_n_u_module __pyx_string_tab[214]
#define __pyx_n_u_name __pyx_string_tab[215]
#define __pyx_n_u_name_2 __pyx_string_tab[216]
#define __pyx_n_u_new_xyz __pyx_string_tab[217]
#define __pyx_n_u_newatmnet __pyx_string_tab[218]
#define __pyx_n_u_newcvornet __pyx_string_tab[219]
#define __pyx_n_u_newvornet __pyx_string_tab[220]
#define __pyx_n_u_next __pyx_string_tab[221]
#define __pyx_kp_u_no_default___reduce___due_to_non __pyx_string_tab[222]
#define __pyx_n_u_node_id_list __pyx_string_tab[223]
#define __pyx_n_u_node_id_set __pyx_string_tab[224]
#define __pyx_n_u_node_ids __pyx_string_tab[225]
#define __pyx_n_u_node_radii_file __pyx_string_tab[226]
#define __pyx_n_u_node_size __pyx_string_tab[227]
#define __pyx_n_u_o_vnode __pyx_string_tab[228]
#define __pyx_n_u_objs __pyx_string_tab[229]
#define __pyx_n_u_overlap_check_flag __pyx_string_tab[230]
#define __pyx_n_u_perform_voronoi_decomposition __pyx_string_tab[231]
#define __pyx_n_u_perform_voronoi_decomposition_lo __pyx_string_tab[232]
#define __pyx_n_u_points __pyx_string_tab[233]
#define __pyx_n_u_points_file __pyx_string_tab[234]
#define __pyx_n_u_pop __pyx_string_tab[235]
#define __pyx_n_u_print __pyx_string_tab[236]
#define __pyx_n_u_probeRad __pyx_string_tab[237]
#define __pyx_n_u_probe_radius __pyx_string_tab[238]
#define __pyx_n_u_prune __pyx_string_tab[239]
#define __pyx_n_u_prune_voronoi_network_close_node __pyx_string_tab[240]
#define __pyx_n_u_pruned_highaccuracy_voronoi_netw __pyx_string_tab[241]
#define __pyx_n_u_pruned_vornet __pyx_string_tab[242]
#define __pyx_n_u_py_access_info __pyx_string_tab[243]
#define __pyx_n_u_py_channels __pyx_string_tab[244]
#define __pyx_n_u_pyx_state __pyx_string_tab[245]
#define __pyx_n_u_pyzeo_extension __pyx_string_tab[246]
#define __pyx_n_u_qualname __pyx_string_tab[247]
#define __pyx_n_u_rad_file __pyx_string_tab[248]
#define __pyx_n_u_rad_flag __pyx_string_tab[249]
#define __pyx_n_u_radialFlag __pyx_string_tab[250]
#define __pyx_n_u_radialflag __pyx_string_tab[251]
#define __pyx_n_u_radius __pyx_string_tab[252]
#define __pyx_n_u_range __pyx_string_tab[253]
#define __pyx_n_u_readArcfile __pyx_string_tab[254]
#define __pyx_n_u_readCiffile __pyx_string_tab[255]
#define __pyx_n_u_readCssrfile __pyx_string_tab[256]
#define __pyx_n_u_readCucfile __pyx_string_tab[257]
#define __pyx_n_u_readMassTable __pyx_string_tab[258]
#define __pyx_n_u_readRadTable __pyx_string_tab[259]
#define __pyx_n_u_readV1file __pyx_string_tab[260]
#define __pyx_n_u_read_from_ARC __pyx_string_tab[261]
#define __pyx_n_u_read_from_CIF __pyx_string_tab[262]
#define __pyx_n_u_read_from_CSSR __pyx_string_tab[263]
#define __pyx_n_u_read_from_V1 __pyx_string_tab[264]
#define __pyx_n_u_red_vornet __pyx_string_tab[265]
#define __pyx_n_u_reduce __pyx_string_tab[266]
#define __pyx_n_u_reduce_cython __pyx_string_tab[267]
#define __pyx_n_u_reduce_ex __pyx_string_tab[268]
#define __pyx_n_u_reduced_highaccuracy_vornodes __pyx_string_tab[269]
#define __pyx_n_u_ret_high_acc_atmnet __pyx_string_tab[270]
#define __pyx_n_u_returnbvcells __pyx_string_tab[271]
#define __pyx_n_u_sa_str __pyx_string_tab[272]
#define __pyx_n_u_saveVorCells __pyx_string_tab[273]
#define __pyx_n_u_scale __pyx_string_tab[274]
#define __pyx_n_u_self __pyx_string_tab[275]
#define __pyx_n_u_send __pyx_string_tab[276]
#define __pyx_n_u_set_name __pyx_string_tab[277]
#define __pyx_n_u_setstate __pyx_string_tab[278]
#define __pyx_n_u_setstate_cython __pyx_string_tab[279]
#define __pyx_n_u_shift_x __pyx_string_tab[280]
#define __pyx_n_u_shift_y __pyx_string_tab[281]
#define __pyx_n_u_shift_z __pyx_string_tab[282]
#define __pyx_n_u_simplify_highaccuracy_vornet __pyx_string_tab[283]
#define __pyx_n_u_size __pyx_string_tab[284]
#define __pyx_n_u_spec __pyx_string_tab[285]
#define __pyx_n_u_sphere_dist_file __pyx_string_tab[286]
#define __pyx_kp_u_src_pyzeo_extension_pyx __pyx_string_tab[287]
#define __pyx_kp_u_stringsource __pyx_string_tab[288]
#define __pyx_n_u_subNo __pyx_string_tab[289]
#define __pyx_n_u_substituteSeed __pyx_string_tab[290]
#define __pyx_n_u_substitute_atoms __pyx_string_tab[291]
#define __pyx_n_u_substitutionNo __pyx_string_tab[292]
#define __pyx_n_u_supercell_flag __pyx_string_tab[293]
#define __pyx_n_u_surface_area __pyx_string_tab[294]
#define __pyx_n_u_sys __pyx_string_tab[295]
#define __pyx_n_u_test __pyx_string_tab[296]
#define __pyx_n_u_throw __pyx_string_tab[297]
#define __pyx_n_u_tmp_atmnet __pyx_string_tab[298]
#define __pyx_n_u_value __pyx_string_tab[299]
#define __pyx_n_u_vcells __pyx_string_tab[300]
#define __pyx_n_u_vedges __pyx_string_tab[301]
#define __pyx_n_u_vertices __pyx_string_tab[302]
#define __pyx_n_u_vfaces __pyx_string_tab[303]
#define __pyx_n_u_vis_flag __pyx_string_tab[304]
#define __pyx_n_u_vnodes __pyx_string_tab[305]
#define __pyx_n_u_vol_str __pyx_string_tab[306]
#define __pyx_n_u_volume __pyx_string_tab[307]
#define __pyx_n_u_vornet __pyx_string_tab[308]
#define __pyx_n_u_vornet_ptr __pyx_string_tab[309]
#define __pyx_n_u_warning __pyx_string_tab[310]
#define __pyx_n_u_writeCiffile __pyx_string_tab[311]
#define __pyx_n_u_writeCssrfile __pyx_string_tab[312]
#define __pyx_n_u_writeMopacfile __pyx_string_tab[313]
#define __pyx_n_u_writeNt2file __pyx_string_tab[314]
#define __pyx_n_u_writeV1file __pyx_string_tab[315]
#define __pyx_n_u_writeVtkfile __pyx_string_tab[316]
#define __pyx_n_u_writeXyzfile __pyx_string_tab[317]
#define __pyx_n_u_write_to_CIF __pyx_string_tab[318]
#define __pyx_n_u_write_to_CSSR __pyx_string_tab[319]
#define __pyx_n_u_write_to_MOPAC __pyx_string_tab[320]
#define __pyx_n_u_write_to_V1 __pyx_string_tab[321]
#define __pyx_n_u_write_to_VTK __pyx_string_tab[322]
#define __pyx_n_u_write_to_XYZ __pyx_string_tab[323]
#define __pyx_n_u_x __pyx_string_tab[324]
#define __pyx_n_u_xyz_list __pyx_string_tab[325]
#define __pyx_n_u_xyz_vect __pyx_string_tab[326]
#define __pyx_n_u_y __pyx_string_tab[327]
#define __pyx_n_u_z __pyx_string_tab[328]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_Xyz);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_Xyz);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_Point);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_Point);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_Channel);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_Channel);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_Atom);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_Atom);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_AtomNetwork);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_VoronoiNode);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_VoronoiNode);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_VoronoiNetwork);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_DijkstraNetwork);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_VorFace);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_VorFace);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_VorCell);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_VorCell);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_BasicVCell);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_BasicVCell);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension_Cycle);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension_Cycle);
  Py_CLEAR(clear_module_state->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr);
  for (int i=0; i<15; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<85; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<329; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_1);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_0_6);
  Py_CLEAR(clear_module_state->__pyx_float_0_7);
  Py_CLEAR(clear_module_state->__pyx_float_0_25);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_Xyz);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_Xyz);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_Point);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_Point);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_Channel);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_Channel);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_Atom);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_Atom);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_AtomNetwork);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_VoronoiNode);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_VoronoiNode);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_VoronoiNetwork);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_DijkstraNetwork);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_VorFace);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_VorFace);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_VorCell);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_VorCell);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_BasicVCell);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_BasicVCell);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension_Cycle);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension_Cycle);
  Py_VISIT(traverse_module_state->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr);
  for (int i=0; i<15; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<85; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<329; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_1);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_5);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_6);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_7);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_25);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_neg_1);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "string.from_py":12
 *     cdef const char* __Pyx_PyObject_AsStringAndSize(object, Py_ssize_t*) except NULL
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
*/

static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, <size_t> length)
*/
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, <size_t> length)
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, <size_t> length)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  try {
    __pyx_t_2 = std::string(__pyx_v_data, ((size_t)__pyx_v_length));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":12
 *     cdef const char* __Pyx_PyObject_AsStringAndSize(object, Py_ssize_t*) except NULL
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "string.to_py":31
 *     cdef object __Pyx_PyObject_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":33
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  __pyx_t_1 = (__pyx_v_s.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "string.to_py":34
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
 * cdef extern from *:
*/
    PyErr_NoMemory(); __PYX_ERR(1, 34, __pyx_L1_error)

    /* "string.to_py":33
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  }

  /* "string.to_py":35
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), <Py_ssize_t> s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), ((Py_ssize_t)__pyx_v_s.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 *     cdef object __Pyx_PyObject_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":39
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":41
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  __pyx_t_1 = (__pyx_v_s.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "string.to_py":42
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
 * cdef extern from *:
*/
    PyErr_NoMemory(); __PYX_ERR(1, 42, __pyx_L1_error)

    /* "string.to_py":41
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  }

  /* "string.to_py":43
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), <Py_ssize_t> s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), ((Py_ssize_t)__pyx_v_s.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "string.to_py":39
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":47
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":49
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  __pyx_t_1 = (__pyx_v_s.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "string.to_py":50
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
 * cdef extern from *:
*/
    PyErr_NoMemory(); __PYX_ERR(1, 50, __pyx_L1_error)

    /* "string.to_py":49
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  }

  /* "string.to_py":51
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), <Py_ssize_t> s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), ((Py_ssize_t)__pyx_v_s.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "string.to_py":47
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":57
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  __pyx_t_1 = (__pyx_v_s.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "string.to_py":58
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 58, __pyx_L1_error)

    /* "string.to_py":57
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), <Py_ssize_t> s.size())
*/
  }

  /* "string.to_py":59
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), <Py_ssize_t> s.size())             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), ((Py_ssize_t)__pyx_v_s.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     if s.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":20
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new XYZ(x,y,z)
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_y,&__pyx_mstate_global->__pyx_n_u_z,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 20, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < (0)) __PYX_ERR(0, 20, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 20, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 20, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  int __pyx_r;
  XYZ *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":21
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):
 *         self.thisptr = new XYZ(x,y,z)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):
*/
  try {
    __pyx_t_1 = new XYZ(__pyx_v_x, __pyx_v_y, __pyx_v_z);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 21, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":20
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new XYZ(x,y,z)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":23
 *         self.thisptr = new XYZ(x,y,z)
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_x;
  CYTHON_UNUSED double __pyx_v_y;
  CYTHON_UNUSED double __pyx_v_z;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_y,&__pyx_mstate_global->__pyx_n_u_z,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 23, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < (0)) __PYX_ERR(0, 23, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 23, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 23, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":26
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {

  /* "pyzeo/extension.pyx":27
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property x:
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":26
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":30
 * 
 *     property x:
 *         def __get__(self): return self.thisptr.x             # <<<<<<<<<<<<<<
 *         def __set__(self, x_in): self.thisptr.x = x_in
 *     property y:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":31
 *     property x:
 *         def __get__(self): return self.thisptr.x
 *         def __set__(self, x_in): self.thisptr.x = x_in             # <<<<<<<<<<<<<<
 *     property y:
 *         def __get__(self): return self.thisptr.y
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_x_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_x_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_v_self->thisptr->x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":33
 *         def __set__(self, x_in): self.thisptr.x = x_in
 *     property y:
 *         def __get__(self): return self.thisptr.y             # <<<<<<<<<<<<<<
 *         def __set__(self, y_in): self.thisptr.y = y_in
 *     property z:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":34
 *     property y:
 *         def __get__(self): return self.thisptr.y
 *         def __set__(self, y_in): self.thisptr.y = y_in             # <<<<<<<<<<<<<<
 *     property z:
 *         def __get__(self): return self.thisptr.z
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_y_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_y_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_v_self->thisptr->y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":36
 *         def __set__(self, y_in): self.thisptr.y = y_in
 *     property z:
 *         def __get__(self): return self.thisptr.z             # <<<<<<<<<<<<<<
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":37
 *     property z:
 *         def __get__(self): return self.thisptr.z
 *         def __set__(self, z_in): self.thisptr.z = z_in             # <<<<<<<<<<<<<<
 * 
 *     def scale(self, double factor):
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_z_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_z_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_v_self->thisptr->z = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":39
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 *     def scale(self, double factor):             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_7scale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_3Xyz_7scale = {"scale", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_7scale, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_7scale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_factor;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_factor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 39, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 39, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "scale", 0) < (0)) __PYX_ERR(0, 39, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("scale", 1, 1, 1, i); __PYX_ERR(0, 39, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 39, __pyx_L3_error)
    }
    __pyx_v_factor = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 39, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 39, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Xyz.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_6scale(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v_factor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_6scale(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_factor) {
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale", 0);

  /* "pyzeo/extension.pyx":40
 * 
 *     def scale(self, double factor):
 *         new_xyz = Xyz()             # <<<<<<<<<<<<<<
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 *         return new_xyz
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_new_xyz = ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":41
 *     def scale(self, double factor):
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)             # <<<<<<<<<<<<<<
 *         return new_xyz
 * 
*/
  __pyx_v_self->thisptr->scale(__pyx_v_factor, __pyx_v_new_xyz->thisptr);

  /* "pyzeo/extension.pyx":42
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 *         return new_xyz             # <<<<<<<<<<<<<<
 * 
 * cdef class Point:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_new_xyz);
  __pyx_r = ((PyObject *)__pyx_v_new_xyz);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":39
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 *     def scale(self, double factor):             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_3Xyz_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_3Xyz_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":49
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CPoint(x,y,z)
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_y,&__pyx_mstate_global->__pyx_n_u_z,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 49, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < (0)) __PYX_ERR(0, 49, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 49, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 49, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Point.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point___cinit__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point___cinit__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  int __pyx_r;
  Point *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":50
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):
 *         self.thisptr = new CPoint(x,y,z)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):
*/
  try {
    __pyx_t_1 = new Point(__pyx_v_x, __pyx_v_y, __pyx_v_z);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 50, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":49
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CPoint(x,y,z)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":52
 *         self.thisptr = new CPoint(x,y,z)
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_x;
  CYTHON_UNUSED double __pyx_v_y;
  CYTHON_UNUSED double __pyx_v_z;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_y,&__pyx_mstate_global->__pyx_n_u_z,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 52, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < (0)) __PYX_ERR(0, 52, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 52, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 52, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Point.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_2__init__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":55
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {

  /* "pyzeo/extension.pyx":56
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":55
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":58
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_7__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_6__repr__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_6__repr__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzeo/extension.pyx":59
 * 
 *     def __repr__(self):
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'             # <<<<<<<<<<<<<<
 * 
 *     property x:
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u__2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u__2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":58
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Point.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":62
 * 
 *     property x:
 *         def __get__(self): return self.thisptr.vals[0]             # <<<<<<<<<<<<<<
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in
 *     property y:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1x___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1x___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":63
 *     property x:
 *         def __get__(self): return self.thisptr.vals[0]
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in             # <<<<<<<<<<<<<<
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_x_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_x_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[0]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":65
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]             # <<<<<<<<<<<<<<
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in
 *     property z:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1y___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1y___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":66
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in             # <<<<<<<<<<<<<<
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_y_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_y_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[1]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":68
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]             # <<<<<<<<<<<<<<
 *         def __set__(self, z_in): self.thisptr.vals[2] = z_in
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1z___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1z___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":69
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]
 *         def __set__(self, z_in): self.thisptr.vals[2] = z_in             # <<<<<<<<<<<<<<
 * 
 *     #def scale(self, double scaling_factor):
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_z_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_z_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[2]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_5Point_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_5Point_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Point.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":77
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_1initializeRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_initializeRadTable, "\n    Populate the atomic radius table with Zeo++ default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_1initializeRadTable = {"initializeRadTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_1initializeRadTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_initializeRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_1initializeRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeRadTable (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_initializeRadTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_initializeRadTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeRadTable", 0);

  /* "pyzeo/extension.pyx":81
 *     Populate the atomic radius table with Zeo++ default values
 *     """
 *     zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeCovRadTable():
*/
  initializeRadTable();

  /* "pyzeo/extension.pyx":77
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":83
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3initializeCovRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_2initializeCovRadTable, "\n    Populate the covalent tradius table with Zeo++ default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_3initializeCovRadTable = {"initializeCovRadTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_3initializeCovRadTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_2initializeCovRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_3initializeCovRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeCovRadTable (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_2initializeCovRadTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_2initializeCovRadTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeCovRadTable", 0);

  /* "pyzeo/extension.pyx":87
 *     Populate the covalent tradius table with Zeo++ default values
 *     """
 *     zeo_initializeCovRadTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeMassTable():
*/
  initializeCovRadTable();

  /* "pyzeo/extension.pyx":83
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":89
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5initializeMassTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_4initializeMassTable, "\n    Populate the atomic mass table with Zeo++ default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_5initializeMassTable = {"initializeMassTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_5initializeMassTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_4initializeMassTable};
static PyObject *__pyx_pw_5pyzeo_9extension_5initializeMassTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeMassTable (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4initializeMassTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4initializeMassTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeMassTable", 0);

  /* "pyzeo/extension.pyx":93
 *     Populate the atomic mass table with Zeo++ default values
 *     """
 *     zeo_initializeMassTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeAtomCharacterTable():
*/
  initializeMassTable();

  /* "pyzeo/extension.pyx":89
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":95
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_6initializeAtomCharacterTable, "\n    Populate the Atom symbol table with Zeo++ default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7initializeAtomCharacterTable = {"initializeAtomCharacterTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_6initializeAtomCharacterTable};
static PyObject *__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomCharacterTable (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomCharacterTable", 0);

  /* "pyzeo/extension.pyx":99
 *     Populate the Atom symbol table with Zeo++ default values
 *     """
 *     zeo_initializeAtomCharacterTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeAtomicNumberTable():
*/
  initializeAtomCharacterTable();

  /* "pyzeo/extension.pyx":95
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":101
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_8initializeAtomicNumberTable, "\n    Populate the atomic number table with Zeo++ default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_9initializeAtomicNumberTable = {"initializeAtomicNumberTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_8initializeAtomicNumberTable};
static PyObject *__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomicNumberTable (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomicNumberTable", 0);

  /* "pyzeo/extension.pyx":105
 *     Populate the atomic number table with Zeo++ default values
 *     """
 *     zeo_initializeAtomicNumberTable()             # <<<<<<<<<<<<<<
 * 
 * def readRadTable(filename):
*/
  initializeAtomicNumberTable();

  /* "pyzeo/extension.pyx":101
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":107
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11readRadTable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_10readRadTable, "\n    Read atomic radii values from input file and replace the default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11readRadTable = {"readRadTable", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11readRadTable, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10readRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_11readRadTable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readRadTable (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 107, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 107, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readRadTable", 0) < (0)) __PYX_ERR(0, 107, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readRadTable", 1, 1, 1, i); __PYX_ERR(0, 107, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 107, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readRadTable", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 107, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readRadTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10readRadTable(__pyx_self, __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10readRadTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readRadTable", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":111
 *     Read atomic radii values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":112
 *     """
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     zeo_readRadTable(c_filename)
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 112, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":111
 *     Read atomic radii values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":113
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     zeo_readRadTable(c_filename)
 * 
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":114
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     zeo_readRadTable(c_filename)             # <<<<<<<<<<<<<<
 * 
 * def readMassTable(filename):
*/
  readRadTable(__pyx_v_c_filename);

  /* "pyzeo/extension.pyx":107
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.readRadTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":116
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_13readMassTable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_12readMassTable, "\n    Read atomic mass values from input file and replace the default values\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_13readMassTable = {"readMassTable", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_13readMassTable, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_12readMassTable};
static PyObject *__pyx_pw_5pyzeo_9extension_13readMassTable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readMassTable (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 116, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 116, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readMassTable", 0) < (0)) __PYX_ERR(0, 116, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readMassTable", 1, 1, 1, i); __PYX_ERR(0, 116, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 116, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readMassTable", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 116, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readMassTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_12readMassTable(__pyx_self, __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_12readMassTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readMassTable", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":120
 *     Read atomic mass values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":121
 *     """
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     zeo_readMassTable(c_filename)
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 121, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":120
 *     Read atomic mass values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":122
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     zeo_readMassTable(c_filename)
 * 
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":123
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     zeo_readMassTable(c_filename)             # <<<<<<<<<<<<<<
 * 
 * def lookupRadius(element):
*/
  readMassTable(__pyx_v_c_filename);

  /* "pyzeo/extension.pyx":116
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.readMassTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":125
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15lookupRadius(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_14lookupRadius, "\"\n    Args:\n        element:\n            Element name in conventional shorthand \n            Ex: Al for aluminum \n                Si for silicon \n    Returns:\n        radius of the input element\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_15lookupRadius = {"lookupRadius", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15lookupRadius, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14lookupRadius};
static PyObject *__pyx_pw_5pyzeo_9extension_15lookupRadius(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupRadius (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_element,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 125, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 125, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lookupRadius", 0) < (0)) __PYX_ERR(0, 125, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lookupRadius", 1, 1, 1, i); __PYX_ERR(0, 125, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 125, __pyx_L3_error)
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookupRadius", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 125, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.lookupRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14lookupRadius(__pyx_self, __pyx_v_element);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14lookupRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  double __pyx_v_radius;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupRadius", 0);

  /* "pyzeo/extension.pyx":135
 *         radius of the input element
 *     """
 *     radius = zeo_lookupRadius(element, True)             # <<<<<<<<<<<<<<
 *     return radius
 * 
*/
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_v_radius = lookupRadius(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1), 1);

  /* "pyzeo/extension.pyx":136
 *     """
 *     radius = zeo_lookupRadius(element, True)
 *     return radius             # <<<<<<<<<<<<<<
 * 
 * def lookupCovRadius(element):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_radius); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":125
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":138
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_17lookupCovRadius(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_17lookupCovRadius = {"lookupCovRadius", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_17lookupCovRadius, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_17lookupCovRadius(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupCovRadius (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_element,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 138, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 138, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lookupCovRadius", 0) < (0)) __PYX_ERR(0, 138, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lookupCovRadius", 1, 1, 1, i); __PYX_ERR(0, 138, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 138, __pyx_L3_error)
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookupCovRadius", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 138, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.lookupCovRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_16lookupCovRadius(__pyx_self, __pyx_v_element);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_16lookupCovRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupCovRadius", 0);

  /* "pyzeo/extension.pyx":139
 * 
 * def lookupCovRadius(element):
 *     return zeo_lookupCovRadius(element)             # <<<<<<<<<<<<<<
 * 
 * def lookupMass(element):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(lookupCovRadius(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":138
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupCovRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":141
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_19lookupMass(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_19lookupMass = {"lookupMass", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_19lookupMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_19lookupMass(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupMass (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_element,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 141, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 141, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lookupMass", 0) < (0)) __PYX_ERR(0, 141, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lookupMass", 1, 1, 1, i); __PYX_ERR(0, 141, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 141, __pyx_L3_error)
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookupMass", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 141, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.lookupMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_18lookupMass(__pyx_self, __pyx_v_element);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_18lookupMass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupMass", 0);

  /* "pyzeo/extension.pyx":142
 * 
 * def lookupMass(element):
 *     return zeo_lookupMass(element)             # <<<<<<<<<<<<<<
 * 
 * def lookupAtomicNumber(element):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(lookupMass(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":141
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":144
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_21lookupAtomicNumber = {"lookupAtomicNumber", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupAtomicNumber (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_element,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 144, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 144, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lookupAtomicNumber", 0) < (0)) __PYX_ERR(0, 144, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lookupAtomicNumber", 1, 1, 1, i); __PYX_ERR(0, 144, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 144, __pyx_L3_error)
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookupAtomicNumber", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.lookupAtomicNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(__pyx_self, __pyx_v_element);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupAtomicNumber", 0);

  /* "pyzeo/extension.pyx":145
 * 
 * def lookupAtomicNumber(element):
 *     return zeo_lookupAtomicNumber(element)             # <<<<<<<<<<<<<<
 * 
 * def isMetal(element):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyLong_From_int(lookupAtomicNumber(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":144
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupAtomicNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":147
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_23isMetal(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_23isMetal = {"isMetal", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_23isMetal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_23isMetal(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isMetal (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_element,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 147, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 147, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "isMetal", 0) < (0)) __PYX_ERR(0, 147, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("isMetal", 1, 1, 1, i); __PYX_ERR(0, 147, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 147, __pyx_L3_error)
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isMetal", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 147, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.isMetal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_22isMetal(__pyx_self, __pyx_v_element);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_22isMetal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isMetal", 0);

  /* "pyzeo/extension.pyx":148
 * 
 * def isMetal(element):
 *     return zeo_isMetal(element)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(isMetal(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":147
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.isMetal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":156
 *     Python wrapper to Zeo++ Channel.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel___cinit__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7Channel___cinit__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {
  int __pyx_r;
  CHANNEL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":157
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
*/
  try {
    __pyx_t_1 = new CHANNEL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 157, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":156
 *     Python wrapper to Zeo++ Channel.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Channel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":158
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {

  /* "pyzeo/extension.pyx":159
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def find_bounding_atoms(self, AtomNetwork atmnet, list bvcells):
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":158
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":161
 *         del self.thisptr
 * 
 *     def find_bounding_atoms(self, AtomNetwork atmnet, list bvcells):             # <<<<<<<<<<<<<<
 *         """
 *         Find atoms that bound this channel.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_5find_bounding_atoms(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_7Channel_4find_bounding_atoms, "  \n        Find atoms that bound this channel.  \n          \n        Parameters  \n        ----------  \n        atmnet : AtomNetwork  \n            The atom network structure  \n        bvcells : list of BasicVCell  \n            Vector of Voronoi cells (one per atom)  \n              \n        Returns  \n        -------  \n        list of int  \n            Indices of atoms that bound this channel  \n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7Channel_5find_bounding_atoms = {"find_bounding_atoms", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_5find_bounding_atoms, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_7Channel_4find_bounding_atoms};
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_5find_bounding_atoms(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_bvcells = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_bounding_atoms (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_bvcells,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 161, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 161, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 161, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_bounding_atoms", 0) < (0)) __PYX_ERR(0, 161, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("find_bounding_atoms", 1, 2, 2, i); __PYX_ERR(0, 161, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 161, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 161, __pyx_L3_error)
    }
    __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)values[0]);
    __pyx_v_bvcells = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_bounding_atoms", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 161, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Channel.find_bounding_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atmnet), __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, 1, "atmnet", 0))) __PYX_ERR(0, 161, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bvcells), (&PyList_Type), 1, "bvcells", 1))) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel_4find_bounding_atoms(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self), __pyx_v_atmnet, __pyx_v_bvcells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_4find_bounding_atoms(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet, PyObject *__pyx_v_bvcells) {
  std::vector<BASIC_VCELL>  __pyx_v_c_bvcells;
  struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_bvcell = 0;
  std::vector<int>  __pyx_v_atom_ids;
  std::vector<int> ::size_type __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<int> ::size_type __pyx_t_4;
  std::vector<int> ::size_type __pyx_t_5;
  std::vector<int> ::size_type __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_bounding_atoms", 0);

  /* "pyzeo/extension.pyx":180
 *         cdef vector[BASIC_VCELL] c_bvcells
 *         cdef BasicVCell bvcell
 *         for bvcell in bvcells:             # <<<<<<<<<<<<<<
 *             c_bvcells.push_back(bvcell.thisptr[0])
 * 
*/
  if (unlikely(__pyx_v_bvcells == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_bvcells; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 180, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell))))) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_bvcell, ((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":181
 *         cdef BasicVCell bvcell
 *         for bvcell in bvcells:
 *             c_bvcells.push_back(bvcell.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *         # Prepare output vector
*/
    try {
      __pyx_v_c_bvcells.push_back((__pyx_v_bvcell->thisptr[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 181, __pyx_L1_error)
    }

    /* "pyzeo/extension.pyx":180
 *         cdef vector[BASIC_VCELL] c_bvcells
 *         cdef BasicVCell bvcell
 *         for bvcell in bvcells:             # <<<<<<<<<<<<<<
 *             c_bvcells.push_back(bvcell.thisptr[0])
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":187
 * 
 *         # Call C++ method
 *         self.thisptr.findBoundingAtoms(atmnet.thisptr, c_bvcells, atom_ids)             # <<<<<<<<<<<<<<
 * 
 *         # Convert C++ vector to Python list
*/
  __pyx_v_self->thisptr->findBoundingAtoms(__pyx_v_atmnet->thisptr, __pyx_v_c_bvcells, __pyx_v_atom_ids);

  /* "pyzeo/extension.pyx":190
 * 
 *         # Convert C++ vector to Python list
 *         return [atom_ids[i] for i in range(atom_ids.size())]             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_v_atom_ids.size();
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_6;
      __pyx_t_3 = __Pyx_PyLong_From_int((__pyx_v_atom_ids[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":161
 *         del self.thisptr
 * 
 *     def find_bounding_atoms(self, AtomNetwork atmnet, list bvcells):             # <<<<<<<<<<<<<<
 *         """
 *         Find atoms that bound this channel.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Channel.find_bounding_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bvcell);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7Channel_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Channel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7Channel_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Channel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Channel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":193
 * 
 * 
 * def find_channels(VoronoiNetwork vornet, double channel_radius):             # <<<<<<<<<<<<<<
 *     """
 *     Find channels in a Voronoi network.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_25find_channels(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_24find_channels, "  \n    Find channels in a Voronoi network.  \n      \n    Identifies channels (accessible pore networks) within the provided   \n    VORONOI_NETWORK for a given probe radius.  \n      \n    Parameters  \n    ----------  \n    vornet : VoronoiNetwork  \n        The Voronoi network to analyze  \n    channel_radius : float\n        Radius of probe used to determine the accessibility of void space.  \n          \n    Returns  \n    -------  \n    tuple of (list of Channel, list of bool)  \n        - channels: List of Channel objects representing accessible channels  \n        - access_info: Boolean list where access_info[i] indicates if node i is accessible  \n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_25find_channels = {"find_channels", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_25find_channels, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_24find_channels};
static PyObject *__pyx_pw_5pyzeo_9extension_25find_channels(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet = 0;
  double __pyx_v_channel_radius;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_channels (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_vornet,&__pyx_mstate_global->__pyx_n_u_channel_radius,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 193, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 193, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 193, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_channels", 0) < (0)) __PYX_ERR(0, 193, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("find_channels", 1, 2, 2, i); __PYX_ERR(0, 193, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 193, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 193, __pyx_L3_error)
    }
    __pyx_v_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)values[0]);
    __pyx_v_channel_radius = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_channel_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_channels", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 193, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.find_channels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vornet), __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, 1, "vornet", 0))) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzeo_9extension_24find_channels(__pyx_self, __pyx_v_vornet, __pyx_v_channel_radius);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_24find_channels(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet, double __pyx_v_channel_radius) {
  std::vector<bool>  __pyx_v_access_info;
  std::vector<CHANNEL>  __pyx_v_c_channels;
  PyObject *__pyx_v_py_access_info = NULL;
  PyObject *__pyx_v_py_channels = NULL;
  std::vector<CHANNEL> ::size_type __pyx_v_i;
  struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_channel = NULL;
  std::vector<bool> ::size_type __pyx_8genexpr1__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<bool> ::size_type __pyx_t_2;
  std::vector<bool> ::size_type __pyx_t_3;
  std::vector<bool> ::size_type __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<CHANNEL> ::size_type __pyx_t_6;
  std::vector<CHANNEL> ::size_type __pyx_t_7;
  std::vector<CHANNEL> ::size_type __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_channels", 0);

  /* "pyzeo/extension.pyx":218
 * 
 *     # Call the C++ static method
 *     c_findChannelsInVorNet(vornet.thisptr, channel_radius, &access_info, &c_channels)             # <<<<<<<<<<<<<<
 * 
 *     # Convert C++ vector<bool> to Python list
*/
  CHANNEL::findChannels(__pyx_v_vornet->thisptr, __pyx_v_channel_radius, (&__pyx_v_access_info), (&__pyx_v_c_channels));

  /* "pyzeo/extension.pyx":221
 * 
 *     # Convert C++ vector<bool> to Python list
 *     py_access_info = [access_info[i] for i in range(access_info.size())]             # <<<<<<<<<<<<<<
 * 
 *     # Convert C++ vector<CHANNEL> to Python list of Channel objects
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_access_info.size();
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_v_access_info[__pyx_8genexpr1__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_py_access_info = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":224
 * 
 *     # Convert C++ vector<CHANNEL> to Python list of Channel objects
 *     py_channels = []             # <<<<<<<<<<<<<<
 *     for i in range(c_channels.size()):
 *         channel = Channel()
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_channels = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":225
 *     # Convert C++ vector<CHANNEL> to Python list of Channel objects
 *     py_channels = []
 *     for i in range(c_channels.size()):             # <<<<<<<<<<<<<<
 *         channel = Channel()
 *         # Copy the C++ CHANNEL data
*/
  __pyx_t_6 = __pyx_v_c_channels.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "pyzeo/extension.pyx":226
 *     py_channels = []
 *     for i in range(c_channels.size()):
 *         channel = Channel()             # <<<<<<<<<<<<<<
 *         # Copy the C++ CHANNEL data
 *         channel.thisptr[0] = c_channels[i]
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Channel);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Channel); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_channel, ((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":228
 *         channel = Channel()
 *         # Copy the C++ CHANNEL data
 *         channel.thisptr[0] = c_channels[i]             # <<<<<<<<<<<<<<
 *         py_channels.append(channel)
 * 
*/
    (__pyx_v_channel->thisptr[0]) = (__pyx_v_c_channels[__pyx_v_i]);

    /* "pyzeo/extension.pyx":229
 *         # Copy the C++ CHANNEL data
 *         channel.thisptr[0] = c_channels[i]
 *         py_channels.append(channel)             # <<<<<<<<<<<<<<
 * 
 *     return py_channels, py_access_info
*/
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_py_channels, ((PyObject *)__pyx_v_channel)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
  }

  /* "pyzeo/extension.pyx":231
 *         py_channels.append(channel)
 * 
 *     return py_channels, py_access_info             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_py_channels);
  __Pyx_GIVEREF(__pyx_v_py_channels);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_py_channels) != (0)) __PYX_ERR(0, 231, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_py_access_info);
  __Pyx_GIVEREF(__pyx_v_py_access_info);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_py_access_info) != (0)) __PYX_ERR(0, 231, __pyx_L1_error);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":193
 * 
 * 
 * def find_channels(VoronoiNetwork vornet, double channel_radius):             # <<<<<<<<<<<<<<
 *     """
 *     Find channels in a Voronoi network.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyzeo.extension.find_channels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_access_info);
  __Pyx_XDECREF(__pyx_v_py_channels);
  __Pyx_XDECREF((PyObject *)__pyx_v_channel);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":235
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_27calc_pore_size_distribution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_26calc_pore_size_distribution, "\n    Computes the pore size distribution histogram\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        hist_file:\n           File to store the histogram\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        points_file (Default=None):\n            File to store the points. Used in visualization\n        node_radii_file (Default=None):\n            File to store the node radi. Used in visualizationi\n        sphere_dist_file (Default=None):\n            Reserved for future use\n        vis_flag (Default=False)\n            Visualization Flag\n        overlap_check_flag (Default=False)\n            VisIT Visualization related Flag\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_27calc_pore_size_distribution = {"calc_pore_size_distribution", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_27calc_pore_size_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_26calc_pore_size_distribution};
static PyObject *__pyx_pw_5pyzeo_9extension_27calc_pore_size_distribution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_hist_file = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_points_file = 0;
  PyObject *__pyx_v_node_radii_file = 0;
  PyObject *__pyx_v_sphere_dist_file = 0;
  PyObject *__pyx_v_vis_flag = 0;
  PyObject *__pyx_v_overlap_check_flag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_pore_size_distribution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_channel_radius,&__pyx_mstate_global->__pyx_n_u_probe_radius,&__pyx_mstate_global->__pyx_n_u_mc_sampling_no,&__pyx_mstate_global->__pyx_n_u_hist_file,&__pyx_mstate_global->__pyx_n_u_high_accuracy,&__pyx_mstate_global->__pyx_n_u_exclude_pockets,&__pyx_mstate_global->__pyx_n_u_points_file,&__pyx_mstate_global->__pyx_n_u_node_radii_file,&__pyx_mstate_global->__pyx_n_u_sphere_dist_file,&__pyx_mstate_global->__pyx_n_u_vis_flag,&__pyx_mstate_global->__pyx_n_u_overlap_check_flag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 235, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "calc_pore_size_distribution", 0) < (0)) __PYX_ERR(0, 235, __pyx_L3_error)

      /* "pyzeo/extension.pyx":236
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,             # <<<<<<<<<<<<<<
 *         points_file="", node_radii_file="", sphere_dist_file="",
 *         vis_flag=False, overlap_check_flag=False):
*/
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));
      if (!values[8]) values[8] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));
      if (!values[9]) values[9] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));

      /* "pyzeo/extension.pyx":238
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 *         vis_flag=False, overlap_check_flag=False):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the pore size distribution histogram
*/
      if (!values[10]) values[10] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[11]) values[11] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, i); __PYX_ERR(0, 235, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 235, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 235, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 235, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 235, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 235, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 235, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));
      if (!values[8]) values[8] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));
      if (!values[9]) values[9] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_kp_u__4)));
      if (!values[10]) values[10] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[11]) values[11] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_hist_file = values[4];
    __pyx_v_high_accuracy = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_points_file = values[7];
    __pyx_v_node_radii_file = values[8];
    __pyx_v_sphere_dist_file = values[9];
    __pyx_v_vis_flag = values[10];
    __pyx_v_overlap_check_flag = values[11];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, __pyx_nargs); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.calc_pore_size_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_26calc_pore_size_distribution(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_hist_file, __pyx_v_high_accuracy, __pyx_v_exclude_pockets, __pyx_v_points_file, __pyx_v_node_radii_file, __pyx_v_sphere_dist_file, __pyx_v_vis_flag, __pyx_v_overlap_check_flag);

  /* "pyzeo/extension.pyx":235
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_26calc_pore_size_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_hist_file, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_points_file, PyObject *__pyx_v_node_radii_file, PyObject *__pyx_v_sphere_dist_file, PyObject *__pyx_v_vis_flag, PyObject *__pyx_v_overlap_check_flag) {
  PyObject *__pyx_v_atmnet_copy = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnetcp_ptr;
  std::string __pyx_v_chist_file;
  std::string __pyx_v_cpnt_file;
  std::string __pyx_v_cnd_file;
  std::string __pyx_v_csph_file;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_pore_size_distribution", 0);

  /* "pyzeo/extension.pyx":267
 *             VisIT Visualization related Flag
 *     """
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()             # <<<<<<<<<<<<<<
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_atmnet_copy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":268
 *     """
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 268, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":269
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr             # <<<<<<<<<<<<<<
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet_copy, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet_copy)->thisptr;
  __pyx_v_c_atmnetcp_ptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":270
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file             # <<<<<<<<<<<<<<
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file
*/
  __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_hist_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_v_chist_file = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyzeo/extension.pyx":271
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file             # <<<<<<<<<<<<<<
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
*/
  __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_points_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_v_cpnt_file = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyzeo/extension.pyx":272
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file             # <<<<<<<<<<<<<<
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
*/
  __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_node_radii_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_cnd_file = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyzeo/extension.pyx":273
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file             # <<<<<<<<<<<<<<
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
*/
  __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_sphere_dist_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_v_csph_file = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyzeo/extension.pyx":274
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
*/
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)

  /* "pyzeo/extension.pyx":275
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 *               overlap_check_flag)
*/
  __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyLong_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)

  /* "pyzeo/extension.pyx":276
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,             # <<<<<<<<<<<<<<
 *               overlap_check_flag)
 * 
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_vis_flag); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)

  /* "pyzeo/extension.pyx":277
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 *               overlap_check_flag)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_overlap_check_flag); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "pyzeo/extension.pyx":274
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
*/
  calcPoreSizeDistr(__pyx_v_c_atmnetcp_ptr, __pyx_v_c_atmnet_ptr, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_v_chist_file, __pyx_v_cpnt_file, __pyx_v_cnd_file, __pyx_v_csph_file, __pyx_t_11, __pyx_t_12);

  /* "pyzeo/extension.pyx":235
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.calc_pore_size_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atmnet_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":281
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_29readCiffile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_29readCiffile = {"readCiffile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_29readCiffile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_29readCiffile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCiffile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_radialflag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 281, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 281, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 281, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readCiffile", 0) < (0)) __PYX_ERR(0, 281, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readCiffile", 1, 2, 2, i); __PYX_ERR(0, 281, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 281, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 281, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCiffile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_28readCiffile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_28readCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCiffile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":282
 * # netio
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":283
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_5 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_5) {

    /* "pyzeo/extension.pyx":284
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 284, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":283
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":285
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":286
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_t_7 = (!readCIFFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_5));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":287
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 287, __pyx_L1_error)

    /* "pyzeo/extension.pyx":286
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet
*/
  }

  /* "pyzeo/extension.pyx":288
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readArcfile(filename, radialflag):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":281
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":290
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_31readArcfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_31readArcfile = {"readArcfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_31readArcfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_31readArcfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readArcfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_radialflag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 290, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 290, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 290, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readArcfile", 0) < (0)) __PYX_ERR(0, 290, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readArcfile", 1, 2, 2, i); __PYX_ERR(0, 290, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 290, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 290, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readArcfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 290, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readArcfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_30readArcfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_30readArcfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readArcfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":291
 * 
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":292
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_5 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_5) {

    /* "pyzeo/extension.pyx":293
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 293, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":292
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":294
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":295
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_7 = (!readARCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_5));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":296
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 296, __pyx_L1_error)

    /* "pyzeo/extension.pyx":295
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  }

  /* "pyzeo/extension.pyx":297
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readCucfile(filename, radialflag):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":290
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readArcfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":299
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_33readCucfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_33readCucfile = {"readCucfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_33readCucfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_33readCucfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCucfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_radialflag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 299, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 299, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 299, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readCucfile", 0) < (0)) __PYX_ERR(0, 299, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readCucfile", 1, 2, 2, i); __PYX_ERR(0, 299, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 299, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 299, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCucfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readCucfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_32readCucfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_32readCucfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCucfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":300
 * 
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":301
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_5 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_5) {

    /* "pyzeo/extension.pyx":302
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 302, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":301
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":303
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":304
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_t_7 = (!readCUCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_5));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":305
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 305, __pyx_L1_error)

    /* "pyzeo/extension.pyx":304
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  }

  /* "pyzeo/extension.pyx":306
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readCssrfile(filename, radialflag):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":299
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readCucfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":308
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_35readCssrfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_35readCssrfile = {"readCssrfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_35readCssrfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_35readCssrfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCssrfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_radialflag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 308, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 308, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 308, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readCssrfile", 0) < (0)) __PYX_ERR(0, 308, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readCssrfile", 1, 2, 2, i); __PYX_ERR(0, 308, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 308, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 308, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCssrfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 308, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_34readCssrfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_34readCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCssrfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":309
 * 
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":310
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_5 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_5) {

    /* "pyzeo/extension.pyx":311
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 311, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":310
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":312
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":313
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_t_7 = (!readCSSRFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_5));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":314
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 314, __pyx_L1_error)

    /* "pyzeo/extension.pyx":313
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  }

  /* "pyzeo/extension.pyx":315
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readV1file(filename, radialflag):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":308
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":317
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_37readV1file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_37readV1file = {"readV1file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_37readV1file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_37readV1file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readV1file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_radialflag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 317, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 317, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 317, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "readV1file", 0) < (0)) __PYX_ERR(0, 317, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("readV1file", 1, 2, 2, i); __PYX_ERR(0, 317, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 317, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 317, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readV1file", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 317, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.readV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_36readV1file(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_36readV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readV1file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":318
 * 
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":319
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_5 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_5) {

    /* "pyzeo/extension.pyx":320
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 320, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":319
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":321
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":322
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_t_7 = (!readV1File(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_5));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":323
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 323, __pyx_L1_error)

    /* "pyzeo/extension.pyx":322
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
*/
  }

  /* "pyzeo/extension.pyx":324
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def writeCssrfile(filename, atmnet):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":317
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":326
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_39writeCssrfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_39writeCssrfile = {"writeCssrfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_39writeCssrfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_39writeCssrfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCssrfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 326, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 326, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 326, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeCssrfile", 0) < (0)) __PYX_ERR(0, 326, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeCssrfile", 1, 2, 2, i); __PYX_ERR(0, 326, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 326, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 326, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeCssrfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 326, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_38writeCssrfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_38writeCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCssrfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":327
 * 
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":328
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 328, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":327
 * 
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":329
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":330
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToCSSR(c_filename, c_atmnet):
 *         raise IOError
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":331
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_1 = (!writeToCSSR(__pyx_v_c_filename, __pyx_v_c_atmnet));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":332
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeCiffile(filename, atmnet):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 332, __pyx_L1_error)

    /* "pyzeo/extension.pyx":331
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":326
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":334
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_41writeCiffile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_41writeCiffile = {"writeCiffile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_41writeCiffile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_41writeCiffile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCiffile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 334, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 334, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 334, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeCiffile", 0) < (0)) __PYX_ERR(0, 334, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeCiffile", 1, 2, 2, i); __PYX_ERR(0, 334, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 334, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 334, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeCiffile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 334, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_40writeCiffile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_40writeCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCiffile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":335
 * 
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":336
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 336, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":335
 * 
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":337
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":338
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToCIF(c_filename, c_atmnet):
 *         raise IOError
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":339
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_1 = (!writeToCIF(__pyx_v_c_filename, __pyx_v_c_atmnet));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":340
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeV1file(filename, atmnet):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 340, __pyx_L1_error)

    /* "pyzeo/extension.pyx":339
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":334
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":342
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_43writeV1file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_43writeV1file = {"writeV1file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_43writeV1file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_43writeV1file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeV1file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 342, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 342, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 342, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeV1file", 0) < (0)) __PYX_ERR(0, 342, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeV1file", 1, 2, 2, i); __PYX_ERR(0, 342, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 342, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 342, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeV1file", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 342, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_42writeV1file(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_42writeV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeV1file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":343
 * 
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":344
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 344, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":343
 * 
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":345
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":346
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToV1(c_filename, c_atmnet):
 *         raise IOError
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":347
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_1 = (!writeToV1(__pyx_v_c_filename, __pyx_v_c_atmnet));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":348
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeNt2file(filename, vornet, minRad = None):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 348, __pyx_L1_error)

    /* "pyzeo/extension.pyx":347
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":342
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":350
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_45writeNt2file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_45writeNt2file = {"writeNt2file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_45writeNt2file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_45writeNt2file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_vornet = 0;
  PyObject *__pyx_v_minRad = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeNt2file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_vornet,&__pyx_mstate_global->__pyx_n_u_minRad,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 350, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 350, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 350, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 350, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeNt2file", 0) < (0)) __PYX_ERR(0, 350, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeNt2file", 0, 2, 3, i); __PYX_ERR(0, 350, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 350, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 350, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 350, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_filename = values[0];
    __pyx_v_vornet = values[1];
    __pyx_v_minRad = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeNt2file", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 350, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeNt2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_44writeNt2file(__pyx_self, __pyx_v_filename, __pyx_v_vornet, __pyx_v_minRad);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_44writeNt2file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet, PyObject *__pyx_v_minRad) {
  char *__pyx_v_c_filename;
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  VORONOI_NETWORK *__pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeNt2file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":351
 * 
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":352
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 352, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":351
 * 
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":353
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":354
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":355
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:             # <<<<<<<<<<<<<<
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_minRad); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 355, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":356
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):             # <<<<<<<<<<<<<<
 *             raise IOError
 *     else:
*/
    __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_v_minRad); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
    __pyx_t_1 = (!writeToNt2(__pyx_v_c_filename, __pyx_v_c_vornet_ptr, __pyx_t_5));
    if (unlikely(__pyx_t_1)) {

      /* "pyzeo/extension.pyx":357
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError             # <<<<<<<<<<<<<<
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):
*/
      __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
      __PYX_ERR(0, 357, __pyx_L1_error)

      /* "pyzeo/extension.pyx":356
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):             # <<<<<<<<<<<<<<
 *             raise IOError
 *     else:
*/
    }

    /* "pyzeo/extension.pyx":355
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:             # <<<<<<<<<<<<<<
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError
*/
    goto __pyx_L4;
  }

  /* "pyzeo/extension.pyx":359
 *             raise IOError
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  /*else*/ {
    __pyx_t_1 = (!writeToNt2(__pyx_v_c_filename, __pyx_v_c_vornet_ptr));
    if (unlikely(__pyx_t_1)) {

      /* "pyzeo/extension.pyx":360
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
*/
      __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
      __PYX_ERR(0, 360, __pyx_L1_error)

      /* "pyzeo/extension.pyx":359
 *             raise IOError
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
    }
  }
  __pyx_L4:;

  /* "pyzeo/extension.pyx":350
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeNt2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":362
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_47writeXyzfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_47writeXyzfile = {"writeXyzfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_47writeXyzfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_47writeXyzfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_v_is_duplicate_perimeter_atoms = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeXyzfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_supercell_flag,&__pyx_mstate_global->__pyx_n_u_is_duplicate_perimeter_atoms,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 362, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 362, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 362, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 362, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 362, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeXyzfile", 0) < (0)) __PYX_ERR(0, 362, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, i); __PYX_ERR(0, 362, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 362, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 362, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 362, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 362, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
    __pyx_v_supercell_flag = values[2];
    __pyx_v_is_duplicate_perimeter_atoms = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 362, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeXyzfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_46writeXyzfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet, __pyx_v_supercell_flag, __pyx_v_is_duplicate_perimeter_atoms);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_46writeXyzfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeXyzfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":363
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":364
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 364, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":363
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":365
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":366
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":367
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)

  /* "pyzeo/extension.pyx":368
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_is_duplicate_perimeter_atoms); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L1_error)

  /* "pyzeo/extension.pyx":367
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
*/
  __pyx_t_6 = (!writeToXYZ(__pyx_v_c_filename, __pyx_v_c_atmnet, __pyx_t_1, __pyx_t_5));
  if (unlikely(__pyx_t_6)) {

    /* "pyzeo/extension.pyx":369
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeVtkfile(filename, atmnet):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 369, __pyx_L1_error)

    /* "pyzeo/extension.pyx":367
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
*/
  }

  /* "pyzeo/extension.pyx":362
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeXyzfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":371
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_49writeVtkfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_49writeVtkfile = {"writeVtkfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_49writeVtkfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_49writeVtkfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeVtkfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 371, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 371, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 371, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeVtkfile", 0) < (0)) __PYX_ERR(0, 371, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeVtkfile", 1, 2, 2, i); __PYX_ERR(0, 371, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 371, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 371, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeVtkfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 371, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeVtkfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_48writeVtkfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_48writeVtkfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeVtkfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":372
 * 
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":373
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 373, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":372
 * 
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":374
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 374, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":375
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToVTK(c_filename, c_atmnet):
 *         raise IOError
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":376
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_1 = (!writeToVTK(__pyx_v_c_filename, __pyx_v_c_atmnet));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":377
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 377, __pyx_L1_error)

    /* "pyzeo/extension.pyx":376
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":371
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeVtkfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":379
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_51writeMopacfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_51writeMopacfile = {"writeMopacfile", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_51writeMopacfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_51writeMopacfile(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeMopacfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_supercell_flag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 379, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 379, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 379, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 379, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "writeMopacfile", 0) < (0)) __PYX_ERR(0, 379, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("writeMopacfile", 1, 3, 3, i); __PYX_ERR(0, 379, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 379, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 379, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 379, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
    __pyx_v_supercell_flag = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMopacfile", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 379, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.writeMopacfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_50writeMopacfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet, __pyx_v_supercell_flag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_50writeMopacfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeMopacfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":380
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":381
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 381, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":380
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
*/
  }

  /* "pyzeo/extension.pyx":382
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":383
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
 *         raise IOError
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_4;

  /* "pyzeo/extension.pyx":384
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_t_5 = (!writeToMOPAC(__pyx_v_c_filename, __pyx_v_c_atmnet, __pyx_t_1));
  if (unlikely(__pyx_t_5)) {

    /* "pyzeo/extension.pyx":385
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 385, __pyx_L1_error)

    /* "pyzeo/extension.pyx":384
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":379
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.writeMopacfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":394
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom___cinit__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom___cinit__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  int __pyx_r;
  ATOM *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":395
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new ATOM()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new ATOM();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":394
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Atom.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":397
 *         self.thisptr = new ATOM()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_2__init__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":400
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {

  /* "pyzeo/extension.pyx":401
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property coords:
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":400
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":404
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzeo/extension.pyx":405
 *     property coords:
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)(&PyList_Type));
  __pyx_t_3 = ((PyObject *)(&PyList_Type)); 
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_7, (4-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_coords = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":406
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":404
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.Atom.coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":407
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":411
 *             This variable is not supposed to be modified manually
 *             """
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_3 = __pyx_builtin_print; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_This_value_is_not_supposed_to_be};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":412
 *             """
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_5;

  /* "pyzeo/extension.pyx":413
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_5;

  /* "pyzeo/extension.pyx":414
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property radius:
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_5;

  /* "pyzeo/extension.pyx":407
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Atom.coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":417
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.radius             # <<<<<<<<<<<<<<
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Atom.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":418
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":419
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.radius = radius
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_3 = __pyx_builtin_print; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_This_value_is_not_supposed_to_be};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":420
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_v_self->thisptr->radius = __pyx_t_5;

  /* "pyzeo/extension.pyx":418
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Atom.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_4Atom_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Atom.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_4Atom_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.Atom.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Atom.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":430
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  int __pyx_r;
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":431
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new ATOM_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new ATOM_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 431, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":430
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":433
 *         self.thisptr = new ATOM_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":436
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {

  /* "pyzeo/extension.pyx":437
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":436
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":439
 *         del self.thisptr
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_6copy, "\n        Create a copy of the AtomNetwork instance\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_7copy = {"copy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_6copy};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("copy", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_newatmnet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyzeo/extension.pyx":443
 *         Create a copy of the AtomNetwork instance
 *         """
 *         newatmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_newatmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":444
 *         """
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)             # <<<<<<<<<<<<<<
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet
*/
  __pyx_v_self->thisptr->copy(__pyx_v_newatmnet->thisptr);

  /* "pyzeo/extension.pyx":445
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag             # <<<<<<<<<<<<<<
 *         return newatmnet
 * 
*/
  __pyx_t_5 = __pyx_v_self->rad_flag;
  __pyx_v_newatmnet->rad_flag = __pyx_t_5;

  /* "pyzeo/extension.pyx":446
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet             # <<<<<<<<<<<<<<
 * 
 *     #def relative_to_absolute(self, point):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_newatmnet);
  __pyx_r = ((PyObject *)__pyx_v_newatmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":439
 *         del self.thisptr
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newatmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":463
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_8read_from_CIF, "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CIF file.\n        Arguments:\n            filename: \n                Input CIF file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, Zeo++ default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_9read_from_CIF = {"read_from_CIF", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_8read_from_CIF};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CIF (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_rad_flag,&__pyx_mstate_global->__pyx_n_u_rad_file,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 463, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 463, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 463, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 463, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "read_from_CIF", 0) < (0)) __PYX_ERR(0, 463, __pyx_L3_error)

      /* "pyzeo/extension.pyx":464
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("read_from_CIF", 0, 1, 3, i); __PYX_ERR(0, 463, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 463, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 463, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 463, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CIF", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 463, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* "pyzeo/extension.pyx":463
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":482
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":483
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
*/
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 483, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":482
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  }

  /* "pyzeo/extension.pyx":484
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":485
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_rad_file = rad_file
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 485, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":484
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":487
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_3;

  /* "pyzeo/extension.pyx":488
 * 
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 488, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":489
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 489, __pyx_L1_error)
    __pyx_t_4 = (!__pyx_t_1);
    if (__pyx_t_4) {

      /* "pyzeo/extension.pyx":490
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
*/
      initializeRadTable();

      /* "pyzeo/extension.pyx":489
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":492
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
*/
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_3;

      /* "pyzeo/extension.pyx":493
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
*/
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":488
 * 
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  }

  /* "pyzeo/extension.pyx":495
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":496
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":497
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_t_1 = (!readCIFFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_4));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":498
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 498, __pyx_L1_error)

    /* "pyzeo/extension.pyx":497
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  }

  /* "pyzeo/extension.pyx":499
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":500
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":463
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":502
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_10read_from_ARC, "\n        Static method to create and populate the AtomNetwork with \n        atom data from a ARC file.\n        Arguments:\n            filename: \n                Input ARC file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_11read_from_ARC = {"read_from_ARC", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_10read_from_ARC};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_ARC (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_rad_flag,&__pyx_mstate_global->__pyx_n_u_rad_file,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 502, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 502, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 502, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 502, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "read_from_ARC", 0) < (0)) __PYX_ERR(0, 502, __pyx_L3_error)

      /* "pyzeo/extension.pyx":503
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=""):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("read_from_ARC", 0, 1, 3, i); __PYX_ERR(0, 502, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 502, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 502, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 502, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_ARC", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 502, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* "pyzeo/extension.pyx":502
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_ARC", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":520
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":521
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
*/
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 521, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":520
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  }

  /* "pyzeo/extension.pyx":522
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":523
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 523, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":522
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":526
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_3;

  /* "pyzeo/extension.pyx":527
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 527, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":528
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 528, __pyx_L1_error)
    __pyx_t_4 = (!__pyx_t_1);
    if (__pyx_t_4) {

      /* "pyzeo/extension.pyx":529
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
*/
      initializeRadTable();

      /* "pyzeo/extension.pyx":528
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":531
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
*/
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_3;

      /* "pyzeo/extension.pyx":532
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
*/
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":527
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  }

  /* "pyzeo/extension.pyx":534
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":535
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":536
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L1_error)
  __pyx_t_1 = (!readARCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_4));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":537
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 537, __pyx_L1_error)

    /* "pyzeo/extension.pyx":536
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  }

  /* "pyzeo/extension.pyx":538
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":539
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":502
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":541
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR, "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CSSR file.\n        Arguments:\n            filename: \n                Input CSSR file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR = {"read_from_CSSR", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CSSR (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_rad_flag,&__pyx_mstate_global->__pyx_n_u_rad_file,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 541, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 541, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 541, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 541, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "read_from_CSSR", 0) < (0)) __PYX_ERR(0, 541, __pyx_L3_error)

      /* "pyzeo/extension.pyx":542
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=""):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("read_from_CSSR", 0, 1, 3, i); __PYX_ERR(0, 541, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 541, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 541, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 541, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CSSR", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 541, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* "pyzeo/extension.pyx":541
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":559
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":560
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
*/
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 560, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":559
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  }

  /* "pyzeo/extension.pyx":561
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":562
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 562, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":561
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":566
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             #if not rad_file:
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_4 = __pyx_builtin_print; 
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_rad_flag, __pyx_v_rad_file};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":567
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 567, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":569
 *         if rad_flag:
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
*/
    initializeRadTable();

    /* "pyzeo/extension.pyx":570
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
*/
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 570, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "pyzeo/extension.pyx":571
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
*/
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_6;

      /* "pyzeo/extension.pyx":572
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
*/
      readRadTable(__pyx_v_c_rad_file);

      /* "pyzeo/extension.pyx":570
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
*/
    }

    /* "pyzeo/extension.pyx":567
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
*/
  }

  /* "pyzeo/extension.pyx":574
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":575
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
*/
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_6;

  /* "pyzeo/extension.pyx":576
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_t_7 = (!readCSSRFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_1));
  if (unlikely(__pyx_t_7)) {

    /* "pyzeo/extension.pyx":577
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 577, __pyx_L1_error)

    /* "pyzeo/extension.pyx":576
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  }

  /* "pyzeo/extension.pyx":578
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
*/
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_7;

  /* "pyzeo/extension.pyx":579
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":541
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":581
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_14read_from_V1, "\n        Static method to create and populate the AtomNetwork with \n        atom data from a V1 file.\n        Arguments:\n            filename: \n                Input V1 file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_15read_from_V1 = {"read_from_V1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_14read_from_V1};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_V1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_rad_flag,&__pyx_mstate_global->__pyx_n_u_rad_file,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 581, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 581, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 581, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 581, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "read_from_V1", 0) < (0)) __PYX_ERR(0, 581, __pyx_L3_error)

      /* "pyzeo/extension.pyx":582
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=""):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("read_from_V1", 0, 1, 3, i); __PYX_ERR(0, 581, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 581, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 581, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 581, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_True));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u__4));
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_V1", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 581, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* "pyzeo/extension.pyx":581
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":599
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":600
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
*/
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 600, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":599
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
*/
  }

  /* "pyzeo/extension.pyx":601
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":602
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 602, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":601
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":605
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_3;

  /* "pyzeo/extension.pyx":606
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 606, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":607
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 607, __pyx_L1_error)
    __pyx_t_4 = (!__pyx_t_1);
    if (__pyx_t_4) {

      /* "pyzeo/extension.pyx":608
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
*/
      initializeRadTable();

      /* "pyzeo/extension.pyx":607
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
*/
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":610
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
*/
    /*else*/ {
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":606
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
*/
  }

  /* "pyzeo/extension.pyx":612
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":613
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":614
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L1_error)
  __pyx_t_1 = (!readV1File(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_4));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":615
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 615, __pyx_L1_error)

    /* "pyzeo/extension.pyx":614
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
*/
  }

  /* "pyzeo/extension.pyx":616
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":617
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CSSR(self, filename):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet);
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":581
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":619
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR, "\n        Writes the atom data in AtomNetwork to a CSSR file.\n        Arguments:\n            filename: \n                Output CSSR file name.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR = {"write_to_CSSR", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CSSR (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 619, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_CSSR", 0) < (0)) __PYX_ERR(0, 619, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_CSSR", 1, 1, 1, i); __PYX_ERR(0, 619, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 619, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_CSSR", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":626
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":627
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 627, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":626
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":630
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":631
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  __pyx_t_1 = (!writeToCSSR(__pyx_v_c_filename, __pyx_v_self->thisptr));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":632
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CIF(self, filename):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 632, __pyx_L1_error)

    /* "pyzeo/extension.pyx":631
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":619
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":634
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_18write_to_CIF, "\n        Writes the atom data in AtomNetwork to a CIF file.\n        Arguments:\n            filename: \n                Output CIF file name.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_19write_to_CIF = {"write_to_CIF", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_18write_to_CIF};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CIF (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 634, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 634, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_CIF", 0) < (0)) __PYX_ERR(0, 634, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_CIF", 1, 1, 1, i); __PYX_ERR(0, 634, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 634, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_CIF", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":641
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":642
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 642, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":641
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":645
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":646
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  __pyx_t_1 = (!writeToCIF(__pyx_v_c_filename, __pyx_v_self->thisptr));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":647
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_V1(self, filename):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 647, __pyx_L1_error)

    /* "pyzeo/extension.pyx":646
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":634
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":649
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_20write_to_V1, "\n        Writes the atom data in AtomNetwork to a V1 file.\n        Arguments:\n            filename: \n                Output V1 file name.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_21write_to_V1 = {"write_to_V1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_20write_to_V1};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_V1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 649, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 649, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_V1", 0) < (0)) __PYX_ERR(0, 649, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_V1", 1, 1, 1, i); __PYX_ERR(0, 649, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 649, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_V1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 649, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":656
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":657
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 657, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":656
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":660
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":661
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  __pyx_t_1 = (!writeToV1(__pyx_v_c_filename, __pyx_v_self->thisptr));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":662
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 662, __pyx_L1_error)

    /* "pyzeo/extension.pyx":661
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":649
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":664
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ, "\n        Writes the atom data in AtomNetwork to an XYZ file.\n        Arguments:\n            filename: \n                Output XYZ file name.\n            supercell_flag:\n                Flag denoting whether to write 2x2x2 supercell.\n            is_duplicate_perimeter_atoms:\n                Flag denoting whether perimeter atoms need to be replicated.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ = {"write_to_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_v_is_duplicate_perimeter_atoms = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_supercell_flag,&__pyx_mstate_global->__pyx_n_u_is_duplicate_perimeter_atoms,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 664, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 664, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 664, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 664, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_XYZ", 0) < (0)) __PYX_ERR(0, 664, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, i); __PYX_ERR(0, 664, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 664, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 664, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 664, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
    __pyx_v_is_duplicate_perimeter_atoms = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 664, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag, __pyx_v_is_duplicate_perimeter_atoms);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":676
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":677
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 677, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":676
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":680
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":681
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)

  /* "pyzeo/extension.pyx":682
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_is_duplicate_perimeter_atoms); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)

  /* "pyzeo/extension.pyx":681
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
*/
  __pyx_t_5 = (!writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_1, __pyx_t_4));
  if (unlikely(__pyx_t_5)) {

    /* "pyzeo/extension.pyx":683
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_VTK(self, filename):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 683, __pyx_L1_error)

    /* "pyzeo/extension.pyx":681
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
*/
  }

  /* "pyzeo/extension.pyx":664
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":685
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_24write_to_VTK, "\n        Writes the boundary of unit cell within the AtomNetwork to a VTK file.\n        Arguments:\n            filename: \n                Output VTK file name.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_25write_to_VTK = {"write_to_VTK", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_24write_to_VTK};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_VTK (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 685, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 685, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_VTK", 0) < (0)) __PYX_ERR(0, 685, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_VTK", 1, 1, 1, i); __PYX_ERR(0, 685, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 685, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_VTK", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 685, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_VTK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_VTK", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":692
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":693
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 693, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":692
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":696
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":697
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  __pyx_t_1 = (!writeToVTK(__pyx_v_c_filename, __pyx_v_self->thisptr));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":698
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 698, __pyx_L1_error)

    /* "pyzeo/extension.pyx":697
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":685
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_VTK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":700
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC, "\n        Writes the atom data in AtomNetwork to a .mop file.\n        Arguments:\n            filename: \n                Output MOPAC file name.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC = {"write_to_MOPAC", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_MOPAC (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_supercell_flag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 700, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_MOPAC", 0) < (0)) __PYX_ERR(0, 700, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, i); __PYX_ERR(0, 700, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 700, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 700, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_MOPAC", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":707
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":708
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 708, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":707
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":710
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":711
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L1_error)
  __pyx_t_4 = (!writeToMOPAC(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_1));
  if (unlikely(__pyx_t_4)) {

    /* "pyzeo/extension.pyx":712
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def loadMass(self):
*/
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(0, 712, __pyx_L1_error)

    /* "pyzeo/extension.pyx":711
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
*/
  }

  /* "pyzeo/extension.pyx":700
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":714
 *              raise IOError
 * 
 *     def loadMass(self):             # <<<<<<<<<<<<<<
 *         """
 *         Load atomic masses from masses table and assign to AtomNetwork
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_29loadMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_28loadMass, "\n        Load atomic masses from masses table and assign to AtomNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_29loadMass = {"loadMass", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_29loadMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_28loadMass};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_29loadMass(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadMass (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("loadMass", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("loadMass", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_28loadMass(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_28loadMass(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadMass", 0);

  /* "pyzeo/extension.pyx":718
 *         Load atomic masses from masses table and assign to AtomNetwork
 *         """
 *         zeo_loadMass(True, self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def calculate_free_sphere_parameters(self, filename):
*/
  loadMass(Py_True, __pyx_v_self->thisptr);

  /* "pyzeo/extension.pyx":714
 *              raise IOError
 * 
 *     def loadMass(self):             # <<<<<<<<<<<<<<
 *         """
 *         Load atomic masses from masses table and assign to AtomNetwork
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":720
 *         zeo_loadMass(True, self.thisptr)
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters, "\n        Computes the diameters of the largest included sphere, free sphere \n        and included sphere along free sphere path. \n        Arguments:\n            filename:\n                Name of file where the diameters are stored.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters = {"calculate_free_sphere_parameters", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 720, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 720, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "calculate_free_sphere_parameters", 0) < (0)) __PYX_ERR(0, 720, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("calculate_free_sphere_parameters", 1, 1, 1, i); __PYX_ERR(0, 720, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 720, __pyx_L3_error)
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate_free_sphere_parameters", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 720, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.calculate_free_sphere_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_edge_centers = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_face_centers = NULL;
  char *__pyx_v_c_fname;
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  char *__pyx_t_9;
  VORONOI_NETWORK *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":728
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":729
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 729, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":728
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":731
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
*/
  __pyx_t_3 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 731, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_6);
    } else {
      __pyx_t_3 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_6);
    }
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
    index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < (0)) __PYX_ERR(0, 731, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 731, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_edge_centers = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_face_centers = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pyzeo/extension.pyx":732
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
 *         cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
*/
  __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 732, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_9;

  /* "pyzeo/extension.pyx":733
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_t_10 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_10;

  /* "pyzeo/extension.pyx":734
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)             # <<<<<<<<<<<<<<
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,
*/
  calculateFreeSphereParameters(__pyx_v_vornet_ptr, __pyx_v_c_fname, 0);

  /* "pyzeo/extension.pyx":720
 *         zeo_loadMass(True, self.thisptr)
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.calculate_free_sphere_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition, "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n            return\n        Returns:\n            Instance of VoronoiNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition = {"perform_voronoi_decomposition", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_saveVorCells = 0;
  PyObject *__pyx_v_returnbvcells = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_saveVorCells,&__pyx_mstate_global->__pyx_n_u_returnbvcells,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 736, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 736, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 736, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "perform_voronoi_decomposition", 0) < (0)) __PYX_ERR(0, 736, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_True));

      /* "pyzeo/extension.pyx":737
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,
 *                                      returnbvcells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_False));
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 736, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 736, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }

      /* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_True));

      /* "pyzeo/extension.pyx":737
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,
 *                                      returnbvcells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_False));
    }
    __pyx_v_saveVorCells = values[0];
    __pyx_v_returnbvcells = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 736, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_saveVorCells, __pyx_v_returnbvcells);

  /* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyzeo/extension.pyx":771
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
*/

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__genexpr(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 771, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition_lo, __pyx_mstate_global->__pyx_n_u_pyzeo_extension); if (unlikely(!gen)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *__pyx_cur_scope = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 771, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 771, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 771, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 771, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 771, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyLong_TrueDivideObjC(__pyx_cur_scope->__pyx_v_x, __pyx_mstate_global->__pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 771, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells, PyObject *__pyx_v_returnbvcells) {
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet = NULL;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_v_edge_centers = NULL;
  std::vector<VOR_EDGE>  __pyx_v_vedges;
  std::vector<VOR_NODE>  __pyx_v_vnodes;
  std::vector<VOR_CELL> ::size_type __pyx_v_i;
  int __pyx_v_edge_orig;
  int __pyx_v_edge_end;
  VOR_NODE __pyx_v_o_vnode;
  VOR_NODE __pyx_v_e_vnode;
  PyObject *__pyx_v_edge_center = NULL;
  PyObject *__pyx_v_face_centers = NULL;
  std::vector<VOR_FACE>  __pyx_v_vfaces;
  std::vector<Point>  __pyx_v_vertices;
  CYTHON_UNUSED Point *__pyx_v_cpoint_ptr;
  std::vector<int>  __pyx_v_node_ids;
  PyObject *__pyx_v_face_node_ids = NULL;
  std::vector<VOR_FACE> ::size_type __pyx_v_j;
  PyObject *__pyx_v_node_id_list = NULL;
  std::vector<Point> ::size_type __pyx_v_k;
  PyObject *__pyx_v_node_id_set = NULL;
  struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_centroid = NULL;
  PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_center = NULL;
  PyObject *__pyx_v_cntr = NULL;
  PyObject *__pyx_v_bvcelllist = NULL;
  struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_basicvcell = NULL;
  PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  std::vector<VOR_EDGE>  __pyx_t_7;
  std::vector<VOR_NODE>  __pyx_t_8;
  std::vector<VOR_EDGE> ::size_type __pyx_t_9;
  std::vector<VOR_EDGE> ::size_type __pyx_t_10;
  std::vector<VOR_CELL> ::size_type __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  std::vector<VOR_CELL> ::size_type __pyx_t_15;
  std::vector<VOR_CELL> ::size_type __pyx_t_16;
  std::vector<VOR_FACE>  __pyx_t_17;
  std::vector<VOR_FACE> ::size_type __pyx_t_18;
  std::vector<VOR_FACE> ::size_type __pyx_t_19;
  std::vector<VOR_FACE> ::size_type __pyx_t_20;
  std::vector<int>  __pyx_t_21;
  std::vector<int> ::size_type __pyx_t_22;
  std::vector<int> ::size_type __pyx_t_23;
  std::vector<Point> ::size_type __pyx_t_24;
  Point *__pyx_t_25;
  std::vector<Point>  __pyx_t_26;
  std::vector<Point> ::size_type __pyx_t_27;
  std::vector<Point> ::size_type __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  PyObject *__pyx_t_30 = NULL;
  std::vector<BASIC_VCELL> ::size_type __pyx_t_31;
  std::vector<BASIC_VCELL> ::size_type __pyx_t_32;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);

  /* "pyzeo/extension.pyx":750
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":755
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             raise ValueError # Change it to appropriate error
 *         cdef int N
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)

  /* "pyzeo/extension.pyx":754
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
*/
  __pyx_t_6 = (!performVoronoiDecomp(__pyx_v_self->rad_flag, __pyx_v_self->thisptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_5, (&__pyx_v_bvcells)));
  if (unlikely(__pyx_t_6)) {

    /* "pyzeo/extension.pyx":756
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error             # <<<<<<<<<<<<<<
 *         cdef int N
 * 
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 756, __pyx_L1_error)

    /* "pyzeo/extension.pyx":754
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
*/
  }

  /* "pyzeo/extension.pyx":760
 * 
 *         # Get the edge centers
 *         edge_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edge_centers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":761
 *         # Get the edge centers
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
*/
  __pyx_t_7 = __pyx_v_vornet->thisptr->edges;
  __pyx_v_vedges = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "pyzeo/extension.pyx":762
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes             # <<<<<<<<<<<<<<
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
*/
  __pyx_t_8 = __pyx_v_vornet->thisptr->nodes;
  __pyx_v_vnodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "pyzeo/extension.pyx":763
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):             # <<<<<<<<<<<<<<
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
*/
  __pyx_t_9 = __pyx_v_vedges.size();
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "pyzeo/extension.pyx":764
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin             # <<<<<<<<<<<<<<
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
*/
    __pyx_t_12 = (__pyx_v_vedges[__pyx_v_i]).from;
    __pyx_v_edge_orig = __pyx_t_12;

    /* "pyzeo/extension.pyx":765
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending             # <<<<<<<<<<<<<<
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
*/
    __pyx_t_12 = (__pyx_v_vedges[__pyx_v_i]).to;
    __pyx_v_edge_end = __pyx_t_12;

    /* "pyzeo/extension.pyx":766
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]             # <<<<<<<<<<<<<<
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
*/
    __pyx_v_o_vnode = (__pyx_v_vnodes[__pyx_v_edge_orig]);

    /* "pyzeo/extension.pyx":767
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]             # <<<<<<<<<<<<<<
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
*/
    __pyx_v_e_vnode = (__pyx_v_vnodes[__pyx_v_edge_end]);

    /* "pyzeo/extension.pyx":768
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
*/
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_o_vnode.x + __pyx_v_e_vnode.x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "pyzeo/extension.pyx":769
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \             # <<<<<<<<<<<<<<
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
*/
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_o_vnode.y + __pyx_v_e_vnode.y)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyzeo/extension.pyx":770
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)             # <<<<<<<<<<<<<<
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
*/
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_o_vnode.z + __pyx_v_e_vnode.z)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "pyzeo/extension.pyx":768
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
*/
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 768, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_3) != (0)) __PYX_ERR(0, 768, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_2) != (0)) __PYX_ERR(0, 768, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_edge_center, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "pyzeo/extension.pyx":771
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
*/
    __pyx_t_13 = __pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(NULL, __pyx_v_edge_center); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_edge_center, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":772
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
*/
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_edge_center, __pyx_v_edge_centers, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 772, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "pyzeo/extension.pyx":773
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_edge_centers, __pyx_v_edge_center); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 773, __pyx_L1_error)

      /* "pyzeo/extension.pyx":772
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
*/
    }
  }

  /* "pyzeo/extension.pyx":778
 * 
 *         # Get the vorcells and obtain the face centers
 *         face_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_FACE] vfaces
 *         cdef vector[CPoint] vertices
*/
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_face_centers = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":784
 *         #cdef map[int, int] id_maps
 *         cdef vector[int] node_ids
 *         face_node_ids = set()             # <<<<<<<<<<<<<<
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
*/
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_face_node_ids = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":785
 *         cdef vector[int] node_ids
 *         face_node_ids = set()
 *         for i in range(vcells.size()):             # <<<<<<<<<<<<<<
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
*/
  __pyx_t_11 = __pyx_v_vcells.size();
  __pyx_t_15 = __pyx_t_11;
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
    __pyx_v_i = __pyx_t_16;

    /* "pyzeo/extension.pyx":786
 *         face_node_ids = set()
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces             # <<<<<<<<<<<<<<
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
*/
    __pyx_t_17 = (__pyx_v_vcells[__pyx_v_i]).faces;
    __pyx_v_vfaces = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

    /* "pyzeo/extension.pyx":787
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):             # <<<<<<<<<<<<<<
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
*/
    __pyx_t_18 = __pyx_v_vfaces.size();
    __pyx_t_19 = __pyx_t_18;
    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
      __pyx_v_j = __pyx_t_20;

      /* "pyzeo/extension.pyx":788
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids             # <<<<<<<<<<<<<<
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
*/
      __pyx_t_21 = (__pyx_v_vfaces[__pyx_v_j]).nodeIDs;
      __pyx_v_node_ids = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_21);

      /* "pyzeo/extension.pyx":789
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []             # <<<<<<<<<<<<<<
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_node_id_list, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pyzeo/extension.pyx":790
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):             # <<<<<<<<<<<<<<
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
*/
      __pyx_t_22 = __pyx_v_node_ids.size();
      __pyx_t_23 = __pyx_t_22;
      for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
        __pyx_v_k = __pyx_t_24;

        /* "pyzeo/extension.pyx":791
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])             # <<<<<<<<<<<<<<
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
*/
        __pyx_t_2 = __Pyx_PyLong_From_int((__pyx_v_node_ids[__pyx_v_k])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_node_id_list, __pyx_t_2); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "pyzeo/extension.pyx":792
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)             # <<<<<<<<<<<<<<
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
*/
      __pyx_t_2 = __Pyx_PyFrozenSet_New(__pyx_v_node_id_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_node_id_set, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pyzeo/extension.pyx":793
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
*/
      __pyx_t_6 = (__Pyx_PySet_ContainsTF(__pyx_v_node_id_set, __pyx_v_face_node_ids, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 793, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "pyzeo/extension.pyx":794
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)             # <<<<<<<<<<<<<<
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
*/
        __pyx_t_14 = PySet_Add(__pyx_v_face_node_ids, __pyx_v_node_id_set); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 794, __pyx_L1_error)

        /* "pyzeo/extension.pyx":795
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()             # <<<<<<<<<<<<<<
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
*/
        __pyx_t_13 = NULL;
        __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Point);
        __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Point); 
        __pyx_t_4 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF((PyObject *)__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_centroid, ((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyzeo/extension.pyx":796
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr             # <<<<<<<<<<<<<<
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
*/
        if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Point)))) __PYX_ERR(0, 796, __pyx_L1_error)
        __pyx_t_25 = __pyx_v_centroid->thisptr;
        __pyx_v_cpoint_ptr = __pyx_t_25;

        /* "pyzeo/extension.pyx":797
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices             # <<<<<<<<<<<<<<
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
*/
        __pyx_t_26 = (__pyx_v_vfaces[__pyx_v_j]).orderedVertices;
        __pyx_v_vertices = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_26);

        /* "pyzeo/extension.pyx":798
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):             # <<<<<<<<<<<<<<
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
*/
        __pyx_t_24 = __pyx_v_vertices.size();
        __pyx_t_27 = __pyx_t_24;
        for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_27; __pyx_t_28+=1) {
          __pyx_v_k = __pyx_t_28;

          /* "pyzeo/extension.pyx":799
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]             # <<<<<<<<<<<<<<
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
*/
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_x, __pyx_t_13) < (0)) __PYX_ERR(0, 799, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pyzeo/extension.pyx":800
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]             # <<<<<<<<<<<<<<
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
*/
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyNumber_Add(__pyx_t_13, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_y, __pyx_t_2) < (0)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "pyzeo/extension.pyx":801
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]             # <<<<<<<<<<<<<<
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
*/
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 801, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_z, __pyx_t_13) < (0)) __PYX_ERR(0, 801, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }

        /* "pyzeo/extension.pyx":802
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
*/
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_3 = __Pyx_PyLong_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_13, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_x, __pyx_t_2) < (0)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyzeo/extension.pyx":803
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)
*/
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyLong_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_y, __pyx_t_13) < (0)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "pyzeo/extension.pyx":804
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()             # <<<<<<<<<<<<<<
 *                     face_centers.append(centroid)
 * 
*/
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_z); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_3 = __Pyx_PyLong_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_13, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_mstate_global->__pyx_n_u_z, __pyx_t_2) < (0)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyzeo/extension.pyx":805
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)             # <<<<<<<<<<<<<<
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
*/
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_face_centers, ((PyObject *)__pyx_v_centroid)); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 805, __pyx_L1_error)

        /* "pyzeo/extension.pyx":793
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
*/
      }
    }
  }

  /* "pyzeo/extension.pyx":808
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []             # <<<<<<<<<<<<<<
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
*/
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_fcs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":809
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
*/
  __pyx_t_2 = __pyx_v_face_centers; __Pyx_INCREF(__pyx_t_2);
  __pyx_t_29 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 809, __pyx_L1_error)
      #endif
      if (__pyx_t_29 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_29);
    ++__pyx_t_29;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_center, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":810
 *         fcs = []
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)             # <<<<<<<<<<<<<<
 *             fcs.append(cntr)
 * 
*/
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_mstate_global->__pyx_n_u_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_30 = PyTuple_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_30);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_30, 0, __pyx_t_3) != (0)) __PYX_ERR(0, 810, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_13);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_30, 1, __pyx_t_13) != (0)) __PYX_ERR(0, 810, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_30, 2, __pyx_t_1) != (0)) __PYX_ERR(0, 810, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_13 = 0;
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cntr, ((PyObject*)__pyx_t_30));
    __pyx_t_30 = 0;

    /* "pyzeo/extension.pyx":811
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)             # <<<<<<<<<<<<<<
 * 
 *         #bvcelllist = []
*/
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_fcs, __pyx_v_cntr); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 811, __pyx_L1_error)

    /* "pyzeo/extension.pyx":809
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":826
 *             #bvcelllist.append(bvcells[i])
 * 
 *         if returnbvcells:             # <<<<<<<<<<<<<<
 * 
 *             # Create BasicVCell list from bvcells vector
*/
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_returnbvcells); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 826, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "pyzeo/extension.pyx":829
 * 
 *             # Create BasicVCell list from bvcells vector
 *             bvcelllist = []             # <<<<<<<<<<<<<<
 *             for i in range(bvcells.size()):
 *                 basicvcell = BasicVCell()
*/
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_bvcelllist = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":830
 *             # Create BasicVCell list from bvcells vector
 *             bvcelllist = []
 *             for i in range(bvcells.size()):             # <<<<<<<<<<<<<<
 *                 basicvcell = BasicVCell()
 *                 # Copy the C++ BASIC_VCELL data
*/
    __pyx_t_31 = __pyx_v_bvcells.size();
    __pyx_t_32 = __pyx_t_31;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_32; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "pyzeo/extension.pyx":831
 *             bvcelllist = []
 *             for i in range(bvcells.size()):
 *                 basicvcell = BasicVCell()             # <<<<<<<<<<<<<<
 *                 # Copy the C++ BASIC_VCELL data
 *                 basicvcell.thisptr[0] = bvcells[i]
*/
      __pyx_t_30 = NULL;
      __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell);
      __pyx_t_1 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell); 
      __pyx_t_4 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_30, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
        __Pyx_GOTREF((PyObject *)__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_basicvcell, ((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pyzeo/extension.pyx":833
 *                 basicvcell = BasicVCell()
 *                 # Copy the C++ BASIC_VCELL data
 *                 basicvcell.thisptr[0] = bvcells[i]             # <<<<<<<<<<<<<<
 *                 bvcelllist.append(basicvcell)
 * 
*/
      (__pyx_v_basicvcell->thisptr[0]) = (__pyx_v_bvcells[__pyx_v_i]);

      /* "pyzeo/extension.pyx":834
 *                 # Copy the C++ BASIC_VCELL data
 *                 basicvcell.thisptr[0] = bvcells[i]
 *                 bvcelllist.append(basicvcell)             # <<<<<<<<<<<<<<
 * 
 *             return vornet, edge_centers, fcs, bvcelllist
*/
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_bvcelllist, ((PyObject *)__pyx_v_basicvcell)); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 834, __pyx_L1_error)
    }

    /* "pyzeo/extension.pyx":836
 *                 bvcelllist.append(basicvcell)
 * 
 *             return vornet, edge_centers, fcs, bvcelllist             # <<<<<<<<<<<<<<
 * 
 *         else:
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF((PyObject *)__pyx_v_vornet);
    __Pyx_GIVEREF((PyObject *)__pyx_v_vornet);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vornet)) != (0)) __PYX_ERR(0, 836, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_edge_centers);
    __Pyx_GIVEREF(__pyx_v_edge_centers);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_edge_centers) != (0)) __PYX_ERR(0, 836, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_fcs);
    __Pyx_GIVEREF(__pyx_v_fcs);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_fcs) != (0)) __PYX_ERR(0, 836, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_bvcelllist);
    __Pyx_GIVEREF(__pyx_v_bvcelllist);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_bvcelllist) != (0)) __PYX_ERR(0, 836, __pyx_L1_error);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzeo/extension.pyx":826
 *             #bvcelllist.append(bvcells[i])
 * 
 *         if returnbvcells:             # <<<<<<<<<<<<<<
 * 
 *             # Create BasicVCell list from bvcells vector
*/
  }

  /* "pyzeo/extension.pyx":840
 *         else:
 * 
 *             return vornet, edge_centers, fcs             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF((PyObject *)__pyx_v_vornet);
    __Pyx_GIVEREF((PyObject *)__pyx_v_vornet);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vornet)) != (0)) __PYX_ERR(0, 840, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_edge_centers);
    __Pyx_GIVEREF(__pyx_v_edge_centers);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_edge_centers) != (0)) __PYX_ERR(0, 840, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_fcs);
    __Pyx_GIVEREF(__pyx_v_fcs);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_fcs) != (0)) __PYX_ERR(0, 840, __pyx_L1_error);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_edge_center);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_face_node_ids);
  __Pyx_XDECREF(__pyx_v_node_id_list);
  __Pyx_XDECREF(__pyx_v_node_id_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_centroid);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_center);
  __Pyx_XDECREF(__pyx_v_cntr);
  __Pyx_XDECREF(__pyx_v_bvcelllist);
  __Pyx_XDECREF((PyObject *)__pyx_v_basicvcell);
  __Pyx_XDECREF(__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_34__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_36__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":847
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  int __pyx_r;
  VOR_NODE *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":848
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new VOR_NODE()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new VOR_NODE();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 848, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":847
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":850
 *         self.thisptr = new VOR_NODE()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":853
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {

  /* "pyzeo/extension.pyx":854
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property coords:
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":853
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":857
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzeo/extension.pyx":858
 *     property coords:
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)(&PyList_Type));
  __pyx_t_3 = ((PyObject *)(&PyList_Type)); 
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_7, (4-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_coords = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":859
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":857
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":860
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":864
 *             This variable is not supposed to be modified manually
 *             """
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_3 = __pyx_builtin_print; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_This_value_is_not_supposed_to_be};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":865
 *             """
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_5;

  /* "pyzeo/extension.pyx":866
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_5;

  /* "pyzeo/extension.pyx":867
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property radius:
*/
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_5;

  /* "pyzeo/extension.pyx":860
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":870
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere             # <<<<<<<<<<<<<<
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->rad_stat_sphere); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":871
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_rad));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":872
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.rad_stat_sphere = rad
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_3 = __pyx_builtin_print; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_This_value_is_not_supposed_to_be};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":873
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad             # <<<<<<<<<<<<<<
 * 
 * cdef class VoronoiNetwork:
*/
  __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_v_rad); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)
  __pyx_v_self->thisptr->rad_stat_sphere = __pyx_t_5;

  /* "pyzeo/extension.pyx":871
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":883
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;
  VORONOI_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":884
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new VORONOI_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new VORONOI_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 884, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":883
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":886
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":889
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {

  /* "pyzeo/extension.pyx":890
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":889
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":892
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_7size = {"size", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("size", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("size", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pyzeo/extension.pyx":893
 * 
 *     def size(self):
 *         return self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 * 
 *     def prune(self, radius):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":892
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":895
 *         return self.thisptr.nodes.size()
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_14VoronoiNetwork_8prune, "\n        Removes the edges that do not allow a sphere to pass.\n        Arguments:\n            radius:\n                Radius of the sphere\n        Returns:\n            Instance of VoronoiNetwork with edges pruned.\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_9prune = {"prune", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_8prune};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_radius = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_radius,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 895, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 895, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "prune", 0) < (0)) __PYX_ERR(0, 895, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("prune", 1, 1, 1, i); __PYX_ERR(0, 895, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 895, __pyx_L3_error)
    }
    __pyx_v_radius = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 895, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v_radius);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius) {
  VORONOI_NETWORK __pyx_v_newcvornet;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_newvornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune", 0);

  /* "pyzeo/extension.pyx":904
 *             Instance of VoronoiNetwork with edges pruned.
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)             # <<<<<<<<<<<<<<
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
*/
  __pyx_t_1 = __Pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 904, __pyx_L1_error)
  __pyx_v_newcvornet = __pyx_v_self->thisptr->prune(__pyx_t_1);

  /* "pyzeo/extension.pyx":905
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         newvornet.thisptr = &newcvornet
 *         return newvornet
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_newvornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":906
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet             # <<<<<<<<<<<<<<
 *         return newvornet
 * 
*/
  __pyx_v_newvornet->thisptr = (&__pyx_v_newcvornet);

  /* "pyzeo/extension.pyx":907
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
 *         return newvornet             # <<<<<<<<<<<<<<
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_newvornet);
  __pyx_r = ((PyObject *)__pyx_v_newvornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":895
 *         return self.thisptr.nodes.size()
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newvornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":909
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ, "\n        Create diagrams of 1) Voronoi network and 2) accessible Voronoi \n        network, and write the diagrams in VTK files and the Voronoi \n        networks in XYZ files. Useful for visualizing the Voronoi network.\n        Args:\n            name:\n                Name to be used for output files.\n            probeRad:\n                Radius of the probe.\n            atmnet:\n                pyzeo.extension.AtomNetwork\n            shift_x (default=0):\n                Shift the accessible Voronoi network along x-axis\n            shift_y (default=0):\n                Shift the accessible Voronoi network along y-axis\n            shift_z (default=0):\n                Shift the accessible Voronoi network along z-axis\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ = {"analyze_writeto_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  double __pyx_v_probeRad;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_v_shift_x;
  int __pyx_v_shift_y;
  int __pyx_v_shift_z;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_name,&__pyx_mstate_global->__pyx_n_u_probeRad,&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_shift_x,&__pyx_mstate_global->__pyx_n_u_shift_y,&__pyx_mstate_global->__pyx_n_u_shift_z,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 909, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "analyze_writeto_XYZ", 0) < (0)) __PYX_ERR(0, 909, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, i); __PYX_ERR(0, 909, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 909, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 909, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 909, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 909, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_probeRad = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_probeRad == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L3_error)
    __pyx_v_atmnet = values[2];
    if (values[3]) {
      __pyx_v_shift_x = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_shift_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L3_error)
    } else {
      __pyx_v_shift_x = ((int)0);
    }
    if (values[4]) {
      __pyx_v_shift_y = __Pyx_PyLong_As_int(values[4]); if (unlikely((__pyx_v_shift_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L3_error)
    } else {
      __pyx_v_shift_y = ((int)0);
    }
    if (values[5]) {
      __pyx_v_shift_z = __Pyx_PyLong_As_int(values[5]); if (unlikely((__pyx_v_shift_z == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L3_error)
    } else {
      __pyx_v_shift_z = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, __pyx_nargs); __PYX_ERR(0, 909, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v_name, __pyx_v_probeRad, __pyx_v_atmnet, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  CYTHON_UNUSED char *__pyx_v_cname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  ATOM_NETWORK *__pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ", 0);
  __Pyx_INCREF(__pyx_v_name);

  /* "pyzeo/extension.pyx":929
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_name); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":930
 *         """
 *         if isinstance(name, unicode):
 *             name = (<unicode>name).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
*/
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 930, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_name)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":929
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":932
 *             name = (<unicode>name).encode('utf8')
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_3;

  /* "pyzeo/extension.pyx":933
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name             # <<<<<<<<<<<<<<
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)
*/
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L1_error)
  __pyx_v_cname = __pyx_t_4;

  /* "pyzeo/extension.pyx":934
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,             # <<<<<<<<<<<<<<
 *                 c_atmnetptr)
 * 
*/
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)

  /* "pyzeo/extension.pyx":935
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):
*/
  visVoro(__pyx_t_4, __pyx_v_probeRad, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z, __pyx_v_self->thisptr, __pyx_v_c_atmnetptr);

  /* "pyzeo/extension.pyx":909
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":937
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ, "\n        Write only voronoi node information to XYZ file.\n        Args:\n            filename:\n                string\n                Name of file to which voronoi node info is written.\n            cutoff_radius:\n                float\n                Threshold radius (default=0)\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ = {"write_to_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  double __pyx_v_cutoff_radius;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,&__pyx_mstate_global->__pyx_n_u_cutoff_radius,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 937, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 937, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 937, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "write_to_XYZ", 0) < (0)) __PYX_ERR(0, 937, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 0, 1, 2, i); __PYX_ERR(0, 937, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 937, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 937, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    if (values[1]) {
      __pyx_v_cutoff_radius = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_cutoff_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L3_error)
    } else {
      __pyx_v_cutoff_radius = ((double)0.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 937, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_cutoff_radius);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":948
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":949
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
*/
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 949, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":948
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
*/
  }

  /* "pyzeo/extension.pyx":951
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
*/
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_3;

  /* "pyzeo/extension.pyx":952
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
*/
  __pyx_t_1 = (!writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_v_cutoff_radius));
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":954
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
 *             raise ValueError             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 954, __pyx_L1_error)

    /* "pyzeo/extension.pyx":952
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
*/
  }

  /* "pyzeo/extension.pyx":937
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":956
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition, "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n        Returns:\n            Instance of VoronoiNetwork\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition = {"perform_voronoi_decomposition", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_saveVorCells = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_saveVorCells,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 956, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "perform_voronoi_decomposition", 0) < (0)) __PYX_ERR(0, 956, __pyx_L3_error)

      /* "pyzeo/extension.pyx":957
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
*/
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_False));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 1, 2, i); __PYX_ERR(0, 956, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 956, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_False));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_saveVorCells = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 956, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(((PyTypeObject*)__pyx_v_cls), __pyx_v_atmnet, __pyx_v_saveVorCells);

  /* "pyzeo/extension.pyx":956
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells) {
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);

  /* "pyzeo/extension.pyx":969
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef vector[VOR_CELL] vcells
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":970
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 970, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_5;

  /* "pyzeo/extension.pyx":974
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_mstate_global->__pyx_n_u_rad_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":975
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             raise ValueError # Change it to appropriate error
 *         #cdef int N
*/
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)

  /* "pyzeo/extension.pyx":974
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
*/
  __pyx_t_8 = (!performVoronoiDecomp(__pyx_t_6, __pyx_v_c_atmnetptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_7, (&__pyx_v_bvcells)));
  if (unlikely(__pyx_t_8)) {

    /* "pyzeo/extension.pyx":976
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error             # <<<<<<<<<<<<<<
 *         #cdef int N
 *         #vorcelllist = []
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 976, __pyx_L1_error)

    /* "pyzeo/extension.pyx":974
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
*/
  }

  /* "pyzeo/extension.pyx":991
 *             #basicvcell.thisptr = &(bvcells[i])
 *             #bvcelllist.append(bvcells[i])
 *         return vornet             # <<<<<<<<<<<<<<
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_vornet);
  __pyx_r = ((PyObject *)__pyx_v_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":956
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":993
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_53substitute_atoms(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_52substitute_atoms, "\n    Attempt to substitute every other Si atom with Al atom.\n    AtomNetwork may only consist of Si and O atoms, where each Si atom \n    must be bonded to exactly 4 oxygen atoms and each oxygen atom must \n    be bonded to exactly 2 Si atoms. Raises exception if the substitution\n    is not successful. \n    Args:\n        atmnet:\n            pyzeo.netstorage.AtomNetwork\n        substiuteSeed:\n            Boolean flag to specify whether the seeded Si atom is \n            substituted or not. Since only 2 configurations are possible \n            if the structure is consistent, changing this parameter enables \n            generation of all configurations. \n        radialFlag:\n            Boolean flag to specify whether atomic sizes are to be used.\n    Returns:\n        If successful, returns AtomNetwork instance with Si replaced with Al\n        and the number of substitutions. \n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_53substitute_atoms = {"substitute_atoms", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_53substitute_atoms, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_52substitute_atoms};
static PyObject *__pyx_pw_5pyzeo_9extension_53substitute_atoms(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_substituteSeed = 0;
  PyObject *__pyx_v_radialFlag = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("substitute_atoms (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_substituteSeed,&__pyx_mstate_global->__pyx_n_u_radialFlag,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 993, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 993, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 993, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 993, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "substitute_atoms", 0) < (0)) __PYX_ERR(0, 993, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, i); __PYX_ERR(0, 993, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 993, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 993, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 993, __pyx_L3_error)
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_substituteSeed = values[1];
    __pyx_v_radialFlag = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 993, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_52substitute_atoms(__pyx_self, __pyx_v_atmnet, __pyx_v_substituteSeed, __pyx_v_radialFlag);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_52substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag) {
  int __pyx_v_substitutionNo[1];
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet_copy = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  int __pyx_v_subNo;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("substitute_atoms", 0);

  /* "pyzeo/extension.pyx":1015
 *     """
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()             # <<<<<<<<<<<<<<
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_atmnet_copy = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1016
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1016, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_5;

  /* "pyzeo/extension.pyx":1017
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
*/
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_substituteSeed); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1018
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):             # <<<<<<<<<<<<<<
 *         raise ValueError
 *     subNo = substitutionNo[0]
*/
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_radialFlag); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1017
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
*/
  __pyx_t_8 = (!substituteAtoms(__pyx_v_c_atmnet_ptr, __pyx_v_atmnet_copy->thisptr, __pyx_t_6, __pyx_v_substitutionNo, __pyx_t_7));
  if (unlikely(__pyx_t_8)) {

    /* "pyzeo/extension.pyx":1019
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
 *         raise ValueError             # <<<<<<<<<<<<<<
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 1019, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1017
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
*/
  }

  /* "pyzeo/extension.pyx":1020
 *             substitutionNo, radialFlag):
 *         raise ValueError
 *     subNo = substitutionNo[0]             # <<<<<<<<<<<<<<
 *     return atmnet_copy, subNo
 * 
*/
  __pyx_v_subNo = (__pyx_v_substitutionNo[0]);

  /* "pyzeo/extension.pyx":1021
 *         raise ValueError
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_subNo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_atmnet_copy);
  __Pyx_GIVEREF((PyObject *)__pyx_v_atmnet_copy);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_atmnet_copy)) != (0)) __PYX_ERR(0, 1021, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 1021, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":993
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1030
 *     """
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {
  int __pyx_r;
  DIJKSTRA_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":1031
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def from_VoronoiNetwork(vornet):
*/
  try {
    __pyx_t_1 = new DIJKSTRA_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1031, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1030
 *     """
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1032
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_VoronoiNetwork(vornet):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork(PyObject *__pyx_v_vornet, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork, "\n        Build Dijkstra Net from input Voronoi Net\n        ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork = {"from_VoronoiNetwork", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork};
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork(PyObject *__pyx_v_vornet, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_VoronoiNetwork (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("from_VoronoiNetwork", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("from_VoronoiNetwork", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(((PyTypeObject*)__pyx_v_vornet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(PyTypeObject *__pyx_v_vornet) {
  struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_dijkstranet = NULL;
  VORONOI_NETWORK *__pyx_v_c_vornet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  VORONOI_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_VoronoiNetwork", 0);

  /* "pyzeo/extension.pyx":1037
 *         Build Dijkstra Net from input Voronoi Net
 *         """
 *         dijkstranet = DijkstraNetwork()             # <<<<<<<<<<<<<<
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_dijkstranet = ((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1038
 *         """
 *         dijkstranet = DijkstraNetwork()
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
*/
  if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_vornet), __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1038, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet = __pyx_t_5;

  /* "pyzeo/extension.pyx":1039
 *         dijkstranet = DijkstraNetwork()
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)             # <<<<<<<<<<<<<<
 *         return dijkstranet
 *     def __dealloc__(self):
*/
  DIJKSTRA_NETWORK::buildDijkstraNetwork(__pyx_v_c_vornet, __pyx_v_dijkstranet->thisptr);

  /* "pyzeo/extension.pyx":1040
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_dijkstranet);
  __pyx_r = ((PyObject *)__pyx_v_dijkstranet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1032
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_VoronoiNetwork(vornet):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.from_VoronoiNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dijkstranet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1041
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {

  /* "pyzeo/extension.pyx":1042
 *         return dijkstranet
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":1041
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1059
 * cdef class VorCell:
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_CELL()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  int __pyx_r;
  VOR_CELL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":1060
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):
 *         self.thisptr = new VOR_CELL()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new VOR_CELL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1060, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1059
 * cdef class VorCell:
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_CELL()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1062
 *         self.thisptr = new VOR_CELL()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7VorCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7VorCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1065
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {

  /* "pyzeo/extension.pyx":1066
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class BasicVCell:
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":1065
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7VorCell_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7VorCell_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1070
 * cdef class BasicVCell:
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new BASIC_VCELL()
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__cinit__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  int __pyx_r;
  BASIC_VCELL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "pyzeo/extension.pyx":1071
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):
 *         self.thisptr = new BASIC_VCELL()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
*/
  try {
    __pyx_t_1 = new BASIC_VCELL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1071, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1070
 * cdef class BasicVCell:
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new BASIC_VCELL()
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1073
 *         self.thisptr = new BASIC_VCELL()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return -1;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__init__", __pyx_kwds); return -1;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1076
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {

  /* "pyzeo/extension.pyx":1077
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def get_num_nodes(self):
*/
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":1076
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
*/

  /* function exit code */
}

/* "pyzeo/extension.pyx":1079
 *         del self.thisptr
 * 
 *     def get_num_nodes(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of nodes in this Voronoi cell."""
 *         return self.thisptr.getNumNodes()
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_7get_num_nodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_10BasicVCell_6get_num_nodes, "Returns the number of nodes in this Voronoi cell.");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_10BasicVCell_7get_num_nodes = {"get_num_nodes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_7get_num_nodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_6get_num_nodes};
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_7get_num_nodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_nodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_num_nodes", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_num_nodes", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_6get_num_nodes(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_6get_num_nodes(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_num_nodes", 0);

  /* "pyzeo/extension.pyx":1081
 *     def get_num_nodes(self):
 *         """Returns the number of nodes in this Voronoi cell."""
 *         return self.thisptr.getNumNodes()             # <<<<<<<<<<<<<<
 * 
 *     def get_node_coord(self, int index):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->thisptr->getNumNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1079
 *         del self.thisptr
 * 
 *     def get_num_nodes(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of nodes in this Voronoi cell."""
 *         return self.thisptr.getNumNodes()
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.get_num_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1083
 *         return self.thisptr.getNumNodes()
 * 
 *     def get_node_coord(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the coordinates of the node at the given index as a Point."""
 *         cdef CPoint coord = self.thisptr.getNodeCoord(index)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9get_node_coord(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_10BasicVCell_8get_node_coord, "Returns the coordinates of the node at the given index as a Point.");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_10BasicVCell_9get_node_coord = {"get_node_coord", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_9get_node_coord, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_8get_node_coord};
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9get_node_coord(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_coord (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_index,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1083, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1083, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_node_coord", 0) < (0)) __PYX_ERR(0, 1083, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_node_coord", 1, 1, 1, i); __PYX_ERR(0, 1083, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1083, __pyx_L3_error)
    }
    __pyx_v_index = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_node_coord", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1083, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.get_node_coord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_8get_node_coord(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_8get_node_coord(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, int __pyx_v_index) {
  Point __pyx_v_coord;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_coord", 0);

  /* "pyzeo/extension.pyx":1085
 *     def get_node_coord(self, int index):
 *         """Returns the coordinates of the node at the given index as a Point."""
 *         cdef CPoint coord = self.thisptr.getNodeCoord(index)             # <<<<<<<<<<<<<<
 *         return Point(coord.vals[0], coord.vals[1], coord.vals[2])
 * 
*/
  __pyx_v_coord = __pyx_v_self->thisptr->getNodeCoord(__pyx_v_index);

  /* "pyzeo/extension.pyx":1086
 *         """Returns the coordinates of the node at the given index as a Point."""
 *         cdef CPoint coord = self.thisptr.getNodeCoord(index)
 *         return Point(coord.vals[0], coord.vals[1], coord.vals[2])             # <<<<<<<<<<<<<<
 * 
 *     def get_node_id(self, int index):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Point);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Point); 
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_coord.vals[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_coord.vals[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_coord.vals[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_7, (4-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1083
 *         return self.thisptr.getNumNodes()
 * 
 *     def get_node_coord(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the coordinates of the node at the given index as a Point."""
 *         cdef CPoint coord = self.thisptr.getNodeCoord(index)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.get_node_coord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1088
 *         return Point(coord.vals[0], coord.vals[1], coord.vals[2])
 * 
 *     def get_node_id(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the node ID at the given index."""
 *         return self.thisptr.getNodeID(index)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_11get_node_id(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_10BasicVCell_10get_node_id, "Returns the node ID at the given index.");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_10BasicVCell_11get_node_id = {"get_node_id", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_11get_node_id, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_10get_node_id};
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_11get_node_id(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_id (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_index,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1088, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1088, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_node_id", 0) < (0)) __PYX_ERR(0, 1088, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_node_id", 1, 1, 1, i); __PYX_ERR(0, 1088, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1088, __pyx_L3_error)
    }
    __pyx_v_index = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_node_id", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1088, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.get_node_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_10get_node_id(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_10get_node_id(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_id", 0);

  /* "pyzeo/extension.pyx":1090
 *     def get_node_id(self, int index):
 *         """Returns the node ID at the given index."""
 *         return self.thisptr.getNodeID(index)             # <<<<<<<<<<<<<<
 * 
 *     property num_nodes:
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->thisptr->getNodeID(__pyx_v_index)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1088
 *         return Point(coord.vals[0], coord.vals[1], coord.vals[2])
 * 
 *     def get_node_id(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the node ID at the given index."""
 *         return self.thisptr.getNodeID(index)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.get_node_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1093
 * 
 *     property num_nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getNumNodes()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9num_nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9num_nodes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_9num_nodes___get__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_9num_nodes___get__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzeo/extension.pyx":1094
 *     property num_nodes:
 *         def __get__(self):
 *             return self.thisptr.getNumNodes()             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->thisptr->getNumNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1093
 * 
 *     property num_nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getNumNodes()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.num_nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_10BasicVCell_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_12__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_10BasicVCell_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < (0)) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_14__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1098
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_55compute_centroid_4cycles(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_54compute_centroid_4cycles, "\n    Computes the centroid of the 4 corners of quadrilateral voronoi face\n    Args:\n        vornet:\n            pyzeo.storage.VoronoiNetwork\n    Returns:\n        List of centroids in [(x1,y1,z1),(x2,y2,z2),...] format\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_55compute_centroid_4cycles = {"compute_centroid_4cycles", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_55compute_centroid_4cycles, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_54compute_centroid_4cycles};
static PyObject *__pyx_pw_5pyzeo_9extension_55compute_centroid_4cycles(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_vornet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_centroid_4cycles (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_vornet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1098, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1098, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "compute_centroid_4cycles", 0) < (0)) __PYX_ERR(0, 1098, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("compute_centroid_4cycles", 1, 1, 1, i); __PYX_ERR(0, 1098, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1098, __pyx_L3_error)
    }
    __pyx_v_vornet = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_centroid_4cycles", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1098, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.compute_centroid_4cycles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_54compute_centroid_4cycles(__pyx_self, __pyx_v_vornet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_54compute_centroid_4cycles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vornet) {
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  std::vector<CYCLE>  __pyx_v_cycles;
  std::vector<int>  __pyx_v_ids;
  PyObject *__pyx_v_centroid_list = NULL;
  std::vector<CYCLE> ::iterator __pyx_v_it;
  std::vector<int> ::iterator __pyx_v_iit;
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_v_id_set = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  VORONOI_NETWORK *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_centroid_4cycles", 0);

  /* "pyzeo/extension.pyx":1108
 *     """
 * 
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[CYCLE] cycles
 *     cdef vector[int] ids
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1112
 *     cdef vector[int] ids
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):             # <<<<<<<<<<<<<<
 *         raise ValueError
 * 
*/
  __pyx_t_2 = (!compute_4cycle(__pyx_v_c_vornet_ptr, (&__pyx_v_cycles), 0, 1));
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":1113
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):
 *         raise ValueError             # <<<<<<<<<<<<<<
 * 
 *     centroid_list = []
*/
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 1113, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1112
 *     cdef vector[int] ids
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):             # <<<<<<<<<<<<<<
 *         raise ValueError
 * 
*/
  }

  /* "pyzeo/extension.pyx":1115
 *         raise ValueError
 * 
 *     centroid_list = []             # <<<<<<<<<<<<<<
 *     cdef vector[CYCLE].iterator it = cycles.begin()
 *     cdef vector[int].iterator iit
*/
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_centroid_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1116
 * 
 *     centroid_list = []
 *     cdef vector[CYCLE].iterator it = cycles.begin()             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():
*/
  __pyx_v_it = __pyx_v_cycles.begin();

  /* "pyzeo/extension.pyx":1118
 *     cdef vector[CYCLE].iterator it = cycles.begin()
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
*/
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_cycles.end());
    if (!__pyx_t_2) break;

    /* "pyzeo/extension.pyx":1119
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():
 *         new_xyz = Xyz()             # <<<<<<<<<<<<<<
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
 *         iit = ids.begin()
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz);
    __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz); 
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_new_xyz, ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1120
 *     while it != cycles.end():
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)             # <<<<<<<<<<<<<<
 *         iit = ids.begin()
 *         #print(ids.size())
*/
    centroid((&(*__pyx_v_it)), __pyx_v_new_xyz->thisptr, (&__pyx_v_ids));

    /* "pyzeo/extension.pyx":1121
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
 *         iit = ids.begin()             # <<<<<<<<<<<<<<
 *         #print(ids.size())
 *         id_set = set()
*/
    __pyx_v_iit = __pyx_v_ids.begin();

    /* "pyzeo/extension.pyx":1123
 *         iit = ids.begin()
 *         #print(ids.size())
 *         id_set = set()             # <<<<<<<<<<<<<<
 *         while iit != ids.end():
 *             id_set.add(deref(iit))
*/
    __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_id_set, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1124
 *         #print(ids.size())
 *         id_set = set()
 *         while iit != ids.end():             # <<<<<<<<<<<<<<
 *             id_set.add(deref(iit))
 *             inc(iit)
*/
    while (1) {
      __pyx_t_2 = (__pyx_v_iit != __pyx_v_ids.end());
      if (!__pyx_t_2) break;

      /* "pyzeo/extension.pyx":1125
 *         id_set = set()
 *         while iit != ids.end():
 *             id_set.add(deref(iit))             # <<<<<<<<<<<<<<
 *             inc(iit)
 * 
*/
      __pyx_t_3 = __Pyx_PyLong_From_int((*__pyx_v_iit)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PySet_Add(__pyx_v_id_set, __pyx_t_3); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1125, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyzeo/extension.pyx":1126
 *         while iit != ids.end():
 *             id_set.add(deref(iit))
 *             inc(iit)             # <<<<<<<<<<<<<<
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})
*/
      (void)((++__pyx_v_iit));
    }

    /* "pyzeo/extension.pyx":1128
 *             inc(iit)
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})             # <<<<<<<<<<<<<<
 *         inc(it)
 * 
*/
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ids, __pyx_v_id_set) < (0)) __PYX_ERR(0, 1128, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_coords, ((PyObject *)__pyx_v_new_xyz)) < (0)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_centroid_list, __pyx_t_3); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1129
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})
 *         inc(it)             # <<<<<<<<<<<<<<
 * 
 *     return centroid_list
*/
    (void)((++__pyx_v_it));
  }

  /* "pyzeo/extension.pyx":1131
 *         inc(it)
 * 
 *     return centroid_list             # <<<<<<<<<<<<<<
 * 
 * def compute_face_centers(atmnet):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_centroid_list);
  __pyx_r = __pyx_v_centroid_list;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1098
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzeo.extension.compute_centroid_4cycles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_centroid_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XDECREF(__pyx_v_id_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1133
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_57compute_face_centers(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_56compute_face_centers, "\n    Compute the face centers of the voronoi network \n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_57compute_face_centers = {"compute_face_centers", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_57compute_face_centers, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_56compute_face_centers};
static PyObject *__pyx_pw_5pyzeo_9extension_57compute_face_centers(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_face_centers (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1133, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1133, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "compute_face_centers", 0) < (0)) __PYX_ERR(0, 1133, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("compute_face_centers", 1, 1, 1, i); __PYX_ERR(0, 1133, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1133, __pyx_L3_error)
    }
    __pyx_v_atmnet = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_face_centers", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1133, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.compute_face_centers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_56compute_face_centers(__pyx_self, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_56compute_face_centers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  std::vector<XYZ>  __pyx_v_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_face_centers", 0);

  /* "pyzeo/extension.pyx":1137
 *     Compute the face centers of the voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[XYZ] points
 *     face_center(c_atmnet_ptr, &points)
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1137, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1139
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef vector[XYZ] points
 *     face_center(c_atmnet_ptr, &points)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  face_center(__pyx_v_c_atmnet_ptr, (&__pyx_v_points));

  /* "pyzeo/extension.pyx":1133
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.compute_face_centers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1143
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_59warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_59warning = {"warning", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_59warning, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_59warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("warning", __pyx_kwds); return NULL;}
  __Pyx_INCREF(__pyx_args);
  __pyx_v_objs = __pyx_args;
  __pyx_r = __pyx_pf_5pyzeo_9extension_58warning(__pyx_self, __pyx_v_objs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_objs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_58warning(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_objs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("warning", 0);

  /* "pyzeo/extension.pyx":1144
 * # cluster
 * def warning(*objs):
 *     print("WARNING", *objs)             # <<<<<<<<<<<<<<
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
*/
  __pyx_t_1 = PyNumber_Add(__pyx_mstate_global->__pyx_tuple[0], __pyx_v_objs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1143
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1147
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_61simplify_highaccuracy_vornet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_60simplify_highaccuracy_vornet, "\n    Generates and simplifies high accuracy voronoi network \n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_61simplify_highaccuracy_vornet = {"simplify_highaccuracy_vornet", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_61simplify_highaccuracy_vornet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_60simplify_highaccuracy_vornet};
static PyObject *__pyx_pw_5pyzeo_9extension_61simplify_highaccuracy_vornet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simplify_highaccuracy_vornet (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1147, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1147, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "simplify_highaccuracy_vornet", 0) < (0)) __PYX_ERR(0, 1147, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("simplify_highaccuracy_vornet", 1, 1, 1, i); __PYX_ERR(0, 1147, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1147, __pyx_L3_error)
    }
    __pyx_v_atmnet = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("simplify_highaccuracy_vornet", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1147, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.simplify_highaccuracy_vornet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_60simplify_highaccuracy_vornet(__pyx_self, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_60simplify_highaccuracy_vornet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("simplify_highaccuracy_vornet", 0);

  /* "pyzeo/extension.pyx":1151
 *     Generates and simplifies high accuracy voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     simplify_ha_vornet(c_atmnetptr)
 * 
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1151, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1152
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     simplify_ha_vornet(c_atmnetptr)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  simplify_ha_vornet(__pyx_v_c_atmnetptr);

  /* "pyzeo/extension.pyx":1147
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.simplify_highaccuracy_vornet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1155
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_63reduced_highaccuracy_vornodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_62reduced_highaccuracy_vornodes, "\n    Generates simplified hgh accuracy voronoi network\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_63reduced_highaccuracy_vornodes = {"reduced_highaccuracy_vornodes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_63reduced_highaccuracy_vornodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_62reduced_highaccuracy_vornodes};
static PyObject *__pyx_pw_5pyzeo_9extension_63reduced_highaccuracy_vornodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduced_highaccuracy_vornodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1155, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1155, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "reduced_highaccuracy_vornodes", 0) < (0)) __PYX_ERR(0, 1155, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("reduced_highaccuracy_vornodes", 1, 1, 1, i); __PYX_ERR(0, 1155, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1155, __pyx_L3_error)
    }
    __pyx_v_atmnet = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduced_highaccuracy_vornodes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1155, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.reduced_highaccuracy_vornodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_62reduced_highaccuracy_vornodes(__pyx_self, __pyx_v_atmnet);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_62reduced_highaccuracy_vornodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::vector<XYZ>  __pyx_v_xyz_vect;
  PyObject *__pyx_v_xyz_list = NULL;
  std::vector<XYZ> ::iterator __pyx_v_it;
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduced_highaccuracy_vornodes", 0);

  /* "pyzeo/extension.pyx":1159
 *     Generates simplified hgh accuracy voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[XYZ] xyz_vect
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1159, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1161
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef vector[XYZ] xyz_vect
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)             # <<<<<<<<<<<<<<
 *     # Conver to list of Xyz
 *     xyz_list = []
*/
  high_accuracy_vornodes_reduction(__pyx_v_c_atmnetptr, (&__pyx_v_xyz_vect));

  /* "pyzeo/extension.pyx":1163
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)
 *     # Conver to list of Xyz
 *     xyz_list = []             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
*/
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_xyz_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1165
 *     xyz_list = []
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()             # <<<<<<<<<<<<<<
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
*/
  __pyx_v_it = __pyx_v_xyz_vect.begin();

  /* "pyzeo/extension.pyx":1166
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
 *     while it != xyz_vect.end():             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)
*/
  while (1) {
    __pyx_t_3 = (__pyx_v_it != __pyx_v_xyz_vect.end());
    if (!__pyx_t_3) break;

    /* "pyzeo/extension.pyx":1167
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient             # <<<<<<<<<<<<<<
 *         xyz_list.append(new_xyz)
 *         inc(it)
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz);
    __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz); 
    __pyx_t_6 = PyFloat_FromDouble((*__pyx_v_it).x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble((*__pyx_v_it).y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble((*__pyx_v_it).z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = 1;
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_t_6, __pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_9, (4-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_new_xyz, ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pyzeo/extension.pyx":1168
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)             # <<<<<<<<<<<<<<
 *         inc(it)
 * 
*/
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_xyz_list, ((PyObject *)__pyx_v_new_xyz)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1168, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1169
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)
 *         inc(it)             # <<<<<<<<<<<<<<
 * 
 *     return xyz_list
*/
    (void)((++__pyx_v_it));
  }

  /* "pyzeo/extension.pyx":1171
 *         inc(it)
 * 
 *     return xyz_list             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_xyz_list);
  __pyx_r = __pyx_v_xyz_list;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1155
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyzeo.extension.reduced_highaccuracy_vornodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xyz_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1174
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_65pruned_highaccuracy_voronoi_network(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_64pruned_highaccuracy_voronoi_network, "\n    Prunes hgh accuracy voronoi network by removing voronoi\n    nodes close to the center of the bigger atoms.\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_65pruned_highaccuracy_voronoi_network = {"pruned_highaccuracy_voronoi_network", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_65pruned_highaccuracy_voronoi_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_64pruned_highaccuracy_voronoi_network};
static PyObject *__pyx_pw_5pyzeo_9extension_65pruned_highaccuracy_voronoi_network(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pruned_highaccuracy_voronoi_network (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_delta,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1174, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1174, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1174, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "pruned_highaccuracy_voronoi_network", 0) < (0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_5)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("pruned_highaccuracy_voronoi_network", 0, 1, 2, i); __PYX_ERR(0, 1174, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1174, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1174, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_5)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pruned_highaccuracy_voronoi_network", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.pruned_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_64pruned_highaccuracy_voronoi_network(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_64pruned_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  ATOM_NETWORK *__pyx_v_c_ha_atmnetptr;
  VORONOI_NETWORK *__pyx_v_c_vornetptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  ATOM_NETWORK *__pyx_t_8;
  VORONOI_NETWORK *__pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pruned_highaccuracy_voronoi_network", 0);

  /* "pyzeo/extension.pyx":1179
 *     nodes close to the center of the bigger atoms.
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
*/
  __pyx_t_2 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1180
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_3 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_ha_atmnet, __pyx_mstate_global->__pyx_n_u_MED};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1181
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
*/
  __pyx_t_4 = __pyx_v_ha_atmnet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1181, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
    }
    #else
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1181, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_ecs = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fcs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pyzeo/extension.pyx":1182
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1182, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1183
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1183, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_ha_atmnet)->thisptr;
  __pyx_v_c_ha_atmnetptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1184
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1184, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornetptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1186
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)             # <<<<<<<<<<<<<<
 *     return vornet
 * 
*/
  __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1185
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,             # <<<<<<<<<<<<<<
 *             c_ha_atmnetptr, delta)
 *     return vornet
*/
  prune_high_accuracy_voronoi_network(__pyx_v_c_vornetptr, __pyx_v_c_atmnetptr, __pyx_v_c_ha_atmnetptr, __pyx_t_10);

  /* "pyzeo/extension.pyx":1187
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)
 *     return vornet             # <<<<<<<<<<<<<<
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_vornet);
  __pyx_r = __pyx_v_vornet;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1174
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.pruned_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1189
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_67get_nearest_largest_diameter_highaccuracy_vornode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_66get_nearest_largest_diameter_highaccuracy_vornode, "\n    Get the reduced high accuracy voronoi network where only nodes that \n    has the largest diameter and within the cutoff distance to the nodes\n    of the low accuracy voronoi network are retained. A one-one mapping\n    of high accuracy voronoi nodes and low accuracy nodes is obtained.\n\n    Input:\n        atmnet: AtomNetwork object\n        delta: cutoff (default = 0.25 angstroms)\n    Output:\n        Reduced voronoi network\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_67get_nearest_largest_diameter_highaccuracy_vornode = {"get_nearest_largest_diameter_highaccuracy_vornode", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_67get_nearest_largest_diameter_highaccuracy_vornode, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_66get_nearest_largest_diameter_highaccuracy_vornode};
static PyObject *__pyx_pw_5pyzeo_9extension_67get_nearest_largest_diameter_highaccuracy_vornode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nearest_largest_diameter_highaccuracy_vornode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_delta,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1189, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1189, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1189, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_nearest_largest_diameter_highaccuracy_vornode", 0) < (0)) __PYX_ERR(0, 1189, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_25)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_nearest_largest_diameter_highaccuracy_vornode", 0, 1, 2, i); __PYX_ERR(0, 1189, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1189, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1189, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_25)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_nearest_largest_diameter_highaccuracy_vornode", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1189, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.get_nearest_largest_diameter_highaccuracy_vornode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_66get_nearest_largest_diameter_highaccuracy_vornode(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_66get_nearest_largest_diameter_highaccuracy_vornode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  VORONOI_NETWORK *__pyx_v_c_ha_vornet_ptr;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_red_vornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  ATOM_NETWORK *__pyx_t_8;
  VORONOI_NETWORK *__pyx_t_9;
  float __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nearest_largest_diameter_highaccuracy_vornode", 0);

  /* "pyzeo/extension.pyx":1203
 *     """
 *     #generate_simplified_highaccuracy_voronoi_network(atmnet)
 *     ha_vornet = pruned_highaccuracy_voronoi_network(atmnet, delta=0.7)             # <<<<<<<<<<<<<<
 *     #print('')
 *     #print('**********ONE DECOMPOSITION.************')
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_pruned_highaccuracy_voronoi_netw); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_v_atmnet};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_delta, __pyx_mstate_global->__pyx_float_0_7, __pyx_t_5, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_vornet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1207
 *     #print('**********ONE DECOMPOSITION.************')
 *     #print('')
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
*/
  __pyx_t_3 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1207, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_3 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1207, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
    }
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1207, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_ecs = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_fcs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1208
 *     #print('')
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1208, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1209
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1210
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr             # <<<<<<<<<<<<<<
 *     red_vornet = VoronoiNetwork()
 *     #print('')
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1210, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_ha_vornet)->thisptr;
  __pyx_v_c_ha_vornet_ptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1211
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     #print('')
 *     #print('*********WORKED TILL HERE*********')
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_red_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1216
 *     #print('')
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,
 *             c_atmnet_ptr, red_vornet.thisptr, delta)             # <<<<<<<<<<<<<<
 *     return red_vornet
 * 
*/
  __pyx_t_10 = __Pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1215
 *     #print('*********WORKED TILL HERE*********')
 *     #print('')
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,             # <<<<<<<<<<<<<<
 *             c_atmnet_ptr, red_vornet.thisptr, delta)
 *     return red_vornet
*/
  nearest_largest_diameter_ha_vornet(__pyx_v_c_ha_vornet_ptr, __pyx_v_c_vornet_ptr, __pyx_v_c_atmnet_ptr, __pyx_v_red_vornet->thisptr, __pyx_t_10);

  /* "pyzeo/extension.pyx":1217
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,
 *             c_atmnet_ptr, red_vornet.thisptr, delta)
 *     return red_vornet             # <<<<<<<<<<<<<<
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_red_vornet);
  __pyx_r = ((PyObject *)__pyx_v_red_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1189
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.get_nearest_largest_diameter_highaccuracy_vornode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF((PyObject *)__pyx_v_red_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1219
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_69generate_simplified_highaccuracy_voronoi_network(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_68generate_simplified_highaccuracy_voronoi_network, "\n    Generate a simplified high accuracy voronoi network. \n    Uses Zeo++ high accuracy network and simplifies it such that only voronoi \n    nodes that belong to different atoms of original atom network are \n    retained. There can be different no. of voronoi nodes when compared with\n    the voronoi nodes obtained with regular tesselation. \n    Input:\n        atmnet: AtomNetwork object\n    Output:\n        Simplified high accuracy voronoi network\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_69generate_simplified_highaccuracy_voronoi_network = {"generate_simplified_highaccuracy_voronoi_network", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_69generate_simplified_highaccuracy_voronoi_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_68generate_simplified_highaccuracy_voronoi_network};
static PyObject *__pyx_pw_5pyzeo_9extension_69generate_simplified_highaccuracy_voronoi_network(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  CYTHON_UNUSED PyObject *__pyx_v_delta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_simplified_highaccuracy_voronoi_network (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_delta,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1219, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1219, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1219, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_simplified_highaccuracy_voronoi_network", 0) < (0)) __PYX_ERR(0, 1219, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_6)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_simplified_highaccuracy_voronoi_network", 0, 1, 2, i); __PYX_ERR(0, 1219, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1219, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1219, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_6)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_simplified_highaccuracy_voronoi_network", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1219, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.generate_simplified_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_68generate_simplified_highaccuracy_voronoi_network(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_68generate_simplified_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, CYTHON_UNUSED PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_node_size = NULL;
  PyObject *__pyx_v_ha_node_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_simplified_highaccuracy_voronoi_network", 0);

  /* "pyzeo/extension.pyx":1231
 *         Simplified high accuracy voronoi network
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
*/
  __pyx_t_2 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1232
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "LOW")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_3 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_ha_atmnet, __pyx_mstate_global->__pyx_n_u_LOW};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1233
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()
*/
  __pyx_t_4 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1233, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1233, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
    }
    #else
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1233, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_ecs = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fcs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pyzeo/extension.pyx":1234
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
*/
  __pyx_t_5 = __pyx_v_ha_atmnet;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1234, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_4);
    } else {
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_4);
    }
    #else
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1234, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_ha_vornet = __pyx_t_5;
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_ecs, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_fcs, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyzeo/extension.pyx":1235
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()             # <<<<<<<<<<<<<<
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:
*/
  __pyx_t_4 = __pyx_v_vornet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1236
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()             # <<<<<<<<<<<<<<
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
*/
  __pyx_t_4 = __pyx_v_ha_vornet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1237
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily
*/
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_size, __pyx_v_ha_node_size, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "pyzeo/extension.pyx":1238
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')             # <<<<<<<<<<<<<<
 *     return ha_vornet        # The processing below is eliminated temporarily
 *     node_size = vornet.size()
*/
    __pyx_t_4 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_No_high_accuracy};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1237
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily
*/
  }

  /* "pyzeo/extension.pyx":1239
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily             # <<<<<<<<<<<<<<
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ha_vornet);
  __pyx_r = __pyx_v_ha_vornet;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1219
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.generate_simplified_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_node_size);
  __Pyx_XDECREF(__pyx_v_ha_node_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1273
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_71prune_voronoi_network_close_node(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_70prune_voronoi_network_close_node, "\n    Generate a pruned high accuracy voronoi network. \n    Uses Zeo++ high accuracy network and simplifies it such that only voronoi \n    nodes that are farther than \"delta\" are retained. \n    Input:\n        atmnet: AtomNetwork object\n    Output:\n        Simplified high accuracy voronoi network\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_71prune_voronoi_network_close_node = {"prune_voronoi_network_close_node", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_71prune_voronoi_network_close_node, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_70prune_voronoi_network_close_node};
static PyObject *__pyx_pw_5pyzeo_9extension_71prune_voronoi_network_close_node(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_voronoi_network_close_node (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_delta,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1273, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1273, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1273, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "prune_voronoi_network_close_node", 0) < (0)) __PYX_ERR(0, 1273, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_1)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("prune_voronoi_network_close_node", 0, 1, 2, i); __PYX_ERR(0, 1273, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1273, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1273, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_0_1)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_voronoi_network_close_node", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1273, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.prune_voronoi_network_close_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_70prune_voronoi_network_close_node(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_70prune_voronoi_network_close_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_node_size = NULL;
  PyObject *__pyx_v_ha_node_size = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  VORONOI_NETWORK *__pyx_v_c_ha_vornet_ptr;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_red_vornet = NULL;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_pruned_vornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  ATOM_NETWORK *__pyx_t_9;
  VORONOI_NETWORK *__pyx_t_10;
  float __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_voronoi_network_close_node", 0);

  /* "pyzeo/extension.pyx":1283
 *         Simplified high accuracy voronoi network
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
*/
  __pyx_t_2 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1284
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_3 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_ha_atmnet, __pyx_mstate_global->__pyx_n_u_MED};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1285
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 * 
*/
  __pyx_t_4 = __pyx_v_atmnet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1285, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1285, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1285, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
    }
    #else
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1285, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_ecs = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fcs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pyzeo/extension.pyx":1286
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 * 
 *     node_size = vornet.size()
*/
  __pyx_t_5 = __pyx_v_ha_atmnet;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1286, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2);
      __Pyx_INCREF(__pyx_t_4);
    } else {
      __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 2);
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_4);
    }
    #else
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < (0)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1286, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_ha_vornet = __pyx_t_5;
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_ecs, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_fcs, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyzeo/extension.pyx":1288
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 * 
 *     node_size = vornet.size()             # <<<<<<<<<<<<<<
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
*/
  __pyx_t_4 = __pyx_v_vornet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1289
 * 
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()             # <<<<<<<<<<<<<<
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:
*/
  __pyx_t_4 = __pyx_v_ha_vornet;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ha_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1290
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)             # <<<<<<<<<<<<<<
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_2 = __pyx_builtin_print; 
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_node_size, __pyx_v_ha_node_size};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1291
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *         #return vornet
*/
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_size, __pyx_v_ha_node_size, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "pyzeo/extension.pyx":1292
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')             # <<<<<<<<<<<<<<
 *         #return vornet
 * 
*/
    __pyx_t_2 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_No_high_accuracy};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1291
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *         #return vornet
*/
  }

  /* "pyzeo/extension.pyx":1295
 *         #return vornet
 * 
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1295, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1296
 * 
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr             # <<<<<<<<<<<<<<
 *     red_vornet = VoronoiNetwork()
 *     #print ''
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_vornet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(0, 1296, __pyx_L1_error)
  __pyx_t_10 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_ha_vornet)->thisptr;
  __pyx_v_c_ha_vornet_ptr = __pyx_t_10;

  /* "pyzeo/extension.pyx":1297
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     #print ''
 *     #print '*********WORKED TILL HERE*********'
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_red_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1301
 *     #print '*********WORKED TILL HERE*********'
 *     #print ''
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,             # <<<<<<<<<<<<<<
 *             red_vornet.thisptr)
 *     print (red_vornet.size())
*/
  __pyx_t_11 = __Pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1301, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1302
 *     #print ''
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,
 *             red_vornet.thisptr)             # <<<<<<<<<<<<<<
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()
*/
  geometry_pruning(__pyx_v_c_ha_vornet_ptr, __pyx_v_c_atmnet_ptr, __pyx_t_11, __pyx_v_red_vornet->thisptr);

  /* "pyzeo/extension.pyx":1303
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,
 *             red_vornet.thisptr)
 *     print (red_vornet.size())             # <<<<<<<<<<<<<<
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_4 = __pyx_builtin_print; 
  __pyx_t_6 = ((PyObject *)__pyx_v_red_vornet);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1304
 *             red_vornet.thisptr)
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork); 
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_pruned_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1306
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)             # <<<<<<<<<<<<<<
 *     print (pruned_vornet.size())
 *     return pruned_vornet
*/
  __pyx_t_11 = __Pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1306, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1305
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,             # <<<<<<<<<<<<<<
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())
*/
  ha_prune_within_atom(__pyx_v_red_vornet->thisptr, __pyx_v_c_atmnet_ptr, __pyx_t_11, __pyx_v_pruned_vornet->thisptr);

  /* "pyzeo/extension.pyx":1307
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())             # <<<<<<<<<<<<<<
 *     return pruned_vornet
 * 
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF(__pyx_builtin_print);
  __pyx_t_4 = __pyx_builtin_print; 
  __pyx_t_6 = ((PyObject *)__pyx_v_pruned_vornet);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_size, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1308
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())
 *     return pruned_vornet             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_pruned_vornet);
  __pyx_r = ((PyObject *)__pyx_v_pruned_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1273
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.prune_voronoi_network_close_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_node_size);
  __Pyx_XDECREF(__pyx_v_ha_node_size);
  __Pyx_XDECREF((PyObject *)__pyx_v_red_vornet);
  __Pyx_XDECREF((PyObject *)__pyx_v_pruned_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1312
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_73volume(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_72volume, "\n    Calculates the volume of channels and pockets in a given strucutre.\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        high_accuracy_atmnet (Default=None):\n            pyzeo.netstorage.AtomNetwork\n            Optional high accuracy AtomNetwork. If not given and high_accuracy\n            flag is set to True, then it is computed and returned.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        low_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n        high_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n    Returns:\n        1) string containing channel and pocket volumes\n        2) if high_accuracy=True and no input high_accuracy_atmnet is given,\n           returns high_accuracy_atmnet for future use.\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_73volume = {"volume", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_73volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_72volume};
static PyObject *__pyx_pw_5pyzeo_9extension_73volume(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_high_accuracy_atmnet = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_low_dist_range = 0;
  PyObject *__pyx_v_high_dist_range = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_channel_radius,&__pyx_mstate_global->__pyx_n_u_probe_radius,&__pyx_mstate_global->__pyx_n_u_mc_sampling_no,&__pyx_mstate_global->__pyx_n_u_high_accuracy,&__pyx_mstate_global->__pyx_n_u_high_accuracy_atmnet,&__pyx_mstate_global->__pyx_n_u_exclude_pockets,&__pyx_mstate_global->__pyx_n_u_low_dist_range,&__pyx_mstate_global->__pyx_n_u_high_dist_range,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1312, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "volume", 0) < (0)) __PYX_ERR(0, 1312, __pyx_L3_error)

      /* "pyzeo/extension.pyx":1313
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 *     """
*/
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)Py_None));

      /* "pyzeo/extension.pyx":1314
 * def volume(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):             # <<<<<<<<<<<<<<
 *     """
 *     Calculates the volume of channels and pockets in a given strucutre.
*/
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_True)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_int_neg_1)));
      if (!values[8]) values[8] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_int_neg_1)));
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, i); __PYX_ERR(0, 1312, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1312, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1312, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1312, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1312, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));

      /* "pyzeo/extension.pyx":1313
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 *     """
*/
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_True)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_int_neg_1)));
      if (!values[8]) values[8] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_int_neg_1)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_high_accuracy = values[4];
    __pyx_v_high_accuracy_atmnet = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_low_dist_range = values[7];
    __pyx_v_high_dist_range = values[8];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, __pyx_nargs); __PYX_ERR(0, 1312, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_72volume(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_high_accuracy, __pyx_v_high_accuracy_atmnet, __pyx_v_exclude_pockets, __pyx_v_low_dist_range, __pyx_v_high_dist_range);

  /* "pyzeo/extension.pyx":1312
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_72volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_low_dist_range, PyObject *__pyx_v_high_dist_range) {
  int __pyx_v_ret_high_acc_atmnet;
  ATOM_NETWORK *__pyx_v_c_org_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  PyObject *__pyx_v_tmp_atmnet = NULL;
  std::string __pyx_v_vol_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  ATOM_NETWORK *__pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volume", 0);
  __Pyx_INCREF(__pyx_v_high_accuracy);
  __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);

  /* "pyzeo/extension.pyx":1343
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
*/
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1343, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_t_3 = (!__pyx_t_2);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1344
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True
*/
    __pyx_t_5 = __pyx_v_atmnet;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF_SET(__pyx_v_high_accuracy_atmnet, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1345
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)             # <<<<<<<<<<<<<<
 *         ret_high_acc_atmnet = True
 *     else:
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_high_accuracy_atmnet};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1346
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True             # <<<<<<<<<<<<<<
 *     else:
 *         ret_high_acc_atmnet = False
*/
    __pyx_v_ret_high_acc_atmnet = 1;

    /* "pyzeo/extension.pyx":1343
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
*/
    goto __pyx_L3;
  }

  /* "pyzeo/extension.pyx":1348
 *         ret_high_acc_atmnet = True
 *     else:
 *         ret_high_acc_atmnet = False             # <<<<<<<<<<<<<<
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
*/
  /*else*/ {
    __pyx_v_ret_high_acc_atmnet = 0;
  }
  __pyx_L3:;

  /* "pyzeo/extension.pyx":1350
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
*/
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1350, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1350, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_3);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1351
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 *         high_accuracy = True             # <<<<<<<<<<<<<<
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
*/
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_high_accuracy, Py_True);

    /* "pyzeo/extension.pyx":1350
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
*/
  }

  /* "pyzeo/extension.pyx":1353
 *         high_accuracy = True
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1353, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_org_atmnet_ptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1355
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1355, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1356
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     else:
 *         tmp_atmnet = atmnet.copy()
*/
    if (!(likely(__Pyx_TypeTest(__pyx_v_high_accuracy_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1356, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_high_accuracy_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_8;

    /* "pyzeo/extension.pyx":1355
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
*/
    goto __pyx_L9;
  }

  /* "pyzeo/extension.pyx":1358
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 *         tmp_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
*/
  /*else*/ {
    __pyx_t_7 = __pyx_v_atmnet;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_v_tmp_atmnet = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1359
 *     else:
 *         tmp_atmnet = atmnet.copy()
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr             # <<<<<<<<<<<<<<
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
*/
    if (!(likely(__Pyx_TypeTest(__pyx_v_tmp_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1359, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_tmp_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_8;
  }
  __pyx_L9:;

  /* "pyzeo/extension.pyx":1361
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1361, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1362
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *             low_dist_range, high_dist_range)
 *     #print vol_str
*/
  __pyx_t_9 = __Pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1363
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)             # <<<<<<<<<<<<<<
 *     #print vol_str
 *     if ret_high_acc_atmnet:
*/
  __pyx_t_12 = __Pyx_PyFloat_AsDouble(__pyx_v_low_dist_range); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyFloat_AsDouble(__pyx_v_high_dist_range); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1361
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)
*/
  __pyx_v_vol_str = calcAV(__pyx_v_c_atmnet_ptr, __pyx_v_c_org_atmnet_ptr, __pyx_t_1, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_2, __pyx_t_12, __pyx_t_13);

  /* "pyzeo/extension.pyx":1365
 *             low_dist_range, high_dist_range)
 *     #print vol_str
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return vol_str, high_accuracy_atmnet
 *     else:
*/
  if (__pyx_v_ret_high_acc_atmnet) {

    /* "pyzeo/extension.pyx":1366
 *     #print vol_str
 *     if ret_high_acc_atmnet:
 *         return vol_str, high_accuracy_atmnet             # <<<<<<<<<<<<<<
 *     else:
 *         return vol_str
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_vol_str); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 1366, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);
    __Pyx_GIVEREF(__pyx_v_high_accuracy_atmnet);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_high_accuracy_atmnet) != (0)) __PYX_ERR(0, 1366, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "pyzeo/extension.pyx":1365
 *             low_dist_range, high_dist_range)
 *     #print vol_str
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return vol_str, high_accuracy_atmnet
 *     else:
*/
  }

  /* "pyzeo/extension.pyx":1368
 *         return vol_str, high_accuracy_atmnet
 *     else:
 *         return vol_str             # <<<<<<<<<<<<<<
 * 
 *     #lines = vol_str.split('\n')
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_vol_str); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "pyzeo/extension.pyx":1312
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyzeo.extension.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp_atmnet);
  __Pyx_XDECREF(__pyx_v_high_accuracy);
  __Pyx_XDECREF(__pyx_v_high_accuracy_atmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1376
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_75surface_area(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_74surface_area, "\n    Calculates the surface area of channels and pockets in a given strucutre.\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        high_accuracy_atmnet (Default=None):\n            pyzeo.netstorage.AtomNetwork\n            Optional high accuracy AtomNetwork. If not given and high_accuracy\n            flag is set to True, then it is computed and returned.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        low_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n        high_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n    Returns:\n        1) string containing channel and pocket surface area\n        2) if high_accuracy=True and no input high_accuracy_atmnet is given,\n           returns high_accuracy_atmnet for future use.\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_75surface_area = {"surface_area", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_75surface_area, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_74surface_area};
static PyObject *__pyx_pw_5pyzeo_9extension_75surface_area(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_high_accuracy_atmnet = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_extended_output = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[8] = {0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("surface_area (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_channel_radius,&__pyx_mstate_global->__pyx_n_u_probe_radius,&__pyx_mstate_global->__pyx_n_u_mc_sampling_no,&__pyx_mstate_global->__pyx_n_u_high_accuracy,&__pyx_mstate_global->__pyx_n_u_high_accuracy_atmnet,&__pyx_mstate_global->__pyx_n_u_exclude_pockets,&__pyx_mstate_global->__pyx_n_u_extended_output,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1376, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "surface_area", 0) < (0)) __PYX_ERR(0, 1376, __pyx_L3_error)

      /* "pyzeo/extension.pyx":1377
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, extended_output=False):
 * 
*/
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)Py_None));

      /* "pyzeo/extension.pyx":1378
 * def surface_area(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):             # <<<<<<<<<<<<<<
 * 
 *     """
*/
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_True)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, i); __PYX_ERR(0, 1376, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1376, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1376, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1376, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1376, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1376, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));

      /* "pyzeo/extension.pyx":1377
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, extended_output=False):
 * 
*/
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_True)));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject *)((PyObject*)Py_False)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_high_accuracy = values[4];
    __pyx_v_high_accuracy_atmnet = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_extended_output = values[7];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, __pyx_nargs); __PYX_ERR(0, 1376, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.surface_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_74surface_area(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_high_accuracy, __pyx_v_high_accuracy_atmnet, __pyx_v_exclude_pockets, __pyx_v_extended_output);

  /* "pyzeo/extension.pyx":1376
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_74surface_area(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_extended_output) {
  int __pyx_v_ret_high_acc_atmnet;
  ATOM_NETWORK *__pyx_v_c_org_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  PyObject *__pyx_v_tmp_atmnet = NULL;
  std::string __pyx_v_sa_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  ATOM_NETWORK *__pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("surface_area", 0);
  __Pyx_INCREF(__pyx_v_high_accuracy);
  __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);

  /* "pyzeo/extension.pyx":1408
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
*/
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1408, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1408, __pyx_L1_error)
  __pyx_t_3 = (!__pyx_t_2);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1409
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True
*/
    __pyx_t_5 = __pyx_v_atmnet;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF_SET(__pyx_v_high_accuracy_atmnet, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1410
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)             # <<<<<<<<<<<<<<
 *         ret_high_acc_atmnet = True
 *     else:
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_high_accuracy_atmnet};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1410, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1411
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True             # <<<<<<<<<<<<<<
 *     else:
 *         ret_high_acc_atmnet = False
*/
    __pyx_v_ret_high_acc_atmnet = 1;

    /* "pyzeo/extension.pyx":1408
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
*/
    goto __pyx_L3;
  }

  /* "pyzeo/extension.pyx":1413
 *         ret_high_acc_atmnet = True
 *     else:
 *         ret_high_acc_atmnet = False             # <<<<<<<<<<<<<<
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
*/
  /*else*/ {
    __pyx_v_ret_high_acc_atmnet = 0;
  }
  __pyx_L3:;

  /* "pyzeo/extension.pyx":1415
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
*/
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1415, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_3);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1416
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 *         high_accuracy = True             # <<<<<<<<<<<<<<
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
*/
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_high_accuracy, Py_True);

    /* "pyzeo/extension.pyx":1415
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
*/
  }

  /* "pyzeo/extension.pyx":1418
 *         high_accuracy = True
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1418, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_org_atmnet_ptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1420
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1420, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1421
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     else:
 *         tmp_atmnet = atmnet.copy()
*/
    if (!(likely(__Pyx_TypeTest(__pyx_v_high_accuracy_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1421, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_high_accuracy_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_8;

    /* "pyzeo/extension.pyx":1420
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
*/
    goto __pyx_L9;
  }

  /* "pyzeo/extension.pyx":1423
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 *         tmp_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
*/
  /*else*/ {
    __pyx_t_7 = __pyx_v_atmnet;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_copy, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_v_tmp_atmnet = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1424
 *     else:
 *         tmp_atmnet = atmnet.copy()
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr             # <<<<<<<<<<<<<<
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
*/
    if (!(likely(__Pyx_TypeTest(__pyx_v_tmp_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1424, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_tmp_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_8;
  }
  __pyx_L9:;

  /* "pyzeo/extension.pyx":1426
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1426, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1427
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *             extended_output)
 *     if ret_high_acc_atmnet:
*/
  __pyx_t_9 = __Pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1428
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)             # <<<<<<<<<<<<<<
 *     if ret_high_acc_atmnet:
 *         return sa_str, high_accuracy_atmnet
*/
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_extended_output); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1428, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1426
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
*/
  __pyx_v_sa_str = calcASA(__pyx_v_c_atmnet_ptr, __pyx_v_c_org_atmnet_ptr, __pyx_t_1, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_2, __pyx_t_3);

  /* "pyzeo/extension.pyx":1429
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return sa_str, high_accuracy_atmnet
 *     else:
*/
  if (__pyx_v_ret_high_acc_atmnet) {

    /* "pyzeo/extension.pyx":1430
 *             extended_output)
 *     if ret_high_acc_atmnet:
 *         return sa_str, high_accuracy_atmnet             # <<<<<<<<<<<<<<
 *     else:
 *         return sa_str
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_sa_str); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 1430, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);
    __Pyx_GIVEREF(__pyx_v_high_accuracy_atmnet);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_high_accuracy_atmnet) != (0)) __PYX_ERR(0, 1430, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "pyzeo/extension.pyx":1429
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return sa_str, high_accuracy_atmnet
 *     else:
*/
  }

  /* "pyzeo/extension.pyx":1432
 *         return sa_str, high_accuracy_atmnet
 *     else:
 *         return sa_str             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_sa_str); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "pyzeo/extension.pyx":1376
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyzeo.extension.surface_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp_atmnet);
  __Pyx_XDECREF(__pyx_v_high_accuracy);
  __Pyx_XDECREF(__pyx_v_high_accuracy_atmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1440
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
*/

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_77high_accuracy_atomnet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5pyzeo_9extension_76high_accuracy_atomnet, "\n    Increases the accuracy of voronoi decomposition by replacing big\n    atoms (spheres) with a number of small spheres.\n    *** Modifies atmnet argument in place ***\n    Args:\n        atmnet:\n            pyzeo.netstorage.AtomNetwork\n            Is modified in place.\n        accuracy_setting: \n            String specifying the accuracy settings.\n            Possible choices are \"OCC\",\"FCC\",\"ACC\",\"AQC\",\"DDH\",\n            \"TIH\",\"ICH\",\"ICC\",\"RIH\",\"S4\",\"S10\",\"S20\",\"S30\",\"S40\",\"S50\",\n            \"S100\",\"S500\",\"S1000\",\"S10000\",\"DEF\",\"HI\",\"MED\",\"LOW\".\n            Default is \"DEF\".\n    ");
static PyMethodDef __pyx_mdef_5pyzeo_9extension_77high_accuracy_atomnet = {"high_accuracy_atomnet", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_77high_accuracy_atomnet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_76high_accuracy_atomnet};
static PyObject *__pyx_pw_5pyzeo_9extension_77high_accuracy_atomnet(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_accuracy_setting = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("high_accuracy_atomnet (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_atmnet,&__pyx_mstate_global->__pyx_n_u_accuracy_setting,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1440, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1440, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1440, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "high_accuracy_atomnet", 0) < (0)) __PYX_ERR(0, 1440, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_n_u_LOW)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("high_accuracy_atomnet", 0, 1, 2, i); __PYX_ERR(0, 1440, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1440, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1440, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_n_u_LOW)));
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_accuracy_setting = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("high_accuracy_atomnet", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1440, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyzeo.extension.high_accuracy_atomnet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_76high_accuracy_atomnet(__pyx_self, __pyx_v_atmnet, __pyx_v_accuracy_setting);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_76high_accuracy_atomnet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_accuracy_setting) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::string __pyx_v_acc_set;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  ATOM_NETWORK *__pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("high_accuracy_atomnet", 0);
  __Pyx_INCREF(__pyx_v_accuracy_setting);

  /* "pyzeo/extension.pyx":1456
 *             Default is "DEF".
 *     """
 *     if not accuracy_setting in _accuracy_kw:             # <<<<<<<<<<<<<<
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_accuracy_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_accuracy_setting, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":1457
 *     """
 *     if not accuracy_setting in _accuracy_kw:
 *         raise ValueError("Accuracy setting not understood")             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_4 = __pyx_builtin_ValueError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_Accuracy_setting_not_understood};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1457, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1456
 *             Default is "DEF".
 *     """
 *     if not accuracy_setting in _accuracy_kw:             # <<<<<<<<<<<<<<
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
*/
  }

  /* "pyzeo/extension.pyx":1458
 *     if not accuracy_setting in _accuracy_kw:
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
*/
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(0, 1458, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_6;

  /* "pyzeo/extension.pyx":1459
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):             # <<<<<<<<<<<<<<
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
*/
  __pyx_t_2 = PyUnicode_Check(__pyx_v_accuracy_setting); 
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":1460
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef string acc_set = accuracy_setting
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)
*/
    if (unlikely(__pyx_v_accuracy_setting == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 1460, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_accuracy_setting)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_accuracy_setting, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1459
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):             # <<<<<<<<<<<<<<
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
*/
  }

  /* "pyzeo/extension.pyx":1461
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting             # <<<<<<<<<<<<<<
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)
*/
  __pyx_t_7 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_accuracy_setting); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1461, __pyx_L1_error)
  __pyx_v_acc_set = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "pyzeo/extension.pyx":1462
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)             # <<<<<<<<<<<<<<
*/
  setupHighAccuracyAtomNetwork(__pyx_v_c_atmnetptr, __pyx_v_acc_set);

  /* "pyzeo/extension.pyx":1440
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzeo.extension.high_accuracy_atomnet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_accuracy_setting);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */

static PyObject *__pyx_tp_new_5pyzeo_9extension_Xyz(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Xyz(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_Xyz) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Xyz[] = {
  {"scale", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_7scale, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Xyz[] = {
  {"x", __pyx_getprop_5pyzeo_9extension_3Xyz_x, __pyx_setprop_5pyzeo_9extension_3Xyz_x, 0, 0},
  {"y", __pyx_getprop_5pyzeo_9extension_3Xyz_y, __pyx_setprop_5pyzeo_9extension_3Xyz_y, 0, 0},
  {"z", __pyx_getprop_5pyzeo_9extension_3Xyz_z, __pyx_setprop_5pyzeo_9extension_3Xyz_z, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_Xyz_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_Xyz},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store a point\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_Xyz},
  {Py_tp_getset, (void *)__pyx_getsets_5pyzeo_9extension_Xyz},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_3Xyz_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_Xyz},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_Xyz_spec = {
  "pyzeo.extension.Xyz",
  sizeof(struct __pyx_obj_5pyzeo_9extension_Xyz),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_Xyz_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_Xyz = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""Xyz", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Xyz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Xyz, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store a point\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Xyz, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Xyz, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_3Xyz_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Xyz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_Point(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_5Point_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Point(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_Point) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Point[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Point[] = {
  {"x", __pyx_getprop_5pyzeo_9extension_5Point_x, __pyx_setprop_5pyzeo_9extension_5Point_x, 0, 0},
  {"y", __pyx_getprop_5pyzeo_9extension_5Point_y, __pyx_setprop_5pyzeo_9extension_5Point_y, 0, 0},
  {"z", __pyx_getprop_5pyzeo_9extension_5Point_z, __pyx_setprop_5pyzeo_9extension_5Point_z, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_Point_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_Point},
  {Py_tp_repr, (void *)__pyx_pw_5pyzeo_9extension_5Point_7__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store a point\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_Point},
  {Py_tp_getset, (void *)__pyx_getsets_5pyzeo_9extension_Point},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_5Point_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_Point},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_Point_spec = {
  "pyzeo.extension.Point",
  sizeof(struct __pyx_obj_5pyzeo_9extension_Point),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_Point_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_Point = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""Point", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Point), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Point, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  __pyx_pw_5pyzeo_9extension_5Point_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store a point\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Point, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Point, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_5Point_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Point, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_Channel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Channel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_Channel) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Channel[] = {
  {"find_bounding_atoms", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_5find_bounding_atoms, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_7Channel_4find_bounding_atoms},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7Channel_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_Channel_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_Channel},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Python wrapper to Zeo++ Channel.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_Channel},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_Channel},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_Channel_spec = {
  "pyzeo.extension.Channel",
  sizeof(struct __pyx_obj_5pyzeo_9extension_Channel),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_Channel_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_Channel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""Channel", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Channel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Channel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Python wrapper to Zeo++ Channel.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Channel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Channel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_Atom(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Atom(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_Atom) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5pyzeo_9extension_4Atom_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_4Atom_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_4Atom_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_4Atom_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Atom[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Atom[] = {
  {"coords", __pyx_getprop_5pyzeo_9extension_4Atom_coords, __pyx_setprop_5pyzeo_9extension_4Atom_coords, 0, 0},
  {"radius", __pyx_getprop_5pyzeo_9extension_4Atom_radius, __pyx_setprop_5pyzeo_9extension_4Atom_radius, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_Atom_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_Atom},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store the information about atom (or ion) in a structure.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_Atom},
  {Py_tp_getset, (void *)__pyx_getsets_5pyzeo_9extension_Atom},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_4Atom_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_Atom},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_Atom_spec = {
  "pyzeo.extension.Atom",
  sizeof(struct __pyx_obj_5pyzeo_9extension_Atom),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_Atom_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_Atom = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""Atom", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Atom), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Atom, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store the information about atom (or ion) in a structure.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Atom, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Atom, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_4Atom_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Atom, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_AtomNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_AtomNetwork[] = {
  {"copy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_6copy},
  {"read_from_CIF", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_8read_from_CIF},
  {"read_from_ARC", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_10read_from_ARC},
  {"read_from_CSSR", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR},
  {"read_from_V1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_14read_from_V1},
  {"write_to_CSSR", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR},
  {"write_to_CIF", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_18write_to_CIF},
  {"write_to_V1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_20write_to_V1},
  {"write_to_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ},
  {"write_to_VTK", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_24write_to_VTK},
  {"write_to_MOPAC", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC},
  {"loadMass", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_29loadMass, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_28loadMass},
  {"calculate_free_sphere_parameters", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_30calculate_free_sphere_parameters},
  {"perform_voronoi_decomposition", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_32perform_voronoi_decomposition},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_AtomNetwork_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store and manipulate the input atom network.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_AtomNetwork},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_AtomNetwork},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_AtomNetwork_spec = {
  "pyzeo.extension.AtomNetwork",
  sizeof(struct __pyx_obj_5pyzeo_9extension_AtomNetwork),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_AtomNetwork_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_AtomNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""AtomNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_AtomNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store and manipulate the input atom network.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_AtomNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_AtomNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5pyzeo_9extension_11VoronoiNode_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_11VoronoiNode_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_11VoronoiNode_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_11VoronoiNode_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VoronoiNode[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_VoronoiNode[] = {
  {"coords", __pyx_getprop_5pyzeo_9extension_11VoronoiNode_coords, __pyx_setprop_5pyzeo_9extension_11VoronoiNode_coords, 0, 0},
  {"radius", __pyx_getprop_5pyzeo_9extension_11VoronoiNode_radius, __pyx_setprop_5pyzeo_9extension_11VoronoiNode_radius, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_VoronoiNode_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store the voronoi nodes with coordinates and radius\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_VoronoiNode},
  {Py_tp_getset, (void *)__pyx_getsets_5pyzeo_9extension_VoronoiNode},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_VoronoiNode},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_VoronoiNode_spec = {
  "pyzeo.extension.VoronoiNode",
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNode),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_VoronoiNode_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_VoronoiNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""VoronoiNode", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store the voronoi nodes with coordinates and radius\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VoronoiNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_VoronoiNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VoronoiNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VoronoiNetwork[] = {
  {"size", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"prune", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_8prune},
  {"analyze_writeto_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ},
  {"write_to_XYZ", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ},
  {"perform_voronoi_decomposition", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_VoronoiNetwork_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Class to store the Voronoi network generated from Voronoi decomposition\n    of atom network.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_VoronoiNetwork},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_VoronoiNetwork},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_VoronoiNetwork_spec = {
  "pyzeo.extension.VoronoiNetwork",
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_VoronoiNetwork_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_VoronoiNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""VoronoiNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Class to store the Voronoi network generated from Voronoi decomposition\n    of atom network.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VoronoiNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VoronoiNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_DijkstraNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_DijkstraNetwork[] = {
  {"from_VoronoiNetwork", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_DijkstraNetwork_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Python wrapper class to Zeo++ Djikstra Network\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_DijkstraNetwork},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_DijkstraNetwork},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_DijkstraNetwork_spec = {
  "pyzeo.extension.DijkstraNetwork",
  sizeof(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_DijkstraNetwork_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_DijkstraNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""DijkstraNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Python wrapper class to Zeo++ Djikstra Network\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_DijkstraNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_DijkstraNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_VorFace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VorFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_VorFace) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_VorFace_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_VorFace},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_VorFace},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_VorFace_spec = {
  "pyzeo.extension.VorFace",
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorFace),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5pyzeo_9extension_VorFace_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_VorFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""VorFace", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VorFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VorFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_VorCell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VorCell(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_VorCell) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VorCell[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_VorCell_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_VorCell},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_VorCell},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_7VorCell_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_VorCell},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_VorCell_spec = {
  "pyzeo.extension.VorCell",
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorCell),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_VorCell_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_VorCell = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""VorCell", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorCell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VorCell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VorCell, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_7VorCell_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VorCell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_BasicVCell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(o, __pyx_mstate_global->__pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_BasicVCell(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_BasicVCell) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5pyzeo_9extension_10BasicVCell_num_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_10BasicVCell_9num_nodes_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_BasicVCell[] = {
  {"get_num_nodes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_7get_num_nodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_6get_num_nodes},
  {"get_node_coord", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_9get_node_coord, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_8get_node_coord},
  {"get_node_id", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_11get_node_id, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_10BasicVCell_10get_node_id},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5pyzeo_9extension_10BasicVCell_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_BasicVCell[] = {
  {"num_nodes", __pyx_getprop_5pyzeo_9extension_10BasicVCell_num_nodes, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_BasicVCell_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_BasicVCell},
  {Py_tp_methods, (void *)__pyx_methods_5pyzeo_9extension_BasicVCell},
  {Py_tp_getset, (void *)__pyx_getsets_5pyzeo_9extension_BasicVCell},
  {Py_tp_init, (void *)__pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_BasicVCell},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_BasicVCell_spec = {
  "pyzeo.extension.BasicVCell",
  sizeof(struct __pyx_obj_5pyzeo_9extension_BasicVCell),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5pyzeo_9extension_BasicVCell_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_BasicVCell = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""BasicVCell", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_BasicVCell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_BasicVCell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_BasicVCell, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_BasicVCell, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_BasicVCell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension_Cycle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Cycle(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension_Cycle) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension_Cycle_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension_Cycle},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Cython wrapper class for Zeo++ CYCLE class.\n    Contains a pointer to CYCLE\n    ")},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension_Cycle},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension_Cycle_spec = {
  "pyzeo.extension.Cycle",
  sizeof(struct __pyx_obj_5pyzeo_9extension_Cycle),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5pyzeo_9extension_Cycle_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension_Cycle = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""Cycle", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Cycle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Cycle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n    Cython wrapper class for Zeo++ CYCLE class.\n    Contains a pointer to CYCLE\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Cycle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_5pyzeo_9extension___pyx_scope_struct__genexpr[--__pyx_mstate_global->__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__genexpr(PyObject *o) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_5pyzeo_9extension___pyx_scope_struct__genexpr[__pyx_mstate_global->__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__genexpr++] = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct__genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct__genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr_spec = {
  "pyzeo.extension.__pyx_scope_struct__genexpr",
  sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.""__pyx_scope_struct__genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct__genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_Xyz_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz)) __PYX_ERR(0, 15, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_Xyz_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz) < (0)) __PYX_ERR(0, 15, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz = &__pyx_type_5pyzeo_9extension_Xyz;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz) < (0)) __PYX_ERR(0, 15, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Xyz, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz) < (0)) __PYX_ERR(0, 15, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Xyz) < (0)) __PYX_ERR(0, 15, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_Point_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point)) __PYX_ERR(0, 44, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_Point_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point) < (0)) __PYX_ERR(0, 44, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point = &__pyx_type_5pyzeo_9extension_Point;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point) < (0)) __PYX_ERR(0, 44, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Point, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point) < (0)) __PYX_ERR(0, 44, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Point) < (0)) __PYX_ERR(0, 44, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_Channel_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel)) __PYX_ERR(0, 152, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_Channel_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel) < (0)) __PYX_ERR(0, 152, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel = &__pyx_type_5pyzeo_9extension_Channel;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel) < (0)) __PYX_ERR(0, 152, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Channel, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel) < (0)) __PYX_ERR(0, 152, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Channel) < (0)) __PYX_ERR(0, 152, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_Atom_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom)) __PYX_ERR(0, 390, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_Atom_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom) < (0)) __PYX_ERR(0, 390, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom = &__pyx_type_5pyzeo_9extension_Atom;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom) < (0)) __PYX_ERR(0, 390, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Atom, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom) < (0)) __PYX_ERR(0, 390, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Atom) < (0)) __PYX_ERR(0, 390, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_AtomNetwork_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork)) __PYX_ERR(0, 423, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_AtomNetwork_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork) < (0)) __PYX_ERR(0, 423, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork = &__pyx_type_5pyzeo_9extension_AtomNetwork;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork) < (0)) __PYX_ERR(0, 423, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_AtomNetwork, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork) < (0)) __PYX_ERR(0, 423, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_AtomNetwork) < (0)) __PYX_ERR(0, 423, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_VoronoiNode_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode)) __PYX_ERR(0, 843, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_VoronoiNode_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode) < (0)) __PYX_ERR(0, 843, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode = &__pyx_type_5pyzeo_9extension_VoronoiNode;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode) < (0)) __PYX_ERR(0, 843, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_VoronoiNode, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode) < (0)) __PYX_ERR(0, 843, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNode) < (0)) __PYX_ERR(0, 843, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_VoronoiNetwork_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)) __PYX_ERR(0, 875, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_VoronoiNetwork_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork) < (0)) __PYX_ERR(0, 875, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork = &__pyx_type_5pyzeo_9extension_VoronoiNetwork;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork) < (0)) __PYX_ERR(0, 875, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork) < (0)) __PYX_ERR(0, 875, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork) < (0)) __PYX_ERR(0, 875, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_DijkstraNetwork_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork)) __PYX_ERR(0, 1025, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_DijkstraNetwork_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork) < (0)) __PYX_ERR(0, 1025, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork = &__pyx_type_5pyzeo_9extension_DijkstraNetwork;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork) < (0)) __PYX_ERR(0, 1025, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_DijkstraNetwork, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork) < (0)) __PYX_ERR(0, 1025, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork) < (0)) __PYX_ERR(0, 1025, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_VorFace_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace)) __PYX_ERR(2, 295, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_VorFace_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace) < (0)) __PYX_ERR(2, 295, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace = &__pyx_type_5pyzeo_9extension_VorFace;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace) < (0)) __PYX_ERR(2, 295, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_VorFace, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorFace) < (0)) __PYX_ERR(2, 295, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_VorCell_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell)) __PYX_ERR(0, 1057, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_VorCell_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell) < (0)) __PYX_ERR(0, 1057, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell = &__pyx_type_5pyzeo_9extension_VorCell;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell) < (0)) __PYX_ERR(0, 1057, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_VorCell, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell) < (0)) __PYX_ERR(0, 1057, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_VorCell) < (0)) __PYX_ERR(0, 1057, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_BasicVCell_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell)) __PYX_ERR(0, 1068, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_BasicVCell_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell) < (0)) __PYX_ERR(0, 1068, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell = &__pyx_type_5pyzeo_9extension_BasicVCell;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell) < (0)) __PYX_ERR(0, 1068, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_BasicVCell, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell) < (0)) __PYX_ERR(0, 1068, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_BasicVCell) < (0)) __PYX_ERR(0, 1068, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension_Cycle_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle)) __PYX_ERR(2, 319, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension_Cycle_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle) < (0)) __PYX_ERR(2, 319, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle = &__pyx_type_5pyzeo_9extension_Cycle;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle) < (0)) __PYX_ERR(2, 319, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Cycle, (PyObject *) __pyx_mstate->__pyx_ptype_5pyzeo_9extension_Cycle) < (0)) __PYX_ERR(2, 319, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr)) __PYX_ERR(0, 771, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr_spec, __pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr) < (0)) __PYX_ERR(0, 771, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr = &__pyx_type_5pyzeo_9extension___pyx_scope_struct__genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr) < (0)) __PYX_ERR(0, 771, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_extension(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_extension},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "extension",
      0, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_extension(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_extension(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_extension(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'extension' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "extension" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_extension", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_pyzeo__extension) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name_2, __pyx_mstate_global->__pyx_n_u_main) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyzeo.extension")) {
      if (unlikely((PyDict_SetItemString(modules, "pyzeo.extension", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "pyzeo/extension.pyx":6
 * # distutils: sources = src/graphstorage.cc
 * 
 * import sys             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_sys, __pyx_t_2) < (0)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":39
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 *     def scale(self, double factor):             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_3Xyz_7scale, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Xyz_scale, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Xyz, __pyx_mstate_global->__pyx_n_u_scale, __pyx_t_2) < (0)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_3Xyz_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Xyz___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_3Xyz_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Xyz___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_5Point_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Point___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_5Point_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Point___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":77
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_1initializeRadTable, 0, __pyx_mstate_global->__pyx_n_u_initializeRadTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_initializeRadTable, __pyx_t_2) < (0)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":83
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_3initializeCovRadTable, 0, __pyx_mstate_global->__pyx_n_u_initializeCovRadTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_initializeCovRadTable, __pyx_t_2) < (0)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":89
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_5initializeMassTable, 0, __pyx_mstate_global->__pyx_n_u_initializeMassTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_initializeMassTable, __pyx_t_2) < (0)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":95
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7initializeAtomCharacterTable, 0, __pyx_mstate_global->__pyx_n_u_initializeAtomCharacterTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_initializeAtomCharacterTable, __pyx_t_2) < (0)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":101
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_9initializeAtomicNumberTable, 0, __pyx_mstate_global->__pyx_n_u_initializeAtomicNumberTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_initializeAtomicNumberTable, __pyx_t_2) < (0)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":107
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11readRadTable, 0, __pyx_mstate_global->__pyx_n_u_readRadTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readRadTable, __pyx_t_2) < (0)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":116
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_13readMassTable, 0, __pyx_mstate_global->__pyx_n_u_readMassTable, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readMassTable, __pyx_t_2) < (0)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":125
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_15lookupRadius, 0, __pyx_mstate_global->__pyx_n_u_lookupRadius, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_lookupRadius, __pyx_t_2) < (0)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":138
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_17lookupCovRadius, 0, __pyx_mstate_global->__pyx_n_u_lookupCovRadius, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_lookupCovRadius, __pyx_t_2) < (0)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":141
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_19lookupMass, 0, __pyx_mstate_global->__pyx_n_u_lookupMass, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[15])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_lookupMass, __pyx_t_2) < (0)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":144
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_21lookupAtomicNumber, 0, __pyx_mstate_global->__pyx_n_u_lookupAtomicNumber, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[16])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_lookupAtomicNumber, __pyx_t_2) < (0)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":147
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_23isMetal, 0, __pyx_mstate_global->__pyx_n_u_isMetal, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[17])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_isMetal, __pyx_t_2) < (0)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":161
 *         del self.thisptr
 * 
 *     def find_bounding_atoms(self, AtomNetwork atmnet, list bvcells):             # <<<<<<<<<<<<<<
 *         """
 *         Find atoms that bound this channel.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7Channel_5find_bounding_atoms, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Channel_find_bounding_atoms, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[18])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_Channel, __pyx_mstate_global->__pyx_n_u_find_bounding_atoms, __pyx_t_2) < (0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7Channel_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Channel___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[19])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7Channel_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Channel___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[20])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":193
 * 
 * 
 * def find_channels(VoronoiNetwork vornet, double channel_radius):             # <<<<<<<<<<<<<<
 *     """
 *     Find channels in a Voronoi network.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_25find_channels, 0, __pyx_mstate_global->__pyx_n_u_find_channels, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[21])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_find_channels, __pyx_t_2) < (0)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":235
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_27calc_pore_size_distribution, 0, __pyx_mstate_global->__pyx_n_u_calc_pore_size_distribution, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[22])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[1]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_calc_pore_size_distribution, __pyx_t_2) < (0)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":281
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_29readCiffile, 0, __pyx_mstate_global->__pyx_n_u_readCiffile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[23])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readCiffile, __pyx_t_2) < (0)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":290
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_31readArcfile, 0, __pyx_mstate_global->__pyx_n_u_readArcfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[24])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readArcfile, __pyx_t_2) < (0)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":299
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_33readCucfile, 0, __pyx_mstate_global->__pyx_n_u_readCucfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[25])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readCucfile, __pyx_t_2) < (0)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":308
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_35readCssrfile, 0, __pyx_mstate_global->__pyx_n_u_readCssrfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[26])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readCssrfile, __pyx_t_2) < (0)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":317
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_37readV1file, 0, __pyx_mstate_global->__pyx_n_u_readV1file, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[27])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_readV1file, __pyx_t_2) < (0)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":326
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_39writeCssrfile, 0, __pyx_mstate_global->__pyx_n_u_writeCssrfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[28])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeCssrfile, __pyx_t_2) < (0)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":334
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_41writeCiffile, 0, __pyx_mstate_global->__pyx_n_u_writeCiffile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[29])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeCiffile, __pyx_t_2) < (0)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":342
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_43writeV1file, 0, __pyx_mstate_global->__pyx_n_u_writeV1file, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[30])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeV1file, __pyx_t_2) < (0)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":350
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_45writeNt2file, 0, __pyx_mstate_global->__pyx_n_u_writeNt2file, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[31])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[2]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeNt2file, __pyx_t_2) < (0)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":362
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_47writeXyzfile, 0, __pyx_mstate_global->__pyx_n_u_writeXyzfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[32])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeXyzfile, __pyx_t_2) < (0)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":371
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_49writeVtkfile, 0, __pyx_mstate_global->__pyx_n_u_writeVtkfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[33])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeVtkfile, __pyx_t_2) < (0)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":379
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_51writeMopacfile, 0, __pyx_mstate_global->__pyx_n_u_writeMopacfile, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[34])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_writeMopacfile, __pyx_t_2) < (0)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_4Atom_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Atom___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[35])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_4Atom_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Atom___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[36])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":439
 *         del self.thisptr
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_7copy, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_copy, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[37])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_copy, __pyx_t_2) < (0)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":463
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_9read_from_CIF, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_read_from_CIF, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[38])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[3]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CIF, __pyx_t_2) < (0)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CIF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CIF, __pyx_t_3) < (0)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":502
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_11read_from_ARC, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_read_from_ARC, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[39])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_mstate_global->__pyx_tuple[3]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_ARC, __pyx_t_3) < (0)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_ARC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_ARC, __pyx_t_2) < (0)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":541
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_read_from_CSSR, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[40])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[3]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CSSR, __pyx_t_2) < (0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CSSR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_CSSR, __pyx_t_3) < (0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":581
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_15read_from_V1, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_read_from_V1, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[41])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_mstate_global->__pyx_tuple[3]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_V1, __pyx_t_3) < (0)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_V1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_read_from_V1, __pyx_t_2) < (0)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":619
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_CSSR, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[42])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_CSSR, __pyx_t_2) < (0)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":634
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_19write_to_CIF, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_CIF, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[43])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_CIF, __pyx_t_2) < (0)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":649
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_21write_to_V1, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_V1, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[44])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_V1, __pyx_t_2) < (0)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":664
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_XYZ, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[45])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_XYZ, __pyx_t_2) < (0)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":685
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_25write_to_VTK, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_VTK, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[46])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_VTK, __pyx_t_2) < (0)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":700
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_write_to_MOPAC, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[47])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_write_to_MOPAC, __pyx_t_2) < (0)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":714
 *              raise IOError
 * 
 *     def loadMass(self):             # <<<<<<<<<<<<<<
 *         """
 *         Load atomic masses from masses table and assign to AtomNetwork
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_29loadMass, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_loadMass, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[48])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_loadMass, __pyx_t_2) < (0)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":720
 *         zeo_loadMass(True, self.thisptr)
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_31calculate_free_sphere_parameters, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_calculate_free_spher, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[49])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_calculate_free_sphere_parameters, __pyx_t_2) < (0)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_33perform_voronoi_decomposition, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork_perform_voronoi_deco, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[50])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[4]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_t_2) < (0)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_35__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[51])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11AtomNetwork_37__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_AtomNetwork___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[52])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNode___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[53])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNode___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[54])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":892
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_7size, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork_size, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[55])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_size, __pyx_t_2) < (0)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":895
 *         return self.thisptr.nodes.size()
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_9prune, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork_prune, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[56])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_prune, __pyx_t_2) < (0)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":909
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork_analyze_writeto_X, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[57])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[5]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_analyze_writeto_XYZ, __pyx_t_2) < (0)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":937
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork_write_to_XYZ, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[58])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[6]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_write_to_XYZ, __pyx_t_2) < (0)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":956
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork_perform_voronoi_d, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[59])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[7]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_t_2) < (0)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_mstate_global->__pyx_n_u_perform_voronoi_decomposition, __pyx_t_3) < (0)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[60])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_3) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VoronoiNetwork___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[61])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_3) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":993
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_53substitute_atoms, 0, __pyx_mstate_global->__pyx_n_u_substitute_atoms, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[62])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_substitute_atoms, __pyx_t_3) < (0)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1032
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_VoronoiNetwork(vornet):
 *         """
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DijkstraNetwork_from_VoronoiNetw, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[63])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork, __pyx_mstate_global->__pyx_n_u_from_VoronoiNetwork, __pyx_t_3) < (0)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject*)__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork, __pyx_mstate_global->__pyx_n_u_from_VoronoiNetwork); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_DijkstraNetwork, __pyx_mstate_global->__pyx_n_u_from_VoronoiNetwork, __pyx_t_2) < (0)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DijkstraNetwork___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[64])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DijkstraNetwork___setstate_cytho, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[65])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7VorCell_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VorCell___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[66])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_7VorCell_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_VorCell___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[67])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1079
 *         del self.thisptr
 * 
 *     def get_num_nodes(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of nodes in this Voronoi cell."""
 *         return self.thisptr.getNumNodes()
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_10BasicVCell_7get_num_nodes, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_BasicVCell_get_num_nodes, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[68])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell, __pyx_mstate_global->__pyx_n_u_get_num_nodes, __pyx_t_2) < (0)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1083
 *         return self.thisptr.getNumNodes()
 * 
 *     def get_node_coord(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the coordinates of the node at the given index as a Point."""
 *         cdef CPoint coord = self.thisptr.getNodeCoord(index)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_10BasicVCell_9get_node_coord, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_BasicVCell_get_node_coord, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[69])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell, __pyx_mstate_global->__pyx_n_u_get_node_coord, __pyx_t_2) < (0)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1088
 *         return Point(coord.vals[0], coord.vals[1], coord.vals[2])
 * 
 *     def get_node_id(self, int index):             # <<<<<<<<<<<<<<
 *         """Returns the node ID at the given index."""
 *         return self.thisptr.getNodeID(index)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_10BasicVCell_11get_node_id, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_BasicVCell_get_node_id, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[70])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_5pyzeo_9extension_BasicVCell, __pyx_mstate_global->__pyx_n_u_get_node_id, __pyx_t_2) < (0)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_10BasicVCell_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_BasicVCell___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[71])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_10BasicVCell_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_BasicVCell___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[72])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < (0)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1098
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_55compute_centroid_4cycles, 0, __pyx_mstate_global->__pyx_n_u_compute_centroid_4cycles, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[73])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_compute_centroid_4cycles, __pyx_t_2) < (0)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1133
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_57compute_face_centers, 0, __pyx_mstate_global->__pyx_n_u_compute_face_centers, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[74])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_compute_face_centers, __pyx_t_2) < (0)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1143
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_59warning, 0, __pyx_mstate_global->__pyx_n_u_warning, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[75])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_warning, __pyx_t_2) < (0)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1147
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_61simplify_highaccuracy_vornet, 0, __pyx_mstate_global->__pyx_n_u_simplify_highaccuracy_vornet, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[76])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_simplify_highaccuracy_vornet, __pyx_t_2) < (0)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1155
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_63reduced_highaccuracy_vornodes, 0, __pyx_mstate_global->__pyx_n_u_reduced_highaccuracy_vornodes, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[77])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduced_highaccuracy_vornodes, __pyx_t_2) < (0)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1174
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_65pruned_highaccuracy_voronoi_network, 0, __pyx_mstate_global->__pyx_n_u_pruned_highaccuracy_voronoi_netw, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[78])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[8]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_pruned_highaccuracy_voronoi_netw, __pyx_t_2) < (0)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1189
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_67get_nearest_largest_diameter_highaccuracy_vornode, 0, __pyx_mstate_global->__pyx_n_u_get_nearest_largest_diameter_hig, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[79])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[9]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_get_nearest_largest_diameter_hig, __pyx_t_2) < (0)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1219
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_69generate_simplified_highaccuracy_voronoi_network, 0, __pyx_mstate_global->__pyx_n_u_generate_simplified_highaccuracy, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[80])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[10]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_generate_simplified_highaccuracy, __pyx_t_2) < (0)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1273
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_71prune_voronoi_network_close_node, 0, __pyx_mstate_global->__pyx_n_u_prune_voronoi_network_close_node, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[81])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[11]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_prune_voronoi_network_close_node, __pyx_t_2) < (0)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1312
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_73volume, 0, __pyx_mstate_global->__pyx_n_u_volume, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[82])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[12]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_volume, __pyx_t_2) < (0)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1376
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_75surface_area, 0, __pyx_mstate_global->__pyx_n_u_surface_area, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[83])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[13]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_surface_area, __pyx_t_2) < (0)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1437
 * # high_accuracy
 * _accuracy_kw = {
 *         "OCC","FCC","ACC","AQC","DDH","TIH","ICH","ICC","RIH","S4","S10","S20",             # <<<<<<<<<<<<<<
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
*/
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_OCC) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_FCC) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ACC) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_AQC) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_DDH) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_TIH) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ICH) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ICC) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_RIH) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S4) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S10) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S20) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S30) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S40) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S50) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S100) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S500) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S1000) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_S10000) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_DEF) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_HI) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_MED) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_LOW) < (0)) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_accuracy_kw, __pyx_t_2) < (0)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1440
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5pyzeo_9extension_77high_accuracy_atomnet, 0, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet, NULL, __pyx_mstate_global->__pyx_n_u_pyzeo_extension, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[84])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[14]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_high_accuracy_atomnet, __pyx_t_2) < (0)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = src/networkinfo.cc
 * # distutils: sources = src/networkio.cc
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_2) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pyzeo.extension", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyzeo.extension");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_ACC, sizeof(__pyx_k_ACC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ACC */
  {__pyx_k_AQC, sizeof(__pyx_k_AQC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AQC */
  {__pyx_k_Accuracy_setting_not_understood, sizeof(__pyx_k_Accuracy_setting_not_understood), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Accuracy_setting_not_understood */
  {__pyx_k_Atom, sizeof(__pyx_k_Atom), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Atom */
  {__pyx_k_AtomNetwork, sizeof(__pyx_k_AtomNetwork), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork */
  {__pyx_k_AtomNetwork___reduce_cython, sizeof(__pyx_k_AtomNetwork___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork___reduce_cython */
  {__pyx_k_AtomNetwork___setstate_cython, sizeof(__pyx_k_AtomNetwork___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork___setstate_cython */
  {__pyx_k_AtomNetwork_calculate_free_spher, sizeof(__pyx_k_AtomNetwork_calculate_free_spher), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_calculate_free_spher */
  {__pyx_k_AtomNetwork_copy, sizeof(__pyx_k_AtomNetwork_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_copy */
  {__pyx_k_AtomNetwork_loadMass, sizeof(__pyx_k_AtomNetwork_loadMass), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_loadMass */
  {__pyx_k_AtomNetwork_perform_voronoi_deco, sizeof(__pyx_k_AtomNetwork_perform_voronoi_deco), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_perform_voronoi_deco */
  {__pyx_k_AtomNetwork_read_from_ARC, sizeof(__pyx_k_AtomNetwork_read_from_ARC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_read_from_ARC */
  {__pyx_k_AtomNetwork_read_from_CIF, sizeof(__pyx_k_AtomNetwork_read_from_CIF), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_read_from_CIF */
  {__pyx_k_AtomNetwork_read_from_CSSR, sizeof(__pyx_k_AtomNetwork_read_from_CSSR), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_read_from_CSSR */
  {__pyx_k_AtomNetwork_read_from_V1, sizeof(__pyx_k_AtomNetwork_read_from_V1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_read_from_V1 */
  {__pyx_k_AtomNetwork_write_to_CIF, sizeof(__pyx_k_AtomNetwork_write_to_CIF), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_CIF */
  {__pyx_k_AtomNetwork_write_to_CSSR, sizeof(__pyx_k_AtomNetwork_write_to_CSSR), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_CSSR */
  {__pyx_k_AtomNetwork_write_to_MOPAC, sizeof(__pyx_k_AtomNetwork_write_to_MOPAC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_MOPAC */
  {__pyx_k_AtomNetwork_write_to_V1, sizeof(__pyx_k_AtomNetwork_write_to_V1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_V1 */
  {__pyx_k_AtomNetwork_write_to_VTK, sizeof(__pyx_k_AtomNetwork_write_to_VTK), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_VTK */
  {__pyx_k_AtomNetwork_write_to_XYZ, sizeof(__pyx_k_AtomNetwork_write_to_XYZ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AtomNetwork_write_to_XYZ */
  {__pyx_k_Atom___reduce_cython, sizeof(__pyx_k_Atom___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Atom___reduce_cython */
  {__pyx_k_Atom___setstate_cython, sizeof(__pyx_k_Atom___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Atom___setstate_cython */
  {__pyx_k_BasicVCell, sizeof(__pyx_k_BasicVCell), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell */
  {__pyx_k_BasicVCell___reduce_cython, sizeof(__pyx_k_BasicVCell___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell___reduce_cython */
  {__pyx_k_BasicVCell___setstate_cython, sizeof(__pyx_k_BasicVCell___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell___setstate_cython */
  {__pyx_k_BasicVCell_get_node_coord, sizeof(__pyx_k_BasicVCell_get_node_coord), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell_get_node_coord */
  {__pyx_k_BasicVCell_get_node_id, sizeof(__pyx_k_BasicVCell_get_node_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell_get_node_id */
  {__pyx_k_BasicVCell_get_num_nodes, sizeof(__pyx_k_BasicVCell_get_num_nodes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_BasicVCell_get_num_nodes */
  {__pyx_k_Channel, sizeof(__pyx_k_Channel), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Channel */
  {__pyx_k_Channel___reduce_cython, sizeof(__pyx_k_Channel___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Channel___reduce_cython */
  {__pyx_k_Channel___setstate_cython, sizeof(__pyx_k_Channel___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Channel___setstate_cython */
  {__pyx_k_Channel_find_bounding_atoms, sizeof(__pyx_k_Channel_find_bounding_atoms), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Channel_find_bounding_atoms */
  {__pyx_k_Cycle, sizeof(__pyx_k_Cycle), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Cycle */
  {__pyx_k_DDH, sizeof(__pyx_k_DDH), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DDH */
  {__pyx_k_DEF, sizeof(__pyx_k_DEF), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DEF */
  {__pyx_k_DijkstraNetwork, sizeof(__pyx_k_DijkstraNetwork), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DijkstraNetwork */
  {__pyx_k_DijkstraNetwork___reduce_cython, sizeof(__pyx_k_DijkstraNetwork___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DijkstraNetwork___reduce_cython */
  {__pyx_k_DijkstraNetwork___setstate_cytho, sizeof(__pyx_k_DijkstraNetwork___setstate_cytho), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DijkstraNetwork___setstate_cytho */
  {__pyx_k_DijkstraNetwork_from_VoronoiNetw, sizeof(__pyx_k_DijkstraNetwork_from_VoronoiNetw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DijkstraNetwork_from_VoronoiNetw */
  {__pyx_k_FCC, sizeof(__pyx_k_FCC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_FCC */
  {__pyx_k_HI, sizeof(__pyx_k_HI), 0, 1, 1}, /* PyObject cname: __pyx_n_u_HI */
  {__pyx_k_ICC, sizeof(__pyx_k_ICC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ICC */
  {__pyx_k_ICH, sizeof(__pyx_k_ICH), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ICH */
  {__pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_IOError */
  {__pyx_k_LOW, sizeof(__pyx_k_LOW), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LOW */
  {__pyx_k_MED, sizeof(__pyx_k_MED), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MED */
  {__pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MemoryError */
  {__pyx_k_N, sizeof(__pyx_k_N), 0, 1, 1}, /* PyObject cname: __pyx_n_u_N */
  {__pyx_k_No_high_accuracy, sizeof(__pyx_k_No_high_accuracy), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_No_high_accuracy */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_OCC, sizeof(__pyx_k_OCC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_OCC */
  {__pyx_k_Point, sizeof(__pyx_k_Point), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Point */
  {__pyx_k_Point___reduce_cython, sizeof(__pyx_k_Point___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Point___reduce_cython */
  {__pyx_k_Point___setstate_cython, sizeof(__pyx_k_Point___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Point___setstate_cython */
  {__pyx_k_RIH, sizeof(__pyx_k_RIH), 0, 1, 1}, /* PyObject cname: __pyx_n_u_RIH */
  {__pyx_k_S10, sizeof(__pyx_k_S10), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S10 */
  {__pyx_k_S100, sizeof(__pyx_k_S100), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S100 */
  {__pyx_k_S1000, sizeof(__pyx_k_S1000), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S1000 */
  {__pyx_k_S10000, sizeof(__pyx_k_S10000), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S10000 */
  {__pyx_k_S20, sizeof(__pyx_k_S20), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S20 */
  {__pyx_k_S30, sizeof(__pyx_k_S30), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S30 */
  {__pyx_k_S4, sizeof(__pyx_k_S4), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S4 */
  {__pyx_k_S40, sizeof(__pyx_k_S40), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S40 */
  {__pyx_k_S50, sizeof(__pyx_k_S50), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S50 */
  {__pyx_k_S500, sizeof(__pyx_k_S500), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S500 */
  {__pyx_k_TIH, sizeof(__pyx_k_TIH), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TIH */
  {__pyx_k_This_value_is_not_supposed_to_be, sizeof(__pyx_k_This_value_is_not_supposed_to_be), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_This_value_is_not_supposed_to_be */
  {__pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TypeError */
  {__pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ValueError */
  {__pyx_k_VorCell, sizeof(__pyx_k_VorCell), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VorCell */
  {__pyx_k_VorCell___reduce_cython, sizeof(__pyx_k_VorCell___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VorCell___reduce_cython */
  {__pyx_k_VorCell___setstate_cython, sizeof(__pyx_k_VorCell___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VorCell___setstate_cython */
  {__pyx_k_VorFace, sizeof(__pyx_k_VorFace), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VorFace */
  {__pyx_k_VoronoiNetwork, sizeof(__pyx_k_VoronoiNetwork), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork */
  {__pyx_k_VoronoiNetwork___reduce_cython, sizeof(__pyx_k_VoronoiNetwork___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork___reduce_cython */
  {__pyx_k_VoronoiNetwork___setstate_cython, sizeof(__pyx_k_VoronoiNetwork___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork___setstate_cython */
  {__pyx_k_VoronoiNetwork_analyze_writeto_X, sizeof(__pyx_k_VoronoiNetwork_analyze_writeto_X), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork_analyze_writeto_X */
  {__pyx_k_VoronoiNetwork_perform_voronoi_d, sizeof(__pyx_k_VoronoiNetwork_perform_voronoi_d), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork_perform_voronoi_d */
  {__pyx_k_VoronoiNetwork_prune, sizeof(__pyx_k_VoronoiNetwork_prune), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork_prune */
  {__pyx_k_VoronoiNetwork_size, sizeof(__pyx_k_VoronoiNetwork_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork_size */
  {__pyx_k_VoronoiNetwork_write_to_XYZ, sizeof(__pyx_k_VoronoiNetwork_write_to_XYZ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNetwork_write_to_XYZ */
  {__pyx_k_VoronoiNode, sizeof(__pyx_k_VoronoiNode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNode */
  {__pyx_k_VoronoiNode___reduce_cython, sizeof(__pyx_k_VoronoiNode___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNode___reduce_cython */
  {__pyx_k_VoronoiNode___setstate_cython, sizeof(__pyx_k_VoronoiNode___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VoronoiNode___setstate_cython */
  {__pyx_k_WARNING, sizeof(__pyx_k_WARNING), 0, 1, 1}, /* PyObject cname: __pyx_n_u_WARNING */
  {__pyx_k_Xyz, sizeof(__pyx_k_Xyz), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Xyz */
  {__pyx_k_Xyz___reduce_cython, sizeof(__pyx_k_Xyz___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Xyz___reduce_cython */
  {__pyx_k_Xyz___setstate_cython, sizeof(__pyx_k_Xyz___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Xyz___setstate_cython */
  {__pyx_k_Xyz_scale, sizeof(__pyx_k_Xyz_scale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Xyz_scale */
  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__2 */
  {__pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__3 */
  {__pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__4 */
  {__pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__5 */
  {__pyx_k_acc_set, sizeof(__pyx_k_acc_set), 0, 1, 1}, /* PyObject cname: __pyx_n_u_acc_set */
  {__pyx_k_access_info, sizeof(__pyx_k_access_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_access_info */
  {__pyx_k_accuracy_kw, sizeof(__pyx_k_accuracy_kw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_accuracy_kw */
  {__pyx_k_accuracy_setting, sizeof(__pyx_k_accuracy_setting), 0, 1, 1}, /* PyObject cname: __pyx_n_u_accuracy_setting */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_analyze_writeto_XYZ, sizeof(__pyx_k_analyze_writeto_XYZ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_analyze_writeto_XYZ */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_atmnet, sizeof(__pyx_k_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_atmnet */
  {__pyx_k_atmnet_copy, sizeof(__pyx_k_atmnet_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_atmnet_copy */
  {__pyx_k_atom_ids, sizeof(__pyx_k_atom_ids), 0, 1, 1}, /* PyObject cname: __pyx_n_u_atom_ids */
  {__pyx_k_basicvcell, sizeof(__pyx_k_basicvcell), 0, 1, 1}, /* PyObject cname: __pyx_n_u_basicvcell */
  {__pyx_k_bvcell, sizeof(__pyx_k_bvcell), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bvcell */
  {__pyx_k_bvcelllist, sizeof(__pyx_k_bvcelllist), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bvcelllist */
  {__pyx_k_bvcells, sizeof(__pyx_k_bvcells), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bvcells */
  {__pyx_k_c_atmnet, sizeof(__pyx_k_c_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_atmnet */
  {__pyx_k_c_atmnet_ptr, sizeof(__pyx_k_c_atmnet_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_atmnet_ptr */
  {__pyx_k_c_atmnetcp_ptr, sizeof(__pyx_k_c_atmnetcp_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_atmnetcp_ptr */
  {__pyx_k_c_atmnetptr, sizeof(__pyx_k_c_atmnetptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_atmnetptr */
  {__pyx_k_c_bvcells, sizeof(__pyx_k_c_bvcells), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_bvcells */
  {__pyx_k_c_channels, sizeof(__pyx_k_c_channels), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_channels */
  {__pyx_k_c_filename, sizeof(__pyx_k_c_filename), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_filename */
  {__pyx_k_c_fname, sizeof(__pyx_k_c_fname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_fname */
  {__pyx_k_c_ha_atmnetptr, sizeof(__pyx_k_c_ha_atmnetptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_ha_atmnetptr */
  {__pyx_k_c_ha_vornet_ptr, sizeof(__pyx_k_c_ha_vornet_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_ha_vornet_ptr */
  {__pyx_k_c_org_atmnet_ptr, sizeof(__pyx_k_c_org_atmnet_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_org_atmnet_ptr */
  {__pyx_k_c_rad_file, sizeof(__pyx_k_c_rad_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_rad_file */
  {__pyx_k_c_vornet, sizeof(__pyx_k_c_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_vornet */
  {__pyx_k_c_vornet_ptr, sizeof(__pyx_k_c_vornet_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_vornet_ptr */
  {__pyx_k_c_vornetptr, sizeof(__pyx_k_c_vornetptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_vornetptr */
  {__pyx_k_calc_pore_size_distribution, sizeof(__pyx_k_calc_pore_size_distribution), 0, 1, 1}, /* PyObject cname: __pyx_n_u_calc_pore_size_distribution */
  {__pyx_k_calculate_free_sphere_parameters, sizeof(__pyx_k_calculate_free_sphere_parameters), 0, 1, 1}, /* PyObject cname: __pyx_n_u_calculate_free_sphere_parameters */
  {__pyx_k_center, sizeof(__pyx_k_center), 0, 1, 1}, /* PyObject cname: __pyx_n_u_center */
  {__pyx_k_centroid, sizeof(__pyx_k_centroid), 0, 1, 1}, /* PyObject cname: __pyx_n_u_centroid */
  {__pyx_k_centroid_list, sizeof(__pyx_k_centroid_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_centroid_list */
  {__pyx_k_channel, sizeof(__pyx_k_channel), 0, 1, 1}, /* PyObject cname: __pyx_n_u_channel */
  {__pyx_k_channel_radius, sizeof(__pyx_k_channel_radius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_channel_radius */
  {__pyx_k_chist_file, sizeof(__pyx_k_chist_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_chist_file */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_close, sizeof(__pyx_k_close), 0, 1, 1}, /* PyObject cname: __pyx_n_u_close */
  {__pyx_k_cls, sizeof(__pyx_k_cls), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cls */
  {__pyx_k_cname, sizeof(__pyx_k_cname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cname */
  {__pyx_k_cnd_file, sizeof(__pyx_k_cnd_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cnd_file */
  {__pyx_k_cntr, sizeof(__pyx_k_cntr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cntr */
  {__pyx_k_compute_centroid_4cycles, sizeof(__pyx_k_compute_centroid_4cycles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_compute_centroid_4cycles */
  {__pyx_k_compute_face_centers, sizeof(__pyx_k_compute_face_centers), 0, 1, 1}, /* PyObject cname: __pyx_n_u_compute_face_centers */
  {__pyx_k_coord, sizeof(__pyx_k_coord), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coord */
  {__pyx_k_coords, sizeof(__pyx_k_coords), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coords */
  {__pyx_k_copy, sizeof(__pyx_k_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_copy */
  {__pyx_k_cpnt_file, sizeof(__pyx_k_cpnt_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cpnt_file */
  {__pyx_k_cpoint_ptr, sizeof(__pyx_k_cpoint_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cpoint_ptr */
  {__pyx_k_csph_file, sizeof(__pyx_k_csph_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_csph_file */
  {__pyx_k_cutoff_radius, sizeof(__pyx_k_cutoff_radius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cutoff_radius */
  {__pyx_k_cycles, sizeof(__pyx_k_cycles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cycles */
  {__pyx_k_delta, sizeof(__pyx_k_delta), 0, 1, 1}, /* PyObject cname: __pyx_n_u_delta */
  {__pyx_k_dict, sizeof(__pyx_k_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dict */
  {__pyx_k_dijkstranet, sizeof(__pyx_k_dijkstranet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dijkstranet */
  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_disable */
  {__pyx_k_e_vnode, sizeof(__pyx_k_e_vnode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_e_vnode */
  {__pyx_k_ecs, sizeof(__pyx_k_ecs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ecs */
  {__pyx_k_edge_center, sizeof(__pyx_k_edge_center), 0, 1, 1}, /* PyObject cname: __pyx_n_u_edge_center */
  {__pyx_k_edge_centers, sizeof(__pyx_k_edge_centers), 0, 1, 1}, /* PyObject cname: __pyx_n_u_edge_centers */
  {__pyx_k_edge_end, sizeof(__pyx_k_edge_end), 0, 1, 1}, /* PyObject cname: __pyx_n_u_edge_end */
  {__pyx_k_edge_orig, sizeof(__pyx_k_edge_orig), 0, 1, 1}, /* PyObject cname: __pyx_n_u_edge_orig */
  {__pyx_k_element, sizeof(__pyx_k_element), 0, 1, 1}, /* PyObject cname: __pyx_n_u_element */
  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_enable */
  {__pyx_k_exclude_pockets, sizeof(__pyx_k_exclude_pockets), 0, 1, 1}, /* PyObject cname: __pyx_n_u_exclude_pockets */
  {__pyx_k_extended_output, sizeof(__pyx_k_extended_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_extended_output */
  {__pyx_k_face_centers, sizeof(__pyx_k_face_centers), 0, 1, 1}, /* PyObject cname: __pyx_n_u_face_centers */
  {__pyx_k_face_node_ids, sizeof(__pyx_k_face_node_ids), 0, 1, 1}, /* PyObject cname: __pyx_n_u_face_node_ids */
  {__pyx_k_factor, sizeof(__pyx_k_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_factor */
  {__pyx_k_fcs, sizeof(__pyx_k_fcs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fcs */
  {__pyx_k_filename, sizeof(__pyx_k_filename), 0, 1, 1}, /* PyObject cname: __pyx_n_u_filename */
  {__pyx_k_find_bounding_atoms, sizeof(__pyx_k_find_bounding_atoms), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_bounding_atoms */
  {__pyx_k_find_channels, sizeof(__pyx_k_find_channels), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_channels */
  {__pyx_k_from_VoronoiNetwork, sizeof(__pyx_k_from_VoronoiNetwork), 0, 1, 1}, /* PyObject cname: __pyx_n_u_from_VoronoiNetwork */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_gc */
  {__pyx_k_generate_simplified_highaccuracy, sizeof(__pyx_k_generate_simplified_highaccuracy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_generate_simplified_highaccuracy */
  {__pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_genexpr */
  {__pyx_k_get_nearest_largest_diameter_hig, sizeof(__pyx_k_get_nearest_largest_diameter_hig), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_nearest_largest_diameter_hig */
  {__pyx_k_get_node_coord, sizeof(__pyx_k_get_node_coord), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_node_coord */
  {__pyx_k_get_node_id, sizeof(__pyx_k_get_node_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_node_id */
  {__pyx_k_get_num_nodes, sizeof(__pyx_k_get_num_nodes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_num_nodes */
  {__pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getstate */
  {__pyx_k_ha_atmnet, sizeof(__pyx_k_ha_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ha_atmnet */
  {__pyx_k_ha_node_size, sizeof(__pyx_k_ha_node_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ha_node_size */
  {__pyx_k_ha_vornet, sizeof(__pyx_k_ha_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ha_vornet */
  {__pyx_k_high_accuracy, sizeof(__pyx_k_high_accuracy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_high_accuracy */
  {__pyx_k_high_accuracy_atmnet, sizeof(__pyx_k_high_accuracy_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_high_accuracy_atmnet */
  {__pyx_k_high_accuracy_atomnet, sizeof(__pyx_k_high_accuracy_atomnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_high_accuracy_atomnet */
  {__pyx_k_high_dist_range, sizeof(__pyx_k_high_dist_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_high_dist_range */
  {__pyx_k_hist_file, sizeof(__pyx_k_hist_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_hist_file */
  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_i */
  {__pyx_k_id_set, sizeof(__pyx_k_id_set), 0, 1, 1}, /* PyObject cname: __pyx_n_u_id_set */
  {__pyx_k_ids, sizeof(__pyx_k_ids), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ids */
  {__pyx_k_iit, sizeof(__pyx_k_iit), 0, 1, 1}, /* PyObject cname: __pyx_n_u_iit */
  {__pyx_k_index, sizeof(__pyx_k_index), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index */
  {__pyx_k_initializeAtomCharacterTable, sizeof(__pyx_k_initializeAtomCharacterTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializeAtomCharacterTable */
  {__pyx_k_initializeAtomicNumberTable, sizeof(__pyx_k_initializeAtomicNumberTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializeAtomicNumberTable */
  {__pyx_k_initializeCovRadTable, sizeof(__pyx_k_initializeCovRadTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializeCovRadTable */
  {__pyx_k_initializeMassTable, sizeof(__pyx_k_initializeMassTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializeMassTable */
  {__pyx_k_initializeRadTable, sizeof(__pyx_k_initializeRadTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializeRadTable */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_isMetal, sizeof(__pyx_k_isMetal), 0, 1, 1}, /* PyObject cname: __pyx_n_u_isMetal */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_is_duplicate_perimeter_atoms, sizeof(__pyx_k_is_duplicate_perimeter_atoms), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_duplicate_perimeter_atoms */
  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_isenabled */
  {__pyx_k_it, sizeof(__pyx_k_it), 0, 1, 1}, /* PyObject cname: __pyx_n_u_it */
  {__pyx_k_j, sizeof(__pyx_k_j), 0, 1, 1}, /* PyObject cname: __pyx_n_u_j */
  {__pyx_k_k, sizeof(__pyx_k_k), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k */
  {__pyx_k_loadMass, sizeof(__pyx_k_loadMass), 0, 1, 1}, /* PyObject cname: __pyx_n_u_loadMass */
  {__pyx_k_lookupAtomicNumber, sizeof(__pyx_k_lookupAtomicNumber), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lookupAtomicNumber */
  {__pyx_k_lookupCovRadius, sizeof(__pyx_k_lookupCovRadius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lookupCovRadius */
  {__pyx_k_lookupMass, sizeof(__pyx_k_lookupMass), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lookupMass */
  {__pyx_k_lookupRadius, sizeof(__pyx_k_lookupRadius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lookupRadius */
  {__pyx_k_low_dist_range, sizeof(__pyx_k_low_dist_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_low_dist_range */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_mc_sampling_no, sizeof(__pyx_k_mc_sampling_no), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mc_sampling_no */
  {__pyx_k_minRad, sizeof(__pyx_k_minRad), 0, 1, 1}, /* PyObject cname: __pyx_n_u_minRad */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name_2 */
  {__pyx_k_new_xyz, sizeof(__pyx_k_new_xyz), 0, 1, 1}, /* PyObject cname: __pyx_n_u_new_xyz */
  {__pyx_k_newatmnet, sizeof(__pyx_k_newatmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_newatmnet */
  {__pyx_k_newcvornet, sizeof(__pyx_k_newcvornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_newcvornet */
  {__pyx_k_newvornet, sizeof(__pyx_k_newvornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_newvornet */
  {__pyx_k_next, sizeof(__pyx_k_next), 0, 1, 1}, /* PyObject cname: __pyx_n_u_next */
  {__pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_no_default___reduce___due_to_non */
  {__pyx_k_node_id_list, sizeof(__pyx_k_node_id_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_node_id_list */
  {__pyx_k_node_id_set, sizeof(__pyx_k_node_id_set), 0, 1, 1}, /* PyObject cname: __pyx_n_u_node_id_set */
  {__pyx_k_node_ids, sizeof(__pyx_k_node_ids), 0, 1, 1}, /* PyObject cname: __pyx_n_u_node_ids */
  {__pyx_k_node_radii_file, sizeof(__pyx_k_node_radii_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_node_radii_file */
  {__pyx_k_node_size, sizeof(__pyx_k_node_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_node_size */
  {__pyx_k_o_vnode, sizeof(__pyx_k_o_vnode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_o_vnode */
  {__pyx_k_objs, sizeof(__pyx_k_objs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_objs */
  {__pyx_k_overlap_check_flag, sizeof(__pyx_k_overlap_check_flag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_overlap_check_flag */
  {__pyx_k_perform_voronoi_decomposition, sizeof(__pyx_k_perform_voronoi_decomposition), 0, 1, 1}, /* PyObject cname: __pyx_n_u_perform_voronoi_decomposition */
  {__pyx_k_perform_voronoi_decomposition_lo, sizeof(__pyx_k_perform_voronoi_decomposition_lo), 0, 1, 1}, /* PyObject cname: __pyx_n_u_perform_voronoi_decomposition_lo */
  {__pyx_k_points, sizeof(__pyx_k_points), 0, 1, 1}, /* PyObject cname: __pyx_n_u_points */
  {__pyx_k_points_file, sizeof(__pyx_k_points_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_points_file */
  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pop */
  {__pyx_k_print, sizeof(__pyx_k_print), 0, 1, 1}, /* PyObject cname: __pyx_n_u_print */
  {__pyx_k_probeRad, sizeof(__pyx_k_probeRad), 0, 1, 1}, /* PyObject cname: __pyx_n_u_probeRad */
  {__pyx_k_probe_radius, sizeof(__pyx_k_probe_radius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_probe_radius */
  {__pyx_k_prune, sizeof(__pyx_k_prune), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prune */
  {__pyx_k_prune_voronoi_network_close_node, sizeof(__pyx_k_prune_voronoi_network_close_node), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prune_voronoi_network_close_node */
  {__pyx_k_pruned_highaccuracy_voronoi_netw, sizeof(__pyx_k_pruned_highaccuracy_voronoi_netw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pruned_highaccuracy_voronoi_netw */
  {__pyx_k_pruned_vornet, sizeof(__pyx_k_pruned_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pruned_vornet */
  {__pyx_k_py_access_info, sizeof(__pyx_k_py_access_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_access_info */
  {__pyx_k_py_channels, sizeof(__pyx_k_py_channels), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_channels */
  {__pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_state */
  {__pyx_k_pyzeo_extension, sizeof(__pyx_k_pyzeo_extension), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyzeo_extension */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_rad_file, sizeof(__pyx_k_rad_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rad_file */
  {__pyx_k_rad_flag, sizeof(__pyx_k_rad_flag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rad_flag */
  {__pyx_k_radialFlag, sizeof(__pyx_k_radialFlag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_radialFlag */
  {__pyx_k_radialflag, sizeof(__pyx_k_radialflag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_radialflag */
  {__pyx_k_radius, sizeof(__pyx_k_radius), 0, 1, 1}, /* PyObject cname: __pyx_n_u_radius */
  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_range */
  {__pyx_k_readArcfile, sizeof(__pyx_k_readArcfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readArcfile */
  {__pyx_k_readCiffile, sizeof(__pyx_k_readCiffile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readCiffile */
  {__pyx_k_readCssrfile, sizeof(__pyx_k_readCssrfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readCssrfile */
  {__pyx_k_readCucfile, sizeof(__pyx_k_readCucfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readCucfile */
  {__pyx_k_readMassTable, sizeof(__pyx_k_readMassTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readMassTable */
  {__pyx_k_readRadTable, sizeof(__pyx_k_readRadTable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readRadTable */
  {__pyx_k_readV1file, sizeof(__pyx_k_readV1file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_readV1file */
  {__pyx_k_read_from_ARC, sizeof(__pyx_k_read_from_ARC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_read_from_ARC */
  {__pyx_k_read_from_CIF, sizeof(__pyx_k_read_from_CIF), 0, 1, 1}, /* PyObject cname: __pyx_n_u_read_from_CIF */
  {__pyx_k_read_from_CSSR, sizeof(__pyx_k_read_from_CSSR), 0, 1, 1}, /* PyObject cname: __pyx_n_u_read_from_CSSR */
  {__pyx_k_read_from_V1, sizeof(__pyx_k_read_from_V1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_read_from_V1 */
  {__pyx_k_red_vornet, sizeof(__pyx_k_red_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_red_vornet */
  {__pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce */
  {__pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_cython */
  {__pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_ex */
  {__pyx_k_reduced_highaccuracy_vornodes, sizeof(__pyx_k_reduced_highaccuracy_vornodes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduced_highaccuracy_vornodes */
  {__pyx_k_ret_high_acc_atmnet, sizeof(__pyx_k_ret_high_acc_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ret_high_acc_atmnet */
  {__pyx_k_returnbvcells, sizeof(__pyx_k_returnbvcells), 0, 1, 1}, /* PyObject cname: __pyx_n_u_returnbvcells */
  {__pyx_k_sa_str, sizeof(__pyx_k_sa_str), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sa_str */
  {__pyx_k_saveVorCells, sizeof(__pyx_k_saveVorCells), 0, 1, 1}, /* PyObject cname: __pyx_n_u_saveVorCells */
  {__pyx_k_scale, sizeof(__pyx_k_scale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_scale */
  {__pyx_k_self, sizeof(__pyx_k_self), 0, 1, 1}, /* PyObject cname: __pyx_n_u_self */
  {__pyx_k_send, sizeof(__pyx_k_send), 0, 1, 1}, /* PyObject cname: __pyx_n_u_send */
  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_name */
  {__pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate */
  {__pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate_cython */
  {__pyx_k_shift_x, sizeof(__pyx_k_shift_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shift_x */
  {__pyx_k_shift_y, sizeof(__pyx_k_shift_y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shift_y */
  {__pyx_k_shift_z, sizeof(__pyx_k_shift_z), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shift_z */
  {__pyx_k_simplify_highaccuracy_vornet, sizeof(__pyx_k_simplify_highaccuracy_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_simplify_highaccuracy_vornet */
  {__pyx_k_size, sizeof(__pyx_k_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_size */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_sphere_dist_file, sizeof(__pyx_k_sphere_dist_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sphere_dist_file */
  {__pyx_k_src_pyzeo_extension_pyx, sizeof(__pyx_k_src_pyzeo_extension_pyx), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_src_pyzeo_extension_pyx */
  {__pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_stringsource */
  {__pyx_k_subNo, sizeof(__pyx_k_subNo), 0, 1, 1}, /* PyObject cname: __pyx_n_u_subNo */
  {__pyx_k_substituteSeed, sizeof(__pyx_k_substituteSeed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_substituteSeed */
  {__pyx_k_substitute_atoms, sizeof(__pyx_k_substitute_atoms), 0, 1, 1}, /* PyObject cname: __pyx_n_u_substitute_atoms */
  {__pyx_k_substitutionNo, sizeof(__pyx_k_substitutionNo), 0, 1, 1}, /* PyObject cname: __pyx_n_u_substitutionNo */
  {__pyx_k_supercell_flag, sizeof(__pyx_k_supercell_flag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_supercell_flag */
  {__pyx_k_surface_area, sizeof(__pyx_k_surface_area), 0, 1, 1}, /* PyObject cname: __pyx_n_u_surface_area */
  {__pyx_k_sys, sizeof(__pyx_k_sys), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sys */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_throw, sizeof(__pyx_k_throw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_throw */
  {__pyx_k_tmp_atmnet, sizeof(__pyx_k_tmp_atmnet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tmp_atmnet */
  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, /* PyObject cname: __pyx_n_u_value */
  {__pyx_k_vcells, sizeof(__pyx_k_vcells), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vcells */
  {__pyx_k_vedges, sizeof(__pyx_k_vedges), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vedges */
  {__pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vertices */
  {__pyx_k_vfaces, sizeof(__pyx_k_vfaces), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vfaces */
  {__pyx_k_vis_flag, sizeof(__pyx_k_vis_flag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vis_flag */
  {__pyx_k_vnodes, sizeof(__pyx_k_vnodes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vnodes */
  {__pyx_k_vol_str, sizeof(__pyx_k_vol_str), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vol_str */
  {__pyx_k_volume, sizeof(__pyx_k_volume), 0, 1, 1}, /* PyObject cname: __pyx_n_u_volume */
  {__pyx_k_vornet, sizeof(__pyx_k_vornet), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vornet */
  {__pyx_k_vornet_ptr, sizeof(__pyx_k_vornet_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vornet_ptr */
  {__pyx_k_warning, sizeof(__pyx_k_warning), 0, 1, 1}, /* PyObject cname: __pyx_n_u_warning */
  {__pyx_k_writeCiffile, sizeof(__pyx_k_writeCiffile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeCiffile */
  {__pyx_k_writeCssrfile, sizeof(__pyx_k_writeCssrfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeCssrfile */
  {__pyx_k_writeMopacfile, sizeof(__pyx_k_writeMopacfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeMopacfile */
  {__pyx_k_writeNt2file, sizeof(__pyx_k_writeNt2file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeNt2file */
  {__pyx_k_writeV1file, sizeof(__pyx_k_writeV1file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeV1file */
  {__pyx_k_writeVtkfile, sizeof(__pyx_k_writeVtkfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeVtkfile */
  {__pyx_k_writeXyzfile, sizeof(__pyx_k_writeXyzfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_writeXyzfile */
  {__pyx_k_write_to_CIF, sizeof(__pyx_k_write_to_CIF), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_CIF */
  {__pyx_k_write_to_CSSR, sizeof(__pyx_k_write_to_CSSR), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_CSSR */
  {__pyx_k_write_to_MOPAC, sizeof(__pyx_k_write_to_MOPAC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_MOPAC */
  {__pyx_k_write_to_V1, sizeof(__pyx_k_write_to_V1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_V1 */
  {__pyx_k_write_to_VTK, sizeof(__pyx_k_write_to_VTK), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_VTK */
  {__pyx_k_write_to_XYZ, sizeof(__pyx_k_write_to_XYZ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_write_to_XYZ */
  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x */
  {__pyx_k_xyz_list, sizeof(__pyx_k_xyz_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_xyz_list */
  {__pyx_k_xyz_vect, sizeof(__pyx_k_xyz_vect), 0, 1, 1}, /* PyObject cname: __pyx_n_u_xyz_vect */
  {__pyx_k_y, sizeof(__pyx_k_y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y */
  {__pyx_k_z, sizeof(__pyx_k_z), 0, 1, 1}, /* PyObject cname: __pyx_n_u_z */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_print); if (!__pyx_builtin_print) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 34, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyzeo/extension.pyx":1144
 * # cluster
 * def warning(*objs):
 *     print("WARNING", *objs)             # <<<<<<<<<<<<<<
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_n_u_WARNING); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "pyzeo/extension.pyx":235
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(7, ((PyObject*)Py_False), ((PyObject*)Py_False), ((PyObject*)__pyx_mstate_global->__pyx_kp_u__4), ((PyObject*)__pyx_mstate_global->__pyx_kp_u__4), ((PyObject*)__pyx_mstate_global->__pyx_kp_u__4), ((PyObject*)Py_False), ((PyObject*)Py_False)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);

  /* "pyzeo/extension.pyx":350
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
*/
  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);

  /* "pyzeo/extension.pyx":463
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=""):
 *         """
*/
  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, Py_True, __pyx_mstate_global->__pyx_kp_u__4); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);

  /* "pyzeo/extension.pyx":736
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True,             # <<<<<<<<<<<<<<
 *                                      returnbvcells=False):
 *         """
*/
  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(2, Py_True, Py_False); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);

  /* "pyzeo/extension.pyx":909
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
*/
  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(3, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);

  /* "pyzeo/extension.pyx":937
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
*/
  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_float_0_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);

  /* "pyzeo/extension.pyx":956
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
*/
  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);

  /* "pyzeo/extension.pyx":1174
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
*/
  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_float_0_5)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);

  /* "pyzeo/extension.pyx":1189
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
*/
  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_float_0_25)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);

  /* "pyzeo/extension.pyx":1219
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
*/
  __pyx_mstate_global->__pyx_tuple[10] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_float_0_6)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[10])) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[10]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[10]);

  /* "pyzeo/extension.pyx":1273
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
*/
  __pyx_mstate_global->__pyx_tuple[11] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_float_0_1)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[11])) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[11]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[11]);

  /* "pyzeo/extension.pyx":1312
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
*/
  __pyx_mstate_global->__pyx_tuple[12] = PyTuple_Pack(5, ((PyObject*)Py_False), Py_None, ((PyObject*)Py_True), ((PyObject*)__pyx_mstate_global->__pyx_int_neg_1), ((PyObject*)__pyx_mstate_global->__pyx_int_neg_1)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[12])) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[12]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[12]);

  /* "pyzeo/extension.pyx":1376
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
*/
  __pyx_mstate_global->__pyx_tuple[13] = PyTuple_Pack(4, ((PyObject*)Py_False), Py_None, ((PyObject*)Py_True), ((PyObject*)Py_False)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[13])) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[13]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[13]);

  /* "pyzeo/extension.pyx":1440
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
*/
  __pyx_mstate_global->__pyx_tuple[14] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_n_u_LOW)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[14])) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[14]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[14]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_mstate->__pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_mstate->__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_mstate->__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_mstate->__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_mstate->__pyx_float_0_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_mstate->__pyx_float_0_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_25 = PyFloat_FromDouble(0.25); if (unlikely(!__pyx_mstate->__pyx_float_0_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_2 = PyLong_FromLong(2); if (unlikely(!__pyx_mstate->__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_neg_1 = PyLong_FromLong(-1); if (unlikely(!__pyx_mstate->__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 4;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 1;
            unsigned int nlocals : 6;
            unsigned int flags : 10;
            unsigned int first_line : 11;
            unsigned int line_table_length : 14;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 771, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_x};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k__6, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 39, 29};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_factor, __pyx_mstate->__pyx_n_u_new_xyz};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_scale, __pyx_k_A_Q_HF_87_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 0, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 77, 9};
    PyObject* const varnames[] = {0};
    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_initializeRadTable, __pyx_k__7, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 0, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 83, 9};
    PyObject* const varnames[] = {0};
    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_initializeCovRadTable, __pyx_k_Q_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 0, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 89, 9};
    PyObject* const varnames[] = {0};
    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_initializeMassTable, __pyx_k_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 0, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 95, 9};
    PyObject* const varnames[] = {0};
    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_initializeAtomCharacterTable, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 0, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 101, 9};
    PyObject* const varnames[] = {0};
    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_initializeAtomicNumberTable, __pyx_k_1_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 107, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readRadTable, __pyx_k_z_A_IYgQa_A_AQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 116, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readMassTable, __pyx_k_z_A_IYgQa_A_Qa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 125, 21};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_element, __pyx_mstate->__pyx_n_u_radius};
    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_lookupRadius, __pyx_k_Qiq_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 138, 12};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_element};
    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_lookupCovRadius, __pyx_k_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 141, 11};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_element};
    __pyx_mstate_global->__pyx_codeobj_tab[15] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_lookupMass, __pyx_k__8, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[15])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 144, 12};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_element};
    __pyx_mstate_global->__pyx_codeobj_tab[16] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_lookupAtomicNumber, __pyx_k__9, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[16])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 147, 11};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_element};
    __pyx_mstate_global->__pyx_codeobj_tab[17] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_isMetal, __pyx_k_aq_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[17])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 161, 73};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_bvcells, __pyx_mstate->__pyx_n_u_c_bvcells, __pyx_mstate->__pyx_n_u_bvcell, __pyx_mstate->__pyx_n_u_atom_ids, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[18] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_find_bounding_atoms, __pyx_k_A_Ja_Zq_haq_H_avZ_q_D_U_85, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[18])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[19] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[19])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[20] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[20])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 193, 111};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_channel_radius, __pyx_mstate->__pyx_n_u_access_info, __pyx_mstate->__pyx_n_u_c_channels, __pyx_mstate->__pyx_n_u_py_access_info, __pyx_mstate->__pyx_n_u_py_channels, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_channel, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[21] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_find_channels, __pyx_k_2_6_1M_Qk_T_e1KuA_U_U_xq_Zq_7_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[21])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {12, 0, 0, 19, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 235, 107};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_channel_radius, __pyx_mstate->__pyx_n_u_probe_radius, __pyx_mstate->__pyx_n_u_mc_sampling_no, __pyx_mstate->__pyx_n_u_hist_file, __pyx_mstate->__pyx_n_u_high_accuracy, __pyx_mstate->__pyx_n_u_exclude_pockets, __pyx_mstate->__pyx_n_u_points_file, __pyx_mstate->__pyx_n_u_node_radii_file, __pyx_mstate->__pyx_n_u_sphere_dist_file, __pyx_mstate->__pyx_n_u_vis_flag, __pyx_mstate->__pyx_n_u_overlap_check_flag, __pyx_mstate->__pyx_n_u_atmnet_copy, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_c_atmnetcp_ptr, __pyx_mstate->__pyx_n_u_chist_file, __pyx_mstate->__pyx_n_u_cpnt_file, __pyx_mstate->__pyx_n_u_cnd_file, __pyx_mstate->__pyx_n_u_csph_file};
    __pyx_mstate_global->__pyx_codeobj_tab[22] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_calc_pore_size_distribution, __pyx_k_8_A_Q_N_nL_Q_A_1_A_q_Q_Z, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[22])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 281, 65};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_radialflag, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[23] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readCiffile, __pyx_k_z_A_IYgQa_A_uKq_F_A_a_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[23])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 290, 65};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_radialflag, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[24] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readArcfile, __pyx_k_z_A_IYgQa_A_t_a_6_1_a_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[24])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 299, 65};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_radialflag, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[25] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readCucfile, __pyx_k_z_A_IYgQa_A_t_a_6_1_a_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[25])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 308, 65};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_radialflag, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[26] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readCssrfile, __pyx_k_z_A_IYgQa_A_t_q_F_A_a_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[26])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 317, 65};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_radialflag, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[27] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_readV1file, __pyx_k_z_A_IYgQa_A_t_Ql_a_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[27])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 326, 58};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[28] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeCssrfile, __pyx_k_z_A_IYgQa_A_t_a_1_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[28])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 334, 58};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[29] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeCiffile, __pyx_k_z_A_IYgQa_A_t_Ql_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[29])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 342, 58};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[30] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeV1file, __pyx_k_z_A_IYgQa_A_t9A_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[30])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 350, 87};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_minRad, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_vornet_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[31] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeNt2file, __pyx_k_1_z_A_IYgQa_A_7_q_4z_nA_4z_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[31])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 362, 63};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_supercell_flag, __pyx_mstate->__pyx_n_u_is_duplicate_perimeter_atoms, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[32] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeXyzfile, __pyx_k_z_A_IYgQa_A_t_Ql_A_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[32])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 371, 58};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[33] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeVtkfile, __pyx_k_z_A_IYgQa_A_t_Ql_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[33])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 379, 60};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_supercell_flag, __pyx_mstate->__pyx_n_u_c_filename, __pyx_mstate->__pyx_n_u_c_atmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[34] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_writeMopacfile, __pyx_k_z_A_IYgQa_A_t_q_Ja_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[34])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[35] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[35])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[36] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[36])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 439, 38};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_newatmnet};
    __pyx_mstate_global->__pyx_codeobj_tab[37] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_copy, __pyx_k_A_Kq_HE_1_T_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[37])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 463, 137};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_rad_flag, __pyx_mstate->__pyx_n_u_rad_file, __pyx_mstate->__pyx_n_u_c_rad_file, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[38] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_read_from_CIF, __pyx_k_A_Q_Qj_Qj_1_t1_6a_Q_0_A_4_vZq_l, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[38])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 502, 139};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_rad_flag, __pyx_mstate->__pyx_n_u_rad_file, __pyx_mstate->__pyx_n_u_c_rad_file, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[39] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_read_from_ARC, __pyx_k_A_Q_Qj_Qj_1_t1_6a_Q_0_A_4_vZq_l_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[39])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 541, 141};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_rad_flag, __pyx_mstate->__pyx_n_u_rad_file, __pyx_mstate->__pyx_n_u_c_rad_file, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[40] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_read_from_CSSR, __pyx_k_A_a_Qj_Qj_Qj_1_2_q_Q_0_A_4_1L_j, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[40])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 581, 134};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_rad_flag, __pyx_mstate->__pyx_n_u_rad_file, __pyx_mstate->__pyx_n_u_c_rad_file, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[41] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_read_from_V1, __pyx_k_A_A_Qj_Qj_1_t1_6a_0_A_4z_fJa_l_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[41])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 619, 55};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[42] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_CSSR, __pyx_k_A_Qj_4_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[42])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 634, 55};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[43] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_CIF, __pyx_k_A_Qj_4z_d, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[43])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 649, 55};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[44] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_V1, __pyx_k_A_Qj_4y_T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[44])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 664, 60};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_supercell_flag, __pyx_mstate->__pyx_n_u_is_duplicate_perimeter_atoms, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[45] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_XYZ, __pyx_k_A_Qj_4z_d_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[45])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 685, 55};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[46] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_VTK, __pyx_k_A_Qj_4z_d, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[46])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 700, 55};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_supercell_flag, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[47] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_MOPAC, __pyx_k_A_Qj_4_1L_Ja_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[47])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 714, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[48] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_loadMass, __pyx_k_A_AV4q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[48])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 720, 68};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_edge_centers, __pyx_mstate->__pyx_n_u_face_centers, __pyx_mstate->__pyx_n_u_c_fname, __pyx_mstate->__pyx_n_u_vornet_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[49] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_calculate_free_sphere_parameters, __pyx_k_A_Qj_oT1Oq_Q_wa_Ql_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[49])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 34, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 736, 616};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_saveVorCells, __pyx_mstate->__pyx_n_u_returnbvcells, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_vcells, __pyx_mstate->__pyx_n_u_bvcells, __pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_edge_centers, __pyx_mstate->__pyx_n_u_vedges, __pyx_mstate->__pyx_n_u_vnodes, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_edge_orig, __pyx_mstate->__pyx_n_u_edge_end, __pyx_mstate->__pyx_n_u_o_vnode, __pyx_mstate->__pyx_n_u_e_vnode, __pyx_mstate->__pyx_n_u_edge_center, __pyx_mstate->__pyx_n_u_face_centers, __pyx_mstate->__pyx_n_u_vfaces, __pyx_mstate->__pyx_n_u_vertices, __pyx_mstate->__pyx_n_u_cpoint_ptr, __pyx_mstate->__pyx_n_u_node_ids, __pyx_mstate->__pyx_n_u_face_node_ids, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_node_id_list, __pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_node_id_set, __pyx_mstate->__pyx_n_u_centroid, __pyx_mstate->__pyx_n_u_fcs, __pyx_mstate->__pyx_n_u_center, __pyx_mstate->__pyx_n_u_cntr, __pyx_mstate->__pyx_n_u_bvcelllist, __pyx_mstate->__pyx_n_u_basicvcell, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};
    __pyx_mstate_global->__pyx_codeobj_tab[50] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_perform_voronoi_decomposition, __pyx_k_9_34_q_4_1D_4q_j_q_q_vXQ_vXQ_E, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[50])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[51] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[51])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[52] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[52])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[53] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[53])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[54] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[54])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 892, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[55] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_size, __pyx_k_A_t86_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[55])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 895, 38};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_radius, __pyx_mstate->__pyx_n_u_newcvornet, __pyx_mstate->__pyx_n_u_newvornet};
    __pyx_mstate_global->__pyx_codeobj_tab[56] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_prune, __pyx_k_A_hfAQ_N_AQ_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[56])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {7, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 909, 71};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_name, __pyx_mstate->__pyx_n_u_probeRad, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_shift_x, __pyx_mstate->__pyx_n_u_shift_y, __pyx_mstate->__pyx_n_u_shift_z, __pyx_mstate->__pyx_n_u_c_atmnetptr, __pyx_mstate->__pyx_n_u_cname};
    __pyx_mstate_global->__pyx_codeobj_tab[57] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_analyze_writeto_XYZ, __pyx_k_A_a_QfA_IU_q_1_q_j_4q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[57])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 937, 60};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_cutoff_radius, __pyx_mstate->__pyx_n_u_c_filename};
    __pyx_mstate_global->__pyx_codeobj_tab[58] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_write_to_XYZ, __pyx_k_Qj_4_q_D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[58])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 956, 68};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_saveVorCells, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_c_atmnetptr, __pyx_mstate->__pyx_n_u_vcells, __pyx_mstate->__pyx_n_u_bvcells};
    __pyx_mstate_global->__pyx_codeobj_tab[59] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_perform_voronoi_decomposition, __pyx_k_A_A_q_q_4_1F_Q_j_q_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[59])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[60] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[60])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[61] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[61])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 993, 64};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_substituteSeed, __pyx_mstate->__pyx_n_u_radialFlag, __pyx_mstate->__pyx_n_u_substitutionNo, __pyx_mstate->__pyx_n_u_atmnet_copy, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_subNo};
    __pyx_mstate_global->__pyx_codeobj_tab[62] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_substitute_atoms, __pyx_k_Q_N_t_A_j_A_a_N_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[62])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1032, 37};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_dijkstranet, __pyx_mstate->__pyx_n_u_c_vornet};
    __pyx_mstate_global->__pyx_codeobj_tab[63] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_from_VoronoiNetwork, __pyx_k_A_oQ_WA_AZ_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[63])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[64] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[64])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[65] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[65])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[66] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[66])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[67] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[67])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1079, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[68] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_get_num_nodes, __pyx_k_A_t8_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[68])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1083, 46};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_index, __pyx_mstate->__pyx_n_u_coord};
    __pyx_mstate_global->__pyx_codeobj_tab[69] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_get_node_coord, __pyx_k_A_D_Qa_uAU_q_E_at5_Qa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[69])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1088, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_index};
    __pyx_mstate_global->__pyx_codeobj_tab[70] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_get_node_id, __pyx_k_A_t8_Qa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[70])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[71] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[71])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[72] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[72])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1098, 165};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_c_vornet_ptr, __pyx_mstate->__pyx_n_u_cycles, __pyx_mstate->__pyx_n_u_ids, __pyx_mstate->__pyx_n_u_centroid_list, __pyx_mstate->__pyx_n_u_it, __pyx_mstate->__pyx_n_u_iit, __pyx_mstate->__pyx_n_u_new_xyz, __pyx_mstate->__pyx_n_u_id_set};
    __pyx_mstate_global->__pyx_codeobj_tab[73] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_compute_centroid_4cycles, __pyx_k_7_t_a_A_V6_S_d_Q_6_wj_c_q_A_d_S, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[73])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1133, 24};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_points};
    __pyx_mstate_global->__pyx_codeobj_tab[74] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_compute_face_centers, __pyx_k_WA_q_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[74])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS), 1143, 11};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_objs};
    __pyx_mstate_global->__pyx_codeobj_tab[75] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_warning, __pyx_k_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[75])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1147, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_atmnetptr};
    __pyx_mstate_global->__pyx_codeobj_tab[76] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_simplify_highaccuracy_vornet, __pyx_k_nG1_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[76])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1155, 97};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_c_atmnetptr, __pyx_mstate->__pyx_n_u_xyz_vect, __pyx_mstate->__pyx_n_u_xyz_list, __pyx_mstate->__pyx_n_u_it, __pyx_mstate->__pyx_n_u_new_xyz};
    __pyx_mstate_global->__pyx_codeobj_tab[77] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_reduced_highaccuracy_vornodes, __pyx_k_nG1_A_1_q_86_S_A_RvT_fD_V4q_q_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[77])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1174, 86};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_delta, __pyx_mstate->__pyx_n_u_ha_atmnet, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_ecs, __pyx_mstate->__pyx_n_u_fcs, __pyx_mstate->__pyx_n_u_c_atmnetptr, __pyx_mstate->__pyx_n_u_c_ha_atmnetptr, __pyx_mstate->__pyx_n_u_c_vornetptr};
    __pyx_mstate_global->__pyx_codeobj_tab[78] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_pruned_highaccuracy_voronoi_netw, __pyx_k_0_e1_Q_4vY_A_nG1_z_q_Q_A_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[78])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 10, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1189, 99};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_delta, __pyx_mstate->__pyx_n_u_ha_vornet, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_ecs, __pyx_mstate->__pyx_n_u_fcs, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_c_vornet_ptr, __pyx_mstate->__pyx_n_u_c_ha_vornet_ptr, __pyx_mstate->__pyx_n_u_red_vornet};
    __pyx_mstate_global->__pyx_codeobj_tab[79] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_get_nearest_largest_diameter_hig, __pyx_k_q_31HF_4vV_9_WA_7_j_q_a_8_Ja_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[79])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1219, 92};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_delta, __pyx_mstate->__pyx_n_u_ha_atmnet, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_ecs, __pyx_mstate->__pyx_n_u_fcs, __pyx_mstate->__pyx_n_u_ha_vornet, __pyx_mstate->__pyx_n_u_node_size, __pyx_mstate->__pyx_n_u_ha_node_size};
    __pyx_mstate_global->__pyx_codeobj_tab[80] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_generate_simplified_highaccuracy, __pyx_k_A_e1_Q_4vV_9_d_q_e1_9E_z_A_q_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[80])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1273, 195};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_delta, __pyx_mstate->__pyx_n_u_ha_atmnet, __pyx_mstate->__pyx_n_u_vornet, __pyx_mstate->__pyx_n_u_ecs, __pyx_mstate->__pyx_n_u_fcs, __pyx_mstate->__pyx_n_u_ha_vornet, __pyx_mstate->__pyx_n_u_node_size, __pyx_mstate->__pyx_n_u_ha_node_size, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_c_ha_vornet_ptr, __pyx_mstate->__pyx_n_u_red_vornet, __pyx_mstate->__pyx_n_u_pruned_vornet};
    __pyx_mstate_global->__pyx_codeobj_tab[81] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_prune_voronoi_network_close_node, __pyx_k_A_e1_Q_4vV_9_d_q_e1_9E_a_z_A_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[81])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {9, 0, 0, 14, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1312, 159};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_channel_radius, __pyx_mstate->__pyx_n_u_probe_radius, __pyx_mstate->__pyx_n_u_mc_sampling_no, __pyx_mstate->__pyx_n_u_high_accuracy, __pyx_mstate->__pyx_n_u_high_accuracy_atmnet, __pyx_mstate->__pyx_n_u_exclude_pockets, __pyx_mstate->__pyx_n_u_low_dist_range, __pyx_mstate->__pyx_n_u_high_dist_range, __pyx_mstate->__pyx_n_u_ret_high_acc_atmnet, __pyx_mstate->__pyx_n_u_c_org_atmnet_ptr, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_tmp_atmnet, __pyx_mstate->__pyx_n_u_vol_str};
    __pyx_mstate_global->__pyx_codeobj_tab[82] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_volume, __pyx_k_Q_1_T_Q_vU_Qa_a_a_D_A_q_1_V5_k, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[82])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {8, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1376, 154};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_channel_radius, __pyx_mstate->__pyx_n_u_probe_radius, __pyx_mstate->__pyx_n_u_mc_sampling_no, __pyx_mstate->__pyx_n_u_high_accuracy, __pyx_mstate->__pyx_n_u_high_accuracy_atmnet, __pyx_mstate->__pyx_n_u_exclude_pockets, __pyx_mstate->__pyx_n_u_extended_output, __pyx_mstate->__pyx_n_u_ret_high_acc_atmnet, __pyx_mstate->__pyx_n_u_c_org_atmnet_ptr, __pyx_mstate->__pyx_n_u_c_atmnet_ptr, __pyx_mstate->__pyx_n_u_tmp_atmnet, __pyx_mstate->__pyx_n_u_sa_str};
    __pyx_mstate_global->__pyx_codeobj_tab[83] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_surface_area, __pyx_k_Q_a_T_Q_vU_Qa_a_a_D_A_q_1_V5_k, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[83])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1440, 75};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_atmnet, __pyx_mstate->__pyx_n_u_accuracy_setting, __pyx_mstate->__pyx_n_u_c_atmnetptr, __pyx_mstate->__pyx_n_u_acc_set};
    __pyx_mstate_global->__pyx_codeobj_tab[84] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_src_pyzeo_extension_pyx, __pyx_mstate->__pyx_n_u_high_accuracy_atomnet, __pyx_k_Cq_j_nG1_z_A_I_6gQa_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[84])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < (0))) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs;
    PyObject *dict;
#if !CYTHON_ASSUME_SAFE_SIZE
    nkwargs = PyTuple_Size(kwnames);
    if (unlikely(nkwargs < 0)) return NULL;
#else
    nkwargs = PyTuple_GET_SIZE(kwnames);
#endif
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
#if !CYTHON_ASSUME_SAFE_MACROS
        PyObject *key = PyTuple_GetItem(kwnames, i);
        if (!key) goto bad;
#else
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
#endif
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* UnpackUnboundCMethod */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {
        return _PyObject_Vectorcall
            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);
}
#else
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {
    return
#if PY_VERSION_HEX < 0x03090000
    _PyObject_Vectorcall
#else
    PyObject_Vectorcall
#endif
        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);
}
#endif
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
     METH_VARARGS | METH_KEYWORDS,
#else
     METH_FASTCALL | METH_KEYWORDS,
#endif
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method, *result=NULL;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    result = method;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            result = unbound_method;
        }
    }
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    if (unlikely(target->method)) {
        Py_DECREF(result);
    } else
#endif
    target->method = result;
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);
        }
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *result = NULL;
        PyObject *args = PyTuple_New(2);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
        return result;
    }
#endif
    {
        PyObject *args[4] = {NULL, self, arg1, arg2};
        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
    }
}

/* ParseKeywords */
static int __Pyx_ValidateDuplicatePosArgs(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char* function_name)
{
    PyObject ** const *name = argnames;
    while (name != first_kw_arg) {
        PyObject *key = **name;
        int found = PyDict_Contains(kwds, key);
        if (unlikely(found)) {
            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);
            goto bad;
        }
        name++;
    }
    return 0;
bad:
    return -1;
}
#if CYTHON_USE_UNICODE_INTERNALS
static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {
    int kind;
    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);
    if (len != PyUnicode_GET_LENGTH(s2)) return 0;
    kind = PyUnicode_KIND(s1);
    if (kind != PyUnicode_KIND(s2)) return 0;
    const void *data1 = PyUnicode_DATA(s1);
    const void *data2 = PyUnicode_DATA(s2);
    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);
}
#endif
static int __Pyx_MatchKeywordArg_str(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    #if CYTHON_USE_UNICODE_INTERNALS
    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;
    if (unlikely(key_hash == -1)) {
        key_hash = PyObject_Hash(key);
        if (unlikely(key_hash == -1))
            goto bad;
    }
    #endif
    name = first_kw_arg;
    while (*name) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) {
                *index_found = (size_t) (name - argnames);
                return 1;
            }
        }
        #endif
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {
            if (__Pyx_UnicodeKeywordsEqual(name_str, key))
                goto arg_passed_twice;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            if (unlikely(name_str == key)) goto arg_passed_twice;
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) goto arg_passed_twice;
        }
        #endif
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
bad:
    return -1;
}
static int __Pyx_MatchKeywordArg_nostr(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;
    name = first_kw_arg;
    while (*name) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (cmp == 1) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        if (unlikely(cmp == -1)) goto bad;
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (unlikely(cmp != 0)) {
            if (cmp == 1) goto arg_passed_twice;
            else goto bad;
        }
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
bad:
    return -1;
}
static CYTHON_INLINE int __Pyx_MatchKeywordArg(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    return likely(PyUnicode_CheckExact(key)) ?
        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :
        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);
}
static void __Pyx_RejectUnknownKeyword(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char *function_name)
{
    Py_ssize_t pos = 0;
    PyObject *key = NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(kwds);
    while (PyDict_Next(kwds, &pos, &key, NULL)) {
        PyObject** const *name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (!*name) {
            #if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
            #endif
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp != 1) {
                if (cmp == 0) {
                    PyErr_Format(PyExc_TypeError,
                        "%s() got an unexpected keyword argument '%U'",
                        function_name, key);
                }
                #if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(key);
                #endif
                break;
            }
            #if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(key);
            #endif
        }
    }
    __Pyx_END_CRITICAL_SECTION();
    assert(PyErr_Occurred());
}
static int __Pyx_ParseKeywordDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t extracted = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    name = first_kw_arg;
    while (*name && num_kwargs > extracted) {
        PyObject * key = **name;
        PyObject *value;
        int found = 0;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        found = PyDict_GetItemRef(kwds, key, &value);
        #else
        value = PyDict_GetItemWithError(kwds, key);
        if (value) {
            Py_INCREF(value);
            found = 1;
        } else {
            if (unlikely(PyErr_Occurred())) goto bad;
        }
        #endif
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            extracted++;
        }
        name++;
    }
    if (num_kwargs > extracted) {
        if (ignore_unknown_kwargs) {
            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))
                goto bad;
        } else {
            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);
            goto bad;
        }
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordDictToDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t len;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    if (PyDict_Update(kwds2, kwds) < 0) goto bad;
    name = first_kw_arg;
    while (*name) {
        PyObject *key = **name;
        PyObject *value;
#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))
        int found = PyDict_Pop(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
        }
#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        int found = PyDict_GetItemRef(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;
        }
#else
    #if CYTHON_COMPILING_IN_CPYTHON
        value = _PyDict_Pop(kwds2, key, kwds2);
    #else
        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);
    #endif
        if (value == kwds2) {
            Py_DECREF(value);
        } else {
            if (unlikely(!value)) goto bad;
            values[name-argnames] = value;
        }
#endif
        name++;
    }
    len = PyDict_Size(kwds2);
    if (len > 0) {
        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);
    } else if (unlikely(len == -1)) {
        goto bad;
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordsTuple(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject *key = NULL;
    PyObject** const * name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {
#if CYTHON_AVOID_BORROWED_REFS
        key = __Pyx_PySequence_ITEM(kwds, pos);
#else
        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);
#endif
#if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!key)) goto bad;
#endif
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            PyObject *value = kwvalues[pos];
            values[name-argnames] = __Pyx_NewRef(value);
        } else {
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp == 1) {
                PyObject *value = kwvalues[pos];
                values[index_found] = __Pyx_NewRef(value);
            } else {
                if (unlikely(cmp == -1)) goto bad;
                if (kwds2) {
                    PyObject *value = kwvalues[pos];
                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                } else if (!ignore_unknown_kwargs) {
                    goto invalid_keyword;
                }
            }
        }
        #if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(key);
        key = NULL;
        #endif
    }
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    goto bad;
bad:
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(key);
    #endif
    return -1;
}
static int __Pyx_ParseKeywords(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))
        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
    else if (kwds2)
        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);
    else
        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RejectKeywords */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds) {
    PyObject *key = NULL;
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds))) {
        key = __Pyx_PySequence_ITEM(kwds, 0);
    } else {
        Py_ssize_t pos = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
        if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return;
#endif
        PyDict_Next(kwds, &pos, &key, NULL);
        Py_INCREF(key);
    }
    if (likely(key)) {
        PyErr_Format(PyExc_TypeError,
            "%s() got an unexpected keyword argument '%U'",
            function_name, key);
        Py_DECREF(key);
    }
}

/* RaiseException */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
#elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            return __Pyx_PyList_GetItemRef(o, n);
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseUnboundLocalError */
static void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
    }
    if (unlikely(!__Pyx_PyLong_CompactAsLong(op1, &a))) {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
        }
    }
            if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                    || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
        return PyLong_FromLong(x);
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_TrueDivideObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) / (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_TrueDivideObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_TrueDivideObjC(op1, op2, inplace);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C0000
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#elif __PYX_LIMITED_VERSION_HEX > 0x030C0000
    local_value = PyErr_GetRaisedException();
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
#if __PYX_LIMITED_VERSION_HEX > 0x030C0000
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
#else
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
#endif // __PYX_LIMITED_VERSION_HEX > 0x030C0000
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#elif __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    PyErr_SetHandledException(local_value);
    Py_XDECREF(local_value);
    Py_XDECREF(local_type);
    Py_XDECREF(local_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
#if __PYX_LIMITED_VERSION_HEX <= 0x030C0000
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
#endif
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc, *new_exc;
    __Pyx_PyThreadState_declare
    int is_async_stopiteration = 0;
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    __Pyx_PyThreadState_assign
    cur_exc = __Pyx_PyErr_CurrentExceptionType();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else {
            return;
        }
    }
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(tb);
    new_exc = PyObject_CallFunction(PyExc_RuntimeError, "s",
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        "generator raised StopIteration");
    if (!new_exc) {
        Py_XDECREF(val);
        return;
    }
    PyException_SetCause(new_exc, val); // steals ref to val
    PyErr_SetObject(PyExc_RuntimeError, new_exc);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
#if CYTHON_COMPILING_IN_LIMITED_API
            || __Pyx_get_runtime_version() >= 0x030A0000
#endif
            )
            return result;
        {
            Py_ssize_t size = __Pyx_PySet_GET_SIZE(result);
            if (likely(size > 0))
                return result;
#if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(size < 0)) {
                Py_DECREF(result);
                return NULL;
            }
#endif
        }
        Py_DECREF(result);
#endif
    }
    return __Pyx_PyObject_CallNoArg((PyObject*) &PyFrozenSet_Type);
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* CallTypeTraverse */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* LimitedApiGetTypeDict */
#if CYTHON_COMPILING_IN_LIMITED_API
static Py_ssize_t __Pyx_GetTypeDictOffset(void) {
    PyObject *tp_dictoffset_o;
    Py_ssize_t tp_dictoffset;
    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");
    if (unlikely(!tp_dictoffset_o)) return -1;
    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);
    Py_DECREF(tp_dictoffset_o);
    if (unlikely(tp_dictoffset == 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' doesn't have a dictoffset");
        return -1;
    } else if (unlikely(tp_dictoffset < 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' has an unexpected negative dictoffset. "
            "Please report this as Cython bug");
        return -1;
    }
    return tp_dictoffset;
}
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {
    static Py_ssize_t tp_dictoffset = 0;
    if (unlikely(tp_dictoffset == 0)) {
        tp_dictoffset = __Pyx_GetTypeDictOffset();
        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {
            tp_dictoffset = 0; // try again next time?
            return NULL;
        }
    }
    return *(PyObject**)((char*)tp + tp_dictoffset);
}
#endif

/* SetItemOnTypeDict */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_SetItem(tp_dict, k, v);
    if (likely(!result)) {
        PyType_Modified(tp);
        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {
            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);
            if (!setNameResult) return -1;
            Py_DECREF(setNameResult);
        }
    }
    return result;
}

/* FixUpExtensionType */
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if __PYX_LIMITED_VERSION_HEX > 0x030900B1
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
#else
    const PyType_Slot *slot = spec->slots;
    int changed = 0;
#if !CYTHON_COMPILING_IN_LIMITED_API
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
#if !CYTHON_COMPILING_IN_CPYTHON
        const
#endif  // !CYTHON_COMPILING_IN_CPYTHON)
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif  // CYTHON_METH_FASTCALL
#if !CYTHON_COMPILING_IN_PYPY
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                    Py_DECREF(descr);
                    if (unlikely(set_item_result < 0)) {
                        return -1;
                    }
                    changed = 1;
                }
#endif  // !CYTHON_COMPILING_IN_PYPY
            }
            memb++;
        }
    }
#endif  // !CYTHON_COMPILING_IN_LIMITED_API
#if !CYTHON_COMPILING_IN_PYPY
    slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_getset)
        slot++;
    if (slot && slot->slot == Py_tp_getset) {
        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;
        while (getset && getset->name) {
            if (getset->name[0] == '_' && getset->name[1] == '_' && strcmp(getset->name, "__module__") == 0) {
                PyObject *descr = PyDescr_NewGetSet(type, getset);
                if (unlikely(!descr))
                    return -1;
                #if CYTHON_COMPILING_IN_LIMITED_API
                PyObject *pyname = PyUnicode_FromString(getset->name);
                if (unlikely(!pyname)) {
                    Py_DECREF(descr);
                    return -1;
                }
                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);
                Py_DECREF(pyname);
                #else
                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                #endif
                Py_DECREF(descr);
                if (unlikely(set_item_result < 0)) {
                    return -1;
                }
                changed = 1;
            }
            ++getset;
        }
    }
#endif  // !CYTHON_COMPILING_IN_PYPY
    if (changed)
        PyType_Modified(type);
#endif  // PY_VERSION_HEX > 0x030900B1
    return 0;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);
    PyErr_Format(PyExc_AttributeError,
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[1] = {obj};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_CallNoArg;
    return PyObject_VectorcallMethod(method_name, args, 1 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
#endif
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_SIZE
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (unlikely(n < 0)) return -1;
#endif
    for (i = 1; i < n; i++)
    {
        PyTypeObject *b;
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !CYTHON_USE_TYPE_SLOTS
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
CYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {
    while (t) {
        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
        if (bases) {
            return 1;
        }
        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);
    }
    return 0;
}
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (!__Pyx_PyType_HasMultipleInheritance(t)) {
        return PyType_Ready(t);
    }
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\
                !CYTHON_COMPILING_IN_GRAAL
        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* DelItemOnTypeDict */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_DelItem(tp_dict, k);
    if (likely(!result)) PyType_Modified(tp);
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_mstate_global->__pyx_n_u_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_mstate_global->__pyx_n_u_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython);
            if (likely(reduce_cython)) {
                ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_mstate_global->__pyx_n_u_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetFullyQualifiedName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);
#elif PY_VERSION_HEX >= 0x030d0000
    PyDict_SetDefaultRef(d, key, default_value, &value);
#else
    value = PyDict_SetDefault(d, key, default_value);
    if (unlikely(!value)) return NULL;
    Py_INCREF(value);
#endif
    return value;
}

/* FetchCommonType */
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);
    if (result && metaclass) {
        PyObject *old_tp = (PyObject*)Py_TYPE(result);
    Py_INCREF((PyObject*)metaclass);
#if __PYX_LIMITED_VERSION_HEX >= 0x03090000
        Py_SET_TYPE(result, metaclass);
#else
        result->ob_type = metaclass;
#endif
        Py_DECREF(old_tp);
    }
    return result;
}
#else
#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)
#endif
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t expected_basicsize) {
    Py_ssize_t basicsize;
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (expected_basicsize == 0) {
        return 0; // size is inherited, nothing useful to check
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
    if (unlikely(!py_basicsize)) return -1;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = NULL;
    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;
#else
    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;
#endif
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;
    int get_item_ref_result;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    py_object_name = PyUnicode_FromString(object_name);
    if (!py_object_name) return NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) goto done;
    abi_module_dict = PyModule_GetDict(abi_module);
    if (!abi_module_dict) goto done;
    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);
    if (get_item_ref_result == 1) {
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else if (unlikely(get_item_ref_result == -1)) {
        goto bad;
    }
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);
    if (unlikely(new_cached_type != cached_type)) {
        if (unlikely(!new_cached_type)) goto bad;
        Py_DECREF(cached_type);
        cached_type = new_cached_type;
        if (__Pyx_VerifyCachedType(
                cached_type,
                object_name,
                spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else {
        Py_DECREF(new_cached_type);
    }
done:
    Py_XDECREF(abi_module);
    Py_DECREF(py_object_name);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CommonTypesMetaclass */
static PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {
    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);
}
static PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {
    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {
    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},
    {0, 0}
};
static PyType_Spec __pyx_CommonTypesMetaclass_spec = {
    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",
    0,
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
    Py_TPFLAGS_DISALLOW_INSTANTIATION |
#endif
    Py_TPFLAGS_DEFAULT,
    __pyx_CommonTypesMetaclass_slots
};
static int __pyx_CommonTypesMetaclass_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, &PyType_Type);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);
    Py_DECREF(bases);
    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {
        return -1;
    }
    return 0;
}

/* PyMethodNew */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {
    PyObject *result;
    CYTHON_UNUSED_VAR(closure);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_doc_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_name_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    Py_INCREF(op->func_qualname);
    result = op->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_dict_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_defaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_kwdefaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_annotations_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {
    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(is_coroutine_value)) {
            return is_coroutine_value;
        }
ignore:
        PyErr_Clear();
    }
    return __Pyx_PyBool_FromLong(is_coroutine);
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    result = __Pyx_CyFunction_get_is_coroutine_value(op);
    if (unlikely(!result))
        return NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    if (op->func_is_coroutine) {
        Py_DECREF(result);
        result = __Pyx_NewRef(op->func_is_coroutine);
    } else {
        op->func_is_coroutine = __Pyx_NewRef(result);
    }
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(args);
    __Pyx_BEGIN_CRITICAL_SECTION(m);
    Py_INCREF(m->func_qualname);
    result = m->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    PyObject *repr;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
    __Pyx_END_CRITICAL_SECTION();
    return repr;
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    if (__Pyx_TypeCheck(method, &PyMethodDescr_Type))
#endif
    {
#if CYTHON_COMPILING_IN_LIMITED_API
        return PyErr_Format(
            PyExc_SystemError,
            "Cython cannot yet handle classmethod on a MethodDescriptorType (%S) in limited API mode. "
            "This is most likely a classmethod in a cdef class method with binding=False. "
            "Try setting 'binding' to True.",
            method);
#elif CYTHON_COMPILING_IN_GRAAL
        PyTypeObject *d_type = PyDescrObject_GetType(method);
        return PyDescr_NewClassMethod(d_type, PyMethodDescrObject_GetMethod(method));
#else
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        PyTypeObject *d_type = descr->d_common.d_type;
        return PyDescr_NewClassMethod(d_type, descr->d_method);
#endif
    }
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
#else
    {
        PyObject *func=NULL;
        PyObject *builtins, *classmethod, *classmethod_str, *result=NULL;
        if (__Pyx_TypeCheck(method, __pyx_mstate_global->__Pyx_CachedMethodType)) {
            func = PyObject_GetAttrString(method, "__func__");
            if (!func) goto bad;
        } else {
            func = method;
            Py_INCREF(func);
        }
        builtins = PyEval_GetBuiltins(); // borrowed
        if (unlikely(!builtins)) goto bad;
        classmethod_str = PyUnicode_FromString("classmethod");
        if (unlikely(!classmethod_str)) goto bad;
        classmethod = PyObject_GetItem(builtins, classmethod_str);
        Py_DECREF(classmethod_str);
        if (unlikely(!classmethod)) goto bad;
        result = PyObject_CallFunctionObjArgs(classmethod, func, NULL);
        Py_DECREF(classmethod);
        bad:
        Py_XDECREF(func);
        return result;
    }
#endif
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_mstate_global->__pyx_n_u_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyLong_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__5);
    }
    goto done;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* IterNextPlain */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void) {
    if (unlikely(!__pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache))
        __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_next);
    return __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator) {
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
    PyObject *result;
    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();
    if (unlikely(!next)) return NULL;
    result = PyObject_CallFunctionObjArgs(next, iterator, NULL);
    return result;
#else
    (void)__Pyx_GetBuiltinName; // only for early limited API
    iternextfunc iternext = __Pyx_PyObject_GetIterNextFunc(iterator);
    assert(iternext);
    return iternext(iterator);
#endif
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000)))
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async);
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext) {
    if (value == Py_None) {
        if (async || !iternext)
            PyErr_SetNone(async ? PyExc_StopAsyncIteration : PyExc_StopIteration);
        return;
    }
    __Pyx__ReturnWithStopIteration(value, async);
}
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async) {
#if CYTHON_COMPILING_IN_CPYTHON
    __Pyx_PyThreadState_declare
#endif
    PyObject *exc;
    PyObject *exc_type = async ? PyExc_StopAsyncIteration : PyExc_StopIteration;
#if CYTHON_COMPILING_IN_CPYTHON
    if ((PY_VERSION_HEX >= (0x030C00A6)) || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        if (PY_VERSION_HEX >= (0x030e00A1)) {
            exc = __Pyx_PyObject_CallOneArg(exc_type, value);
        } else {
            PyObject *args_tuple = PyTuple_New(1);
            if (unlikely(!args_tuple)) return;
            Py_INCREF(value);
            PyTuple_SET_ITEM(args_tuple, 0, value);
            exc = PyObject_Call(exc_type, args_tuple, NULL);
            Py_DECREF(args_tuple);
        }
        if (unlikely(!exc)) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_value)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(exc_type);
        __Pyx_ErrRestore(exc_type, exc, NULL);
        return;
    }
    #endif
#else
    exc = __Pyx_PyObject_CallOneArg(exc_type, value);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(exc_type, exc);
    Py_DECREF(exc);
}

/* CoroutineBase */
#if !CYTHON_COMPILING_IN_LIMITED_API
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6 && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#endif // CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void
__Pyx_Coroutine_Undelegate(__pyx_CoroutineObject *gen) {
#if CYTHON_USE_AM_SEND
    gen->yieldfrom_am_send = NULL;
#endif
    Py_CLEAR(gen->yieldfrom);
}
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
            value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
            if (unlikely(!value)) goto limited_api_failure;
            #else
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            #endif
            Py_DECREF(ev);
        }
        else if (unlikely(PyTuple_Check(ev))) {
            Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(ev);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(tuple_size < 0)) {
                Py_XDECREF(tb);
                Py_DECREF(ev);
                Py_DECREF(et);
                return -1;
            }
            #endif
            if (tuple_size >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#elif CYTHON_ASSUME_SAFE_MACROS
                value = PySequence_ITEM(ev, 0);
#else
                value = PySequence_GetItem(ev, 0);
                if (!value) goto limited_api_failure;
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
#else
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
#endif
    Py_DECREF(ev);
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!value)) return -1;
#endif
    *pvalue = value;
    return 0;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL || !CYTHON_ASSUME_SAFE_MACROS
  limited_api_failure:
    Py_XDECREF(et);
    Py_XDECREF(tb);
    Py_XDECREF(ev);
    return -1;
#endif
}
static CYTHON_INLINE
__Pyx_PySendResult __Pyx_Coroutine_status_from_result(PyObject **retval) {
    if (*retval) {
        return PYGEN_NEXT;
    } else if (likely(__Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, retval) == 0)) {
        return PYGEN_RETURN;
    } else {
        return PYGEN_ERROR;
    }
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
static void __Pyx_Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
__Pyx_PySendResult __Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, PyObject **result, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(__Pyx_Coroutine_get_is_running(self));  // Callers should ensure is_running
    if (unlikely(self->resume_label == -1)) {
        __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
        return PYGEN_ERROR;
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    retval = self->body(self, tstate, value);
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    *result = retval;
    if (self->resume_label == -1) {
        return likely(retval) ? PYGEN_RETURN : PYGEN_ERROR;
    }
    return PYGEN_NEXT;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
#define __Pyx_Coroutine_MethodReturnFromResult(gen, result, retval, iternext)\
    ((result) == PYGEN_NEXT ? (retval) : __Pyx__Coroutine_MethodReturnFromResult(gen, result, retval, iternext))
static PyObject *
__Pyx__Coroutine_MethodReturnFromResult(PyObject* gen, __Pyx_PySendResult result, PyObject *retval, int iternext) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (likely(result == PYGEN_RETURN)) {
        int is_async = 0;
        #ifdef __Pyx_AsyncGen_USED
        is_async = __Pyx_AsyncGen_CheckExact(gen);
        #endif
        __Pyx_ReturnWithStopIteration(retval, is_async, iternext);
        Py_XDECREF(retval);
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE __Pyx_PySendResult
__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen, PyObject** retval) {
    __Pyx_PySendResult result;
    PyObject *val = NULL;
    assert(__Pyx_Coroutine_get_is_running(gen));
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    result = __Pyx_Coroutine_SendEx(gen, val, retval, 0);
    Py_XDECREF(val);
    return result;
}
#if CYTHON_USE_AM_SEND
static __Pyx_PySendResult
__Pyx_Coroutine_SendToDelegate(__pyx_CoroutineObject *gen, __Pyx_pyiter_sendfunc gen_am_send, PyObject *value, PyObject **retval) {
    PyObject *ret = NULL;
    __Pyx_PySendResult delegate_result, result;
    assert(__Pyx_Coroutine_get_is_running(gen));
    delegate_result = gen_am_send(gen->yieldfrom, value, &ret);
    if (delegate_result == PYGEN_NEXT) {
        assert (ret != NULL);
        *retval = ret;
        return PYGEN_NEXT;
    }
    assert (delegate_result != PYGEN_ERROR || ret == NULL);
    __Pyx_Coroutine_Undelegate(gen);
    result = __Pyx_Coroutine_SendEx(gen, ret, retval, 0);
    Py_XDECREF(ret);
    return result;
}
#endif
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result = __Pyx_Coroutine_AmSend(self, value, &retval);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
}
static __Pyx_PySendResult
__Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval) {
    __Pyx_PySendResult result;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, value, retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
      #if !CYTHON_USE_AM_SEND
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
      #endif
        {
            #if !CYTHON_COMPILING_IN_LIMITED_API || __PYX_LIMITED_VERSION_HEX >= 0x03080000
            if (value == Py_None && PyIter_Check(yf))
                ret = __Pyx_PyIter_Next_Plain(yf);
            else
            #endif
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_u_send, value);
        }
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            *retval = ret;
            return PYGEN_NEXT;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, value, retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return result;
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    CYTHON_UNUSED_VAR(gen);
    assert(__Pyx_Coroutine_get_is_running(gen));
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        result = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    #endif
    {
        PyObject *meth;
        result = PYGEN_RETURN;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval)) {
                result = PYGEN_ERROR;
            }
        }
    }
    Py_XDECREF(retval);
    return result == PYGEN_ERROR ? -1 : 0;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, Py_None, &retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX < 0x030A00A3 || !CYTHON_USE_AM_SEND)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = __Pyx_PyIter_Next_Plain(yf);
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 1);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result;
    CYTHON_UNUSED_VAR(arg);
    result = __Pyx_Coroutine_Close(self, &retval);
    if (unlikely(result == PYGEN_ERROR))
        return NULL;
    Py_XDECREF(retval);
    Py_RETURN_NONE;
}
static __Pyx_PySendResult
__Pyx_Coroutine_Close(PyObject *self, PyObject **retval) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PySendResult result;
    PyObject *yf;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    yf = gen->yieldfrom;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    result = __Pyx_Coroutine_SendEx(gen, NULL, retval, 1);
    if (result == PYGEN_ERROR) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_Coroutine_unset_is_running(gen);
        if (!__Pyx_PyErr_Occurred()) {
            return PYGEN_RETURN;
        } else if (likely(__Pyx_PyErr_ExceptionMatches2(PyExc_GeneratorExit, PyExc_StopIteration))) {
            __Pyx_PyErr_Clear();
            return PYGEN_RETURN;
        }
        return PYGEN_ERROR;
    } else if (likely(result == PYGEN_RETURN && *retval == Py_None)) {
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_RETURN;
    } else {
        const char *msg;
        Py_DECREF(*retval);
        *retval = NULL;
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
            msg = "async generator ignored GeneratorExit";
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_ERROR;
    }
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen)))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    yf = gen->yieldfrom;
    if (yf) {
        __Pyx_PySendResult result;
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                goto propagate_exception;
            goto throw_here;
        }
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    __Pyx_Coroutine_unset_is_running(gen);
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        Py_DECREF(yf);
        if (ret) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &ret);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, ret, 0);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
propagate_exception:
    {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, NULL, &retval, 0);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
    }
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    {
        int e = __Pyx_call_type_traverse((PyObject*)gen, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        {
            destructor del = __Pyx_PyObject_GetSlot(gen, tp_del, destructor);
            if (del) del(self);
        }
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
#if CYTHON_USE_TP_FINALIZE
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_Close(self, &retval);
        if (result == PYGEN_ERROR) {
            PyErr_WriteUnraisable(self);
        } else {
            Py_XDECREF(retval);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
}
#endif
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx__Coroutine_get_frame(__pyx_CoroutineObject *self)
{
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyObject *frame;
    #if PY_VERSION_HEX >= 0x030d0000
    Py_BEGIN_CRITICAL_SECTION(self);
    #endif
    frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        PyObject *globals = PyDict_New();
        if (unlikely(!globals)) return NULL;
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            globals,                        /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        Py_DECREF(globals);
        if (unlikely(!frame))
            return NULL;
        if (unlikely(self->gi_frame)) {
            Py_DECREF(frame);
            frame = self->gi_frame;
        } else {
            self->gi_frame = frame;
        }
    }
    Py_INCREF(frame);
    #if PY_VERSION_HEX >= 0x030d0000
    Py_END_CRITICAL_SECTION();
    #endif
    return frame;
#else
    CYTHON_UNUSED_VAR(self);
    Py_RETURN_NONE;
#endif
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context) {
    CYTHON_UNUSED_VAR(context);
    PyObject *frame = self->gi_frame;
    if (frame)
        return __Pyx_NewRef(frame);
    return __Pyx__Coroutine_get_frame(self);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->yieldfrom_am_send = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_LIMITED_API
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    gen->is_running = 1;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen) {
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    assert(gen->is_running);
    gen->is_running = 0;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
}
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure) {
    CYTHON_UNUSED_VAR(closure);
    char result = __Pyx_Coroutine_get_is_running((__pyx_CoroutineObject*)gen);
    if (result) Py_RETURN_TRUE;
    else Py_RETURN_FALSE;
}
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send) {
    Py_ssize_t ptr_offset = (char*)(type->tp_as_async) - (char*)type;
    if (ptr_offset < 0 || ptr_offset > type->tp_basicsize) {
        return;
    }
    memcpy((void*)static_amsend_methods, (void*)(type->tp_as_async), sizeof(*type->tp_as_async));
    static_amsend_methods->am_send = am_send;
    type->tp_as_async = __Pyx_SlotTpAsAsync(static_amsend_methods);
}
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    __Pyx_TypeName self_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE((PyObject*)self));
    PyErr_Format(PyExc_TypeError, "cannot pickle '" __Pyx_FMT_TYPENAME "' object",
                         self_type_name);
    __Pyx_DECREF_TypeName(self_type_name);
    return NULL;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {"__reduce_ex__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_O, 0},
    {"__reduce__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {"gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     PyDoc_STR("object being iterated by 'yield from', or None")},
    {"gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {"__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {"__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     PyDoc_STR("name of the generator"), 0},
    {"__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     PyDoc_STR("qualified name of the generator"), 0},
    {"gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     PyDoc_STR("Frame of the generator"), 0},
    {"gi_running", __Pyx_Coroutine_get_is_running_getter, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) PyObject_GenericGetAttr},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    {Py_am_send, (void *)__Pyx_Coroutine_AmSend},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE | __Pyx_TPFLAGS_HAVE_AM_SEND,
    __pyx_GeneratorType_slots
};
#if __PYX_HAS_PY_AM_SEND == 2
static __Pyx_PyAsyncMethodsStruct __pyx_Generator_as_async;
#endif
static int __pyx_Generator_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_GeneratorType_spec, NULL);
    if (unlikely(!mstate->__pyx_GeneratorType)) {
        return -1;
    }
#if __PYX_HAS_PY_AM_SEND == 2
    __Pyx_SetBackportTypeAmSend(mstate->__pyx_GeneratorType, &__pyx_Generator_as_async, &__Pyx_Coroutine_AmSend);
#endif
    return 0;
}
static PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *retval = NULL;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    __Pyx_Coroutine_unset_is_running(gen);
    (void) result;
    assert (result == PYGEN_RETURN || result == PYGEN_ERROR);
    assert ((result == PYGEN_RETURN && retval != NULL) || (result == PYGEN_ERROR && retval == NULL));
    return retval;
}

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* NewCodeObj */
#if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030c00A1
    if (likely(result))
        result->_co_firsttraceable = 0;
    #endif
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL
        && !CYTHON_COMPILING_IN_GRAAL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}
#if CYTHON_USE_PYLONG_INTERNALS
static CYTHON_INLINE int __Pyx_PyLong_CompactAsLong(PyObject *x, long *return_value) {
    if (unlikely(!__Pyx_PyLong_IsCompact(x)))
        return 0;
    Py_ssize_t value = __Pyx_PyLong_CompactValue(x);
    if ((sizeof(long) < sizeof(Py_ssize_t)) && unlikely(value != (long) value))
        return 0;
    *return_value = (long) value;
    return 1;
}
#endif


/* MultiPhaseInitModuleState */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
